{
    "tool_name": "EPFO Employee Verification",
    "tool_description": "This API that takes company and employee information as input and returns if the employee name is found in the PF list of the employer",
    "title": "EPFO Employee Verification",
    "pricing": "FREEMIUM",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 105,
        "avgSuccessRate": 94,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "home_url": "https://rapidapi.com/idfy-idfy-default/api/epfo-employee-verification/",
    "host": "epfo-employee-verification.p.rapidapi.com",
    "api_list": [
        {
            "name": "GET Call",
            "url": "https://epfo-employee-verification.p.rapidapi.com/v3/tasks",
            "description": "Used to fetch api result using the request id received in responses.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "request_id",
                    "type": "STRING",
                    "description": "",
                    "default": "68bbb910-da9b-4d8a-9a1d-4bd878b19846"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://epfo-employee-verification.p.rapidapi.com/v3/tasks\"\nquerystring = {\"request_id\": request_id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"epfo-employee-verification.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "EPFO Employee Verification",
            "url": "https://epfo-employee-verification.p.rapidapi.com/v3/tasks/async/verify_with_source/epfo_employee",
            "description": "This API that takes company and employee information as input and returns if the employee name is found in the PF list of the employer.\nPlease make a get call, using the get endpoint in the bundle. This will fetch the result of request_id received in response.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://epfo-employee-verification.p.rapidapi.com/v3/tasks/async/verify_with_source/epfo_employee\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"epfo-employee-verification.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "EPFO Employee Verification",
            "url": "https://epfo-employee-verification.p.rapidapi.com/v3/tasks/async/verify_with_source/epfo_employee",
            "description": "This API that takes company and employee information as input and returns if the employee name is found in the PF list of the employer.\nPlease make a get call, using the get endpoint in the bundle. This will fetch the result of request_id received in response.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://epfo-employee-verification.p.rapidapi.com/v3/tasks/async/verify_with_source/epfo_employee\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"epfo-employee-verification.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://epfo-employee-verification.p.rapidapi.com/v3/tasks/async/verify_with_source/epfo_employee\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"epfo-employee-verification.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        }
    ]
}