{
    "product_id": "api_a4bf6e83-9c49-4ae3-abf4-f7846653fb5c",
    "tool_description": "Meet Lemurbot - Your Personal AI Chatbot Companion! With advanced features like creating, training and chatting, Lemurbot makes it easy and fun for users to interact and learn from an intelligent conversationalist. Plus, with ChatGPT integration and the ability to create multiple bots, the possibilities for learning and entertainment are endless!",
    "home_url": "https://rapidapi.com/lemur-engine-lemur-engine-default/api/lemurbot/",
    "name": "LemurBot",
    "title": "LemurBot",
    "pricing": "FREEMIUM",
    "tool_name": "LemurBot",
    "score": {
        "avgServiceLevel": 87,
        "avgLatency": 3644,
        "avgSuccessRate": 80,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "host": "lemurbot.p.rapidapi.com",
    "api_list": [
        {
            "name": "Get A Category Group",
            "url": "https://lemurbot.p.rapidapi.com/category-groups/{id}",
            "description": "Get a specific category group by it's id and view it's details.\nYou are able to view your own category groups and locked category groups.\n'Locked' category groups are a master set of records available to link to your bots",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of CategoryGroup",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/category-groups/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/category-groups/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "success": false,
                "message": "Record not found."
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Get A Category",
            "url": "https://lemurbot.p.rapidapi.com/categories/{id}",
            "description": "Get a specific category by it's id and view it's details",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of Category",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/categories/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/categories/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "success": false,
                "message": "Record not found."
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Get A Bot Property",
            "url": "https://lemurbot.p.rapidapi.com/bot-properties/{id}",
            "description": "Get a specific bot property by it's id and view it's details",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of BotProperty",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-properties/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-properties/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "List All Bot Properties",
            "url": "https://lemurbot.p.rapidapi.com/bot-properties",
            "description": "Get a list of bot properties that belong to bots created by the user (not locked bots).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                },
                {
                    "name": "value",
                    "type": "STRING",
                    "description": "Value of the bot propery - this will perform a partial search",
                    "default": ""
                },
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the bot propery",
                    "default": "name"
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of the bot property",
                    "default": ""
                },
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                },
                {
                    "name": "bot_id",
                    "type": "NUMBER",
                    "description": "bot_id of the bot property",
                    "default": ""
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "bot",
                    "type": "STRING",
                    "description": "Bot slug of the bot",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-properties\"\nquerystring = {\"limit\": 20, \"value\": \"\", \"name\": \"name\", \"page\": 1, \"id\": \"\", \"order\": \"id\", \"bot_id\": \"\", \"dir\": \"asc\", \"bot\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-properties\"\nquerystring = {\"limit\": 20, \"value\": \"\", \"name\": \"name\", \"page\": 1, \"id\": \"\", \"order\": \"id\", \"bot_id\": \"\", \"dir\": \"asc\", \"bot\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "bot_id",
                                "name",
                                "value"
                            ],
                            "properties": {
                                "id": {
                                    "description": "The id of the bot property",
                                    "type": "integer"
                                },
                                "bot_id": {
                                    "description": "The id of the bot",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "The field name of the bot property",
                                    "type": "string",
                                    "maxLength": 100
                                },
                                "value": {
                                    "description": "The value of the bot property",
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "List All Bots",
            "url": "https://lemurbot.p.rapidapi.com/bots",
            "description": "Get a list of bots that are available to this user.\nThese will either be bots created by the user or 'locked' public bots which can be chatted to but not editted. (e.g. 1)",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of Bot",
                    "default": ""
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "slug",
                    "type": "STRING",
                    "description": "Slug of the bot (e.g. dilly)",
                    "default": ""
                },
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                },
                {
                    "name": "locked",
                    "type": "BOOLEAN",
                    "description": "search for bots which are locked or bots which are not locked (e.g. false)",
                    "default": false
                },
                {
                    "name": "title",
                    "type": "STRING",
                    "description": "Title of the bot (e.g. Dilly)",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "description",
                    "type": "STRING",
                    "description": "Perform a partial search on the description of the bot (e.g. demo bot)",
                    "default": ""
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bots\"\nquerystring = {\"id\": \"\", \"dir\": \"asc\", \"slug\": \"\", \"order\": \"id\", \"locked\": false, \"title\": \"\", \"page\": 1, \"description\": \"\", \"limit\": 20}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bots\"\nquerystring = {\"id\": \"\", \"dir\": \"asc\", \"slug\": \"\", \"order\": \"id\", \"locked\": false, \"title\": \"\", \"page\": 1, \"description\": \"\", \"limit\": 20}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "title",
                                "summary",
                                "default_response",
                                "image"
                            ],
                            "properties": {
                                "id": {
                                    "description": "The id of the bot",
                                    "type": "integer"
                                },
                                "slug": {
                                    "description": "This is a unique string used to identify the bot",
                                    "type": "string"
                                },
                                "title": {
                                    "description": "This is the title of the bot (the bot's actual name is set in the bot properties)",
                                    "type": "string",
                                    "maxLength": 50
                                },
                                "summary": {
                                    "description": "A summary of the bot",
                                    "type": "string",
                                    "maxLength": 75
                                },
                                "description": {
                                    "description": "A description of the bot",
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "maxLength": 2056
                                },
                                "default_response": {
                                    "description": "If everything fails then this is the default response the bot will return",
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "image": {
                                    "description": "A url of the avatar used for this bot (we only use images from api.dicebear.com). If a image isnt specified one will be created automatically",
                                    "type": "string",
                                    "format": "url",
                                    "maxLength": 255,
                                    "pattern": "~(.*)api\\.dicebear\\.com(.*)~"
                                },
                                "locked": {
                                    "description": "Locked bots are example bots that anyone can talk to but you cannot update, delete or access logs",
                                    "type": "boolean"
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Get A Bot",
            "url": "https://lemurbot.p.rapidapi.com/bots/1",
            "description": "Get a specific bot by its id. (e.g. 1)",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of Bot",
                    "default": 1
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bots/1\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bots/{id}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "List All Category Groups",
            "url": "https://lemurbot.p.rapidapi.com/category-groups",
            "description": "Categories are organised into category groups. For example if you have a set of categories to handle questions on the weather these could be grouped into a category group called 'weather-categories'.\nYou are able to view your own category groups and locked category groups.\n'Locked' category groups are a master set of records available to link to your bots",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "locked",
                    "type": "BOOLEAN",
                    "description": "Locked category groups can be linked to bot so that you can access their knowledge categories but you cannot cannot update, delete or access this group or it's categories",
                    "default": ""
                },
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                },
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "the name of the category group - this search is a partial search",
                    "default": "hello"
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of the category group",
                    "default": ""
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                },
                {
                    "name": "slug",
                    "type": "STRING",
                    "description": "the slug of the category group - this search is an exact search",
                    "default": "hello"
                },
                {
                    "name": "description",
                    "type": "STRING",
                    "description": "the description of the category group - this search is a partial search",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/category-groups\"\nquerystring = {\"locked\": \"\", \"order\": \"id\", \"name\": \"hello\", \"page\": 1, \"id\": \"\", \"dir\": \"asc\", \"limit\": 20, \"slug\": \"hello\", \"description\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/category-groups\"\nquerystring = {\"locked\": \"\", \"order\": \"id\", \"name\": \"hello\", \"page\": 1, \"id\": \"\", \"dir\": \"asc\", \"limit\": 20, \"slug\": \"hello\", \"description\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "name",
                                "description"
                            ],
                            "properties": {
                                "id": {
                                    "description": "The id of the category group",
                                    "type": "integer"
                                },
                                "slug": {
                                    "description": "This is a unique string used to identify the category group - this is automatically generated",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the category group",
                                    "type": "string",
                                    "maxLength": 255,
                                    "minLength": 40
                                },
                                "description": {
                                    "description": "The description of the categories contained in this group",
                                    "type": "string",
                                    "maxLength": 2056,
                                    "minLength": 5
                                },
                                "locked": {
                                    "description": "Locked category groups cannot be editted by users but they can be linked to bots",
                                    "type": "boolean"
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "List All Clients",
            "url": "https://lemurbot.p.rapidapi.com/clients",
            "description": "Clients talk to bots. This return a list of all clients that have spoken your bots. Clients can talk to your bots or the locked bots.\n'Locked' bots are a set of public bots available to link to your clients in addition to bots you create.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                },
                {
                    "name": "slug",
                    "type": "STRING",
                    "description": "The slug of the client",
                    "default": ""
                },
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of the client",
                    "default": ""
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "is_banned",
                    "type": "BOOLEAN",
                    "description": "The banned status of this client",
                    "default": "name"
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/clients\"\nquerystring = {\"order\": \"id\", \"slug\": \"\", \"id\": \"\", \"limit\": 20, \"dir\": \"asc\", \"page\": 1, \"is_banned\": \"name\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/clients\"\nquerystring = {\"order\": \"id\", \"slug\": \"\", \"id\": \"\", \"limit\": 20, \"dir\": \"asc\", \"page\": 1, \"is_banned\": \"name\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "The id of the client",
                                    "type": "integer"
                                },
                                "slug": {
                                    "description": "This is a string used to identify the client - if one is not created by the user then it is automatically generated - we suggest generating your own uuid",
                                    "type": "string",
                                    "maxLength": 36,
                                    "minLength": 5
                                },
                                "is_banned": {
                                    "description": "Prevent further conversations between this client and the bot by setting is_banned to true",
                                    "type": "boolean"
                                },
                                "image": {
                                    "description": "The image is automatically generated by getting a url from api.dicebear.com. The avatar selected correspnds to the one chosen for the linked bot",
                                    "type": "string"
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Get A Bot Category Group",
            "url": "https://lemurbot.p.rapidapi.com/bot-category-groups/{id}",
            "description": "Get a specific bot category group by it's id and view it's details",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of BotCategoryGroup",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-category-groups/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-category-groups/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "properties": {
                            "id": {
                                "description": "The id of the bot category group",
                                "type": "integer"
                            },
                            "bot_id": {
                                "description": "The id of the bot",
                                "type": "integer"
                            },
                            "category_group_id": {
                                "description": "The id of the category group",
                                "type": "integer"
                            },
                            "created_at": {
                                "description": "The date time the record was created",
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "description": "The date time the record was last updated",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Get A Client",
            "url": "https://lemurbot.p.rapidapi.com/clients/{id}",
            "description": "Get a specific client by it's id and view it's details",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of Client",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/clients/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/clients/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "List All Bot Category Groups",
            "url": "https://lemurbot.p.rapidapi.com/bot-category-groups",
            "description": "Get a list of category groups which are linked to user owned bots (not locked bots).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "category_group",
                    "type": "STRING",
                    "description": "Category group slug of the category group in the bot category group",
                    "default": ""
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                },
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                },
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of the bot category group",
                    "default": ""
                },
                {
                    "name": "bot",
                    "type": "STRING",
                    "description": "Bot slug of the bot in the bot category group",
                    "default": ""
                },
                {
                    "name": "category_group_id",
                    "type": "NUMBER",
                    "description": "category_group_id of the category group",
                    "default": ""
                },
                {
                    "name": "bot_id",
                    "type": "NUMBER",
                    "description": "bot_id of the bot category group",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-category-groups\"\nquerystring = {\"category_group\": \"\", \"dir\": \"asc\", \"limit\": 20, \"order\": \"id\", \"id\": \"\", \"bot\": \"\", \"category_group_id\": \"\", \"bot_id\": \"\", \"page\": 1}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-category-groups\"\nquerystring = {\"category_group\": \"\", \"dir\": \"asc\", \"limit\": 20, \"order\": \"id\", \"id\": \"\", \"bot\": \"\", \"category_group_id\": \"\", \"bot_id\": \"\", \"page\": 1}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "The id of the bot category group",
                                    "type": "integer"
                                },
                                "bot_id": {
                                    "description": "The id of the bot",
                                    "type": "integer"
                                },
                                "category_group_id": {
                                    "description": "The id of the category group",
                                    "type": "integer"
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "List All Categories",
            "url": "https://lemurbot.p.rapidapi.com/categories",
            "description": "Categories are pieces of knowledge used by the bots to respond to the user.\nCreate and update categories inorder to teach and train your bot.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                },
                {
                    "name": "category_group_id",
                    "type": "NUMBER",
                    "description": "The id of the category group",
                    "default": ""
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "topic",
                    "type": "STRING",
                    "description": "The active topic of the conversation - this search is a full term search",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                },
                {
                    "name": "that",
                    "type": "STRING",
                    "description": "The that is the previous bot output/response to match on - this search is a partial search",
                    "default": ""
                },
                {
                    "name": "template",
                    "type": "STRING",
                    "description": "The template is the raw output that is parsed and used to generate a response - this search is a partial search",
                    "default": ""
                },
                {
                    "name": "pattern",
                    "type": "STRING",
                    "description": "The pattern is the user input to match on - this search is a partial search",
                    "default": "test"
                },
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of the category",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/categories\"\nquerystring = {\"limit\": 20, \"category_group_id\": \"\", \"dir\": \"asc\", \"topic\": \"\", \"page\": 1, \"order\": \"id\", \"that\": \"\", \"template\": \"\", \"pattern\": \"test\", \"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/categories\"\nquerystring = {\"limit\": 20, \"category_group_id\": \"\", \"dir\": \"asc\", \"topic\": \"\", \"page\": 1, \"order\": \"id\", \"that\": \"\", \"template\": \"\", \"pattern\": \"test\", \"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "category_group_id",
                                "pattern",
                                "template"
                            ],
                            "properties": {
                                "id": {
                                    "description": "The id of the category",
                                    "type": "integer"
                                },
                                "category_group_id": {
                                    "description": "The id of the category group",
                                    "type": "integer"
                                },
                                "pattern": {
                                    "description": "The category pattern is used to match the client input message",
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "topic": {
                                    "description": "Topics can be set and the category will only be triggered if the category topic is matched to current topic",
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "maxLength": 255
                                },
                                "that": {
                                    "description": "This is the previous response returned by the bot. Only use the 'that' field to add context.",
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "maxLength": 255
                                },
                                "template": {
                                    "description": "Templates are parsed to generated bot responses. Categories use the AIML stamdard.",
                                    "type": "string",
                                    "maxLength": 4112
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Get A Conversation",
            "url": "https://lemurbot.p.rapidapi.com/conversations/{id}",
            "description": "Get a specific conversation by it's id and view it's details",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of Conversation",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversations/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversations/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "required": [
                            "bot_id",
                            "client_id"
                        ],
                        "properties": {
                            "id": {
                                "description": "The id of the conversation",
                                "type": "integer"
                            },
                            "bot_id": {
                                "description": "The id of the bot",
                                "type": "integer"
                            },
                            "client_id": {
                                "description": "The id of the client",
                                "type": "integer"
                            },
                            "turn_count": {
                                "description": "The number of turns in this conversation",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "created_at": {
                                "description": "The date time the record was created",
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "description": "The date time the record was last updated",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "List All Conversations",
            "url": "https://lemurbot.p.rapidapi.com/conversations",
            "description": "Conversations are created between clients and bots.\nUsers can only view conversations between their clients and bots.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                },
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                },
                {
                    "name": "bot",
                    "type": "STRING",
                    "description": "The bot slug of the conversation - conversation are linked to bots",
                    "default": ""
                },
                {
                    "name": "client",
                    "type": "STRING",
                    "description": "The client slug of the conversation - conversation are linked to clients",
                    "default": ""
                },
                {
                    "name": "bot_id",
                    "type": "NUMBER",
                    "description": "The bot_id of the conversation - conversation are linked to bots",
                    "default": ""
                },
                {
                    "name": "client_id",
                    "type": "NUMBER",
                    "description": "The client_id of the conversation - conversation are linked to clients",
                    "default": ""
                },
                {
                    "name": "slug",
                    "type": "STRING",
                    "description": "The slug of the conversation",
                    "default": ""
                },
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of the conversation",
                    "default": ""
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversations\"\nquerystring = {\"page\": 1, \"limit\": 20, \"order\": \"id\", \"bot\": \"\", \"client\": \"\", \"bot_id\": \"\", \"client_id\": \"\", \"slug\": \"\", \"id\": \"\", \"dir\": \"asc\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversations\"\nquerystring = {\"page\": 1, \"limit\": 20, \"order\": \"id\", \"bot\": \"\", \"client\": \"\", \"bot_id\": \"\", \"client_id\": \"\", \"slug\": \"\", \"id\": \"\", \"dir\": \"asc\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "bot_id",
                                "client_id"
                            ],
                            "properties": {
                                "id": {
                                    "description": "The id of the conversation",
                                    "type": "integer"
                                },
                                "bot_id": {
                                    "description": "The id of the bot",
                                    "type": "integer"
                                },
                                "client_id": {
                                    "description": "The id of the client",
                                    "type": "integer"
                                },
                                "turn_count": {
                                    "description": "The number of turns in this conversation",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "List All Conversation Turns",
            "url": "https://lemurbot.p.rapidapi.com/conversation-turns",
            "description": "Each conversation has conversation turns.\nEach turn represents an input from the client and the output from the bot.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                },
                {
                    "name": "conversation",
                    "type": "STRING",
                    "description": "The slug of the conversation - conversation are linked to conversation turns",
                    "default": ""
                },
                {
                    "name": "conversation_id",
                    "type": "NUMBER",
                    "description": "The id of the conversation - conversation are linked to conversation turns",
                    "default": ""
                },
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "input",
                    "type": "STRING",
                    "description": "What was said to the bot by the client - this is a partial search",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "output",
                    "type": "STRING",
                    "description": "What was said by the bot in response to the client input - this is a partial search",
                    "default": ""
                },
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of the conversation turn",
                    "default": ""
                },
                {
                    "name": "order",
                    "type": "STRING",
                    "description": "the search field you wish to order by - the available field names are the sames ones you can search by",
                    "default": "id"
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversation-turns\"\nquerystring = {\"limit\": 20, \"conversation\": \"\", \"conversation_id\": \"\", \"dir\": \"asc\", \"input\": \"\", \"page\": 1, \"output\": \"\", \"id\": \"\", \"order\": \"id\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversation-turns\"\nquerystring = {\"limit\": 20, \"conversation\": \"\", \"conversation_id\": \"\", \"dir\": \"asc\", \"input\": \"\", \"page\": 1, \"output\": \"\", \"id\": \"\", \"order\": \"id\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "required": [
                                "conversation_id"
                            ],
                            "properties": {
                                "id": {
                                    "description": "The id of the conversation turn",
                                    "type": "integer"
                                },
                                "conversation_id": {
                                    "description": "The id of the conversation",
                                    "type": "integer"
                                },
                                "input": {
                                    "description": "The input from the client",
                                    "type": "string"
                                },
                                "output": {
                                    "description": "The response from the bot",
                                    "type": "string"
                                },
                                "created_at": {
                                    "description": "The date time the record was created",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "updated_at": {
                                    "description": "The date time the record was last updated",
                                    "type": "string",
                                    "format": "date-time"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Get A Conversation Turn",
            "url": "https://lemurbot.p.rapidapi.com/conversation-turns/{id}",
            "description": "Get a specific conversation turn by it's id and view it's details",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "NUMBER",
                    "description": "The id of ConversationTurn",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversation-turns/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/conversation-turns/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Get Chat Detail",
            "url": "https://lemurbot.p.rapidapi.com/chat/detail",
            "description": "Get the details for an active chat session.\nSend a bot slug and client slug as query parameters and the request will return the details from the last active chat session.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "client",
                    "type": "STRING",
                    "description": "The slug of the client",
                    "default": "d531e3bd-b6c3-4f3f-bb58-a6632cbed5e2"
                },
                {
                    "name": "bot",
                    "type": "STRING",
                    "description": "The slug of the bot",
                    "default": "dilly"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/chat/detail\"\nquerystring = {\"client\": \"d531e3bd-b6c3-4f3f-bb58-a6632cbed5e2\", \"bot\": \"dilly\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/chat/detail\"\nquerystring = {\"client\": \"d531e3bd-b6c3-4f3f-bb58-a6632cbed5e2\", \"bot\": \"dilly\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "properties": {
                            "conversation": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the conversation",
                                        "type": "integer"
                                    },
                                    "slug": {
                                        "description": "The unique string id of the conversation",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "bot": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the bot",
                                        "type": "integer"
                                    },
                                    "slug": {
                                        "description": "The unique string id of the bot",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the bot (taken from the bot properties and if not available then the bot title)",
                                        "type": "string"
                                    },
                                    "image": {
                                        "description": "The bot's dicebear avatar url",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "client": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the client",
                                        "type": "integer"
                                    },
                                    "slug": {
                                        "description": "The unique string id of the client",
                                        "type": "string"
                                    },
                                    "image": {
                                        "description": "The client's dicebear avatar url",
                                        "type": "string"
                                    },
                                    "is_banned": {
                                        "description": "The client's banned status",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Get Chat Log",
            "url": "https://lemurbot.p.rapidapi.com/chat/log",
            "description": "Get the logs for an active chat session.\nSend a bot slug and client slug as query parameters and the request will return the logs from the last active chat session.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "client",
                    "type": "STRING",
                    "description": "The slug of the client",
                    "default": "d531e3bd-b6c3-4f3f-bb58-a6632cbed5e2"
                },
                {
                    "name": "bot",
                    "type": "STRING",
                    "description": "The slug of the bot",
                    "default": "dilly"
                }
            ],
            "optional_parameters": [
                {
                    "name": "dir",
                    "type": "STRING",
                    "description": "the direction of the ordering",
                    "default": "asc"
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "the page number of results to start from",
                    "default": 1
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "the number of records to return",
                    "default": 20
                }
            ],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/chat/log\"\nquerystring = {\"client\": \"d531e3bd-b6c3-4f3f-bb58-a6632cbed5e2\", \"dir\": \"asc\", \"page\": 1, \"bot\": \"dilly\", \"limit\": 20}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/chat/log\"\nquerystring = {\"client\": \"d531e3bd-b6c3-4f3f-bb58-a6632cbed5e2\", \"dir\": \"asc\", \"page\": 1, \"bot\": \"dilly\", \"limit\": 20}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "client": {
                                    "description": "The input from the client",
                                    "type": "string"
                                },
                                "bot": {
                                    "description": "The output from the bot",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "paging": {
                        "properties": {
                            "records": {
                                "description": "The number of records returned in the request",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "total": {
                                "description": "The total number of records available",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "page": {
                                "description": "The current page number",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 1
                            },
                            "limit": {
                                "description": "The number of records to return",
                                "type": [
                                    "integer",
                                    "null"
                                ],
                                "default": 20
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Create A Category",
            "url": "https://lemurbot.p.rapidapi.com/categories",
            "description": "Create a category.\nCategories are units of knowledge, when a category is created, it can be linked to a bot via it's category group.\nThen the bot will be able respond to inputs using this category.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/categories\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/categories\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "required": [
                            "category_group_id",
                            "pattern",
                            "template"
                        ],
                        "properties": {
                            "id": {
                                "description": "The id of the category",
                                "type": "integer"
                            },
                            "category_group_id": {
                                "description": "The id of the category group",
                                "type": "integer"
                            },
                            "pattern": {
                                "description": "The category pattern is used to match the client input message",
                                "type": "string",
                                "maxLength": 255
                            },
                            "topic": {
                                "description": "Topics can be set and the category will only be triggered if the category topic is matched to current topic",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "maxLength": 255
                            },
                            "that": {
                                "description": "This is the previous response returned by the bot. Only use the 'that' field to add context.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "maxLength": 255
                            },
                            "template": {
                                "description": "Templates are parsed to generated bot responses. Categories use the AIML stamdard.",
                                "type": "string",
                                "maxLength": 4112
                            },
                            "created_at": {
                                "description": "The date time the record was created",
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "description": "The date time the record was last updated",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Create A Bot Property",
            "url": "https://lemurbot.p.rapidapi.com/bot-properties",
            "description": "Create a property for any bot created by the user (not locked bots).",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-properties\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-properties\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "required": [
                            "bot_id",
                            "name",
                            "value"
                        ],
                        "properties": {
                            "id": {
                                "description": "The id of the bot property",
                                "type": "integer"
                            },
                            "bot_id": {
                                "description": "The id of the bot",
                                "type": "integer"
                            },
                            "name": {
                                "description": "The field name of the bot property",
                                "type": "string",
                                "maxLength": 100
                            },
                            "value": {
                                "description": "The value of the bot property",
                                "type": "string",
                                "maxLength": 255
                            },
                            "created_at": {
                                "description": "The date time the record was created",
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "description": "The date time the record was last updated",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Create A Bot",
            "url": "https://lemurbot.p.rapidapi.com/bots",
            "description": "Create your own bot\nNew bots will be created with a random personality and the title will be copied to the bot properties name.\nIt will also be linked to a default set of category groups.\nAt the moment the images used are automatically selected from the dicebear api.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bots\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bots\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Create A Category Group",
            "url": "https://lemurbot.p.rapidapi.com/category-groups",
            "description": "Category groups control access between a bot and categories.\nCreate a category group, then add some new categories to it and finally link your bot the group.\nNow your bot will be able to access the knowledge categories you have created for it.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/category-groups\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/category-groups\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "required": [
                            "name",
                            "description"
                        ],
                        "properties": {
                            "id": {
                                "description": "The id of the category group",
                                "type": "integer"
                            },
                            "slug": {
                                "description": "This is a unique string used to identify the category group - this is automatically generated",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the category group",
                                "type": "string",
                                "maxLength": 255,
                                "minLength": 40
                            },
                            "description": {
                                "description": "The description of the categories contained in this group",
                                "type": "string",
                                "maxLength": 2056,
                                "minLength": 5
                            },
                            "locked": {
                                "description": "Locked category groups cannot be editted by users but they can be linked to bots",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "The date time the record was created",
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "description": "The date time the record was last updated",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Create A Client",
            "url": "https://lemurbot.p.rapidapi.com/clients",
            "description": "It is not required to send a payload in the client request as one will be created automatically.\nBut by choosing your own 'slug' you can better identify the people talking to your bot.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/clients\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/clients\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "properties": {
                            "id": {
                                "description": "The id of the client",
                                "type": "integer"
                            },
                            "slug": {
                                "description": "This is a string used to identify the client - if one is not created by the user then it is automatically generated - we suggest generating your own uuid",
                                "type": "string",
                                "maxLength": 36,
                                "minLength": 5
                            },
                            "is_banned": {
                                "description": "Prevent further conversations between this client and the bot by setting is_banned to true",
                                "type": "boolean"
                            },
                            "image": {
                                "description": "The image is automatically generated by getting a url from api.dicebear.com. The avatar selected correspnds to the one chosen for the linked bot",
                                "type": "string"
                            },
                            "created_at": {
                                "description": "The date time the record was created",
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "description": "The date time the record was last updated",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        {
            "name": "Create A Bot Category Group",
            "url": "https://lemurbot.p.rapidapi.com/bot-category-groups",
            "description": "When you create a link between a bot and a category group the bot can now access and use the categories in this group",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-category-groups\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/bot-category-groups\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Chat To A Bot",
            "url": "https://lemurbot.p.rapidapi.com/chat",
            "description": "Send a message from a client to a bot and the bot will respond with an output.\nIt is not required to set up client in order to start a conversation as one will be created automatically using the client slug you send in the 'chat' request.\nBut by choosing your own 'slug' you can better identify the people chatting to your bot.\nTo carry on a conversation between the client and the bot - make sure you send the same client slug in subsequent chats.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/chat\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lemurbot.p.rapidapi.com/chat\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lemurbot.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "properties": {
                            "conversation": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the conversation",
                                        "type": "integer"
                                    },
                                    "slug": {
                                        "description": "The unique string id of the conversation",
                                        "type": "string"
                                    },
                                    "input": {
                                        "description": "The client input sent to the bot",
                                        "type": "string"
                                    },
                                    "output": {
                                        "description": "The bot response sent back",
                                        "type": "string"
                                    },
                                    "topic": {
                                        "description": "The active topic (if there is one)",
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    }
                                },
                                "type": "object"
                            },
                            "bot": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the bot",
                                        "type": "integer"
                                    },
                                    "slug": {
                                        "description": "The unique string id of the bot",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the bot (taken from the bot properties and if not available then the bot title)",
                                        "type": "string"
                                    },
                                    "image": {
                                        "description": "The bot's dicebear avatar url",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "client": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the client",
                                        "type": "integer"
                                    },
                                    "slug": {
                                        "description": "The unique string id of the client",
                                        "type": "string"
                                    },
                                    "image": {
                                        "description": "The client's dicebear avatar url",
                                        "type": "string"
                                    },
                                    "is_banned": {
                                        "description": "The client's banned status",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "features": {
                                "description": "Any additional features of the conversation are sent here - this will normally be empty",
                                "type": "object"
                            },
                            "metadata": {
                                "properties": {
                                    "version": {
                                        "description": "The version of the engine used.",
                                        "type": "string"
                                    },
                                    "date": {
                                        "description": "The date time of the request",
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "duration": {
                                        "description": "Time taken to process requests in milliseconds",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    ],
    "standardized_name": "lemurbot"
}