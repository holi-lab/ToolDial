{
    "product_id": "api_ec856a81-fa36-4c62-8e80-a27b38123a73",
    "tool_description": "Supercharge your AI-powered applications with our optimized proxy API, leveraging the cutting-edge power of GPT 4.0 with an impressive token limit of 8000. Our feature-rich API provides an array of advanced capabilities, including rate limiting, caching, error handling, analytics integration, extensive language support, flexible preprocessing options, customizable settings, and highly insightful outputs. With our API, you'll unlock the true potential of GPT 4.0, enabling seamless integration ...",
    "home_url": "https://rapidapi.com/mxn2020/api/mad-gpt-4-0-8k-api/",
    "name": "Mad GPT 4.0 8K API",
    "title": "Mad GPT 4.0 8K API",
    "pricing": "FREEMIUM",
    "tool_name": "Mad GPT 4.0 8K API",
    "score": {
        "avgServiceLevel": 0,
        "avgLatency": 172,
        "avgSuccessRate": 0,
        "popularityScore": 0,
        "__typename": "Score"
    },
    "host": "mad-gpt-4-0-8k-api.p.rapidapi.com",
    "api_list": [
        {
            "name": "Chat Completion with GPT-4.0 at 8K",
            "url": "https://mad-gpt-4-0-8k-api.p.rapidapi.com/chat-completion-gpt40-8k",
            "description": "Performs chat completion using OpenAI GPT-4.0 with up to 8K tokens based on user input messages",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://mad-gpt-4-0-8k-api.p.rapidapi.com/chat-completion-gpt40-8k\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"mad-gpt-4-0-8k-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://mad-gpt-4-0-8k-api.p.rapidapi.com/chat-completion-gpt40-8k\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"mad-gpt-4-0-8k-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "role": {
                                    "type": "string"
                                },
                                "content": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "role",
                                "content"
                            ]
                        }
                    }
                }
            }
        }
    ]
}