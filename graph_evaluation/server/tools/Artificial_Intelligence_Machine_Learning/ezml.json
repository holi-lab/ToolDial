{
    "product_id": "api_9adce0dc-b402-465b-85ad-27de386b1b5b",
    "tool_description": "Computer vision integration made simple.",
    "home_url": "https://rapidapi.com/ezml/api/ezml1/",
    "name": "ezML",
    "title": "ezML",
    "pricing": "FREEMIUM",
    "tool_name": "ezML",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 214,
        "avgSuccessRate": 14,
        "popularityScore": 1.9,
        "__typename": "Score"
    },
    "host": "ezml1.p.rapidapi.com",
    "api_list": [
        {
            "name": "authenticate_api_v1_auth_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/auth",
            "description": "Using your provided key and secret request an access code, the access code has a 24h TTL",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/auth\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/auth\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "sensitive_content_detection_api_v1_functions_sensitive_content_detection_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/sensitive_content_detection",
            "description": "Model specialized in detecting sensitive content (nsfw or nsfl)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/sensitive_content_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/sensitive_content_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "people_detection_api_v1_functions_people_detection_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/people_detection",
            "description": "Model specialized to detecting people from images",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/people_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/people_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "InferenceResultDetection",
                "required": [
                    "status",
                    "result"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "title": "status",
                        "type": "string",
                        "description": "Status of inference request: `success` or `error`"
                    },
                    "result": {
                        "title": "list of detections",
                        "type": "array",
                        "items": {
                            "title": "BasicInferenceResult",
                            "required": [
                                "bbox",
                                "conf",
                                "label"
                            ],
                            "type": "object",
                            "properties": {
                                "bbox": {
                                    "title": "Bbox",
                                    "maxItems": 4,
                                    "minItems": 4,
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    }
                                },
                                "conf": {
                                    "title": "confidence",
                                    "type": "number",
                                    "description": "Confidence of object detection, between 0 and 1"
                                },
                                "label": {
                                    "title": "label",
                                    "type": "string",
                                    "description": "Label of object or text detected"
                                }
                            }
                        },
                        "description": "List of detections with bbox, conf, and label"
                    }
                }
            }
        },
        {
            "name": "furniture_detection_api_v1_functions_furniture_detection_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/furniture_detection",
            "description": "Model specialized in detecting common furniture in images. Check out our [docs](https://docs.ezml.io/docs/api/functions/detection) to learn more",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/furniture_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/furniture_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "face_detection_api_v1_functions_face_detection_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/face_detection",
            "description": "Use our cutting-edge face recognition engine that also supports age and emotion prediction",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/face_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/face_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "object_detection_api_v1_functions_object_detection_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/object_detection",
            "description": "Using our proprietery [zero-shot learning](https://docs.ezml.io/docs/introduction/computer_vision/zero_shot) models we are able to detects object in an image from a given list of labels without any additional training data",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/object_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/object_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "generate_image_heavy_api_v1_functions_upscale_image_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/upscale_image",
            "description": "Upscales an image to a higher resolution and is capable of enhancing details while removing common flaws",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/upscale_image\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/upscale_image\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "tag_image_api_v1_functions_tag_image_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/tag_image",
            "description": "Creates a list of tags that are applicable to a given image",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/tag_image\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/tag_image\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "pipeline_api_v1_functions_pipeline_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/pipeline",
            "description": "Use our proprietary pipeline system to create complex functionality by combining multiple models defined by a [JSON configuration](https://docs.ezml.io/docs/api/pipeline)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/pipeline\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/pipeline\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "text_detection_api_v1_functions_ocr_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/ocr",
            "description": "Leveraging the most recent advancements in optical character recognition (OCR), our OCR model outperforms our competitors and performs multi-lingual highly accurate text detection or recognition on an image",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/ocr\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/ocr\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "Response Text Detection Api V1 Functions Ocr Post",
                "anyOf": [
                    {
                        "title": "InferenceResultDetection",
                        "required": [
                            "status",
                            "result"
                        ],
                        "type": "object",
                        "properties": {
                            "status": {
                                "title": "status",
                                "type": "string",
                                "description": "Status of inference request: `success` or `error`"
                            },
                            "result": {
                                "title": "list of detections",
                                "type": "array",
                                "items": {
                                    "title": "BasicInferenceResult",
                                    "required": [
                                        "bbox",
                                        "conf",
                                        "label"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "bbox": {
                                            "title": "Bbox",
                                            "maxItems": 4,
                                            "minItems": 4,
                                            "type": "array",
                                            "items": {
                                                "type": "number"
                                            }
                                        },
                                        "conf": {
                                            "title": "confidence",
                                            "type": "number",
                                            "description": "Confidence of object detection, between 0 and 1"
                                        },
                                        "label": {
                                            "title": "label",
                                            "type": "string",
                                            "description": "Label of object or text detected"
                                        }
                                    }
                                },
                                "description": "List of detections with bbox, conf, and label"
                            }
                        }
                    },
                    {
                        "title": "InferenceResultRecognition",
                        "required": [
                            "status",
                            "result"
                        ],
                        "type": "object",
                        "properties": {
                            "status": {
                                "title": "Request Status",
                                "type": "string",
                                "description": "Status of inference request: `success` or `error`"
                            },
                            "result": {
                                "title": "Text",
                                "type": "string",
                                "description": "Text detected in image"
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "vehicle_detection_api_v1_functions_vehicle_detection_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/vehicle_detection",
            "description": "Model specialized in detecting common vehicles in images. Check out our [docs](https://docs.ezml.io/docs/api/functions/detection) to learn more",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/vehicle_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/vehicle_detection\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "generate_image_light_api_v1_functions_generate_image_light_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/generate_image_light",
            "description": "Creates descriptive images with short prompts. This is the base model that runs faster but has less detail",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/generate_image_light\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/generate_image_light\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "ImageGenerationResult",
                "required": [
                    "status",
                    "result"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "title": "Request Status",
                        "type": "string",
                        "description": "Status of inference request: `success` or `error`"
                    },
                    "result": {
                        "title": "base64 encoded image",
                        "type": "string",
                        "description": "Base64 encoded image"
                    }
                }
            }
        },
        {
            "name": "license_plate_detection_api_v1_functions_license_plate_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/license_plate",
            "description": "Use our prebuilt function that detects and reads license plates in images",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/license_plate\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/license_plate\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "caption_image_api_v1_functions_caption_image_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/caption_image",
            "description": "Generates a human readable caption for an image using our state-of-the-art image captioning model",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/caption_image\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/caption_image\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "generate_image_heavy_api_v1_functions_generate_image_heavy_post",
            "url": "https://ezml1.p.rapidapi.com/api/v1/functions/generate_image_heavy",
            "description": "Our most powerful image generation model that generates extremely high quality images with longer prompts. This model takes longer to run but produces the best results",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/generate_image_heavy\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ezml1.p.rapidapi.com/api/v1/functions/generate_image_heavy\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ezml1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}