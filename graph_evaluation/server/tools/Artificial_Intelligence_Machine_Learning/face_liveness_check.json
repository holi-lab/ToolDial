{
    "tool_name": "Face liveness check",
    "tool_description": "Check if the selfie your users take is indeed live, optimally clicked to save in your records, if there are multiple faces detected in the image, and what percentage of the image does the face actually cover.  Face liveness detection helps you uncover frauds by ensuring that the image you have been provided isn\u2019t a picture of a picture, a passport sized image, or an image of another individual on a cell phone / laptop screen.  Pair it to the Face Compare API to have complete confidence that t...",
    "title": "Face liveness check",
    "pricing": "FREEMIUM",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 1068,
        "avgSuccessRate": 100,
        "popularityScore": 9.7,
        "__typename": "Score"
    },
    "home_url": "https://rapidapi.com/idfy-idfy-default/api/face-liveness-check/",
    "host": "face-liveness-check.p.rapidapi.com",
    "api_list": [
        {
            "name": "Face liveness check",
            "url": "https://face-liveness-check.p.rapidapi.com/v3/tasks/async/check_photo_liveness/face",
            "description": "This API compares two face images and provides a match score.\n\nUse get call on the left and pass the request id to fetch api call results.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://face-liveness-check.p.rapidapi.com/v3/tasks/async/check_photo_liveness/face\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"face-liveness-check.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "GET Call",
            "url": "https://face-liveness-check.p.rapidapi.com/v3/tasks",
            "description": "Used to fetch api result using the request id received in responses.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "request_id",
                    "type": "STRING",
                    "description": "",
                    "default": "68bbb910-da9b-4d8a-9a1d-4bd878b19846"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://face-liveness-check.p.rapidapi.com/v3/tasks\"\nquerystring = {\"request_id\": request_id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"face-liveness-check.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "Face liveness check",
            "url": "https://face-liveness-check.p.rapidapi.com/v3/tasks/async/check_photo_liveness/face",
            "description": "This API compares two face images and provides a match score.\n\nUse get call on the left and pass the request id to fetch api call results.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://face-liveness-check.p.rapidapi.com/v3/tasks/async/check_photo_liveness/face\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"face-liveness-check.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://face-liveness-check.p.rapidapi.com/v3/tasks/async/check_photo_liveness/face\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"face-liveness-check.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        }
    ]
}