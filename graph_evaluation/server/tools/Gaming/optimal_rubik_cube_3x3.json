{
    "tool_name": "Optimal Rubik Cube 3x3",
    "tool_description": "This API implements the two-phase-algorithm in its fully developed form.\nIt solves a given 3x3 Rubik Cube for optimal solution. It is also possible to find the optimal solution to solve the cube for a specific target pattern. Further the API can be used to return a random rubik cube and its solution.",
    "title": "Optimal Rubik Cube 3x3",
    "pricing": "FREEMIUM",
    "score": null,
    "home_url": "https://rapidapi.com/cb325/api/optimal-rubik-cube-3x3/",
    "host": "optimal-rubik-cube-3x3.p.rapidapi.com",
    "api_list": [
        {
            "name": "requestSolveTo",
            "url": "https://optimal-rubik-cube-3x3.p.rapidapi.com/solveto",
            "description": "Requires an input schema (see API description for rubik cube notation). Takes the rubik cube string and the number of steps as input. Returns the solution with the fewest necessary steps, however with at most the given steps.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/solveto\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "solution": "D2 B1 R1 B2 L2 F1 U3 R1 U3 D3 L1 U2 F3 U2 F1 D2 F1 L2 F2 B3"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "solution": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "requestQuickSolve",
            "url": "https://optimal-rubik-cube-3x3.p.rapidapi.com/quicksolve/{cubestring}",
            "description": "Requires an input schema (see API description for rubik cube notation).",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "cubestring",
                    "type": "STRING",
                    "description": "String of cube to solve",
                    "default": "UDBRUFLLBUDRFRFFBUDBLDFLDLULULUDDFRRRBBFLRDBFDLFUBRBUR"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/quicksolve/{cubestring}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "solution": "F1 D1 L1 U1 R2 D1 F3 B2 L3 F3 B3 R2 B2 R2 U1 R2 U3 R2 D1 B2"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "solution": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "requestSolve",
            "url": "https://optimal-rubik-cube-3x3.p.rapidapi.com/solve",
            "description": "Requires an input schema (see API description for rubik cube notation). Takes the rubik cube string and the number of steps as input. Returns the solution with the fewest necessary steps, however with at most the given steps.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/solve\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "solution": "F1 D1 L1 U1 R2 D1 F3 B2 L3 F3 B3 R2 B2 R2 U1 R2 U3 R2 D1 B2"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "solution": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "requestRandom",
            "url": "https://optimal-rubik-cube-3x3.p.rapidapi.com/random",
            "description": "You can use the response as input for the other endpoints",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/random\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "randomCube": "BUFLUFRBLBRUFRRLLDFUULFLBBBDDDRDUDUFRBUDLDRDRLFUBBFLRF",
                "solution": "D1 F2 U1 F1 U1 R2 D1 B1 L2 U3 L1 U1 B2 L2 B2 D1 R2 D3 L2 D2"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "randomCube": {
                        "type": "string"
                    },
                    "solution": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "requestSolveTo",
            "url": "https://optimal-rubik-cube-3x3.p.rapidapi.com/solveto",
            "description": "Requires an input schema (see API description for rubik cube notation). Takes the rubik cube string and the number of steps as input. Returns the solution with the fewest necessary steps, however with at most the given steps.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/solveto\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/solveto\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "solution": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "requestSolve",
            "url": "https://optimal-rubik-cube-3x3.p.rapidapi.com/solve",
            "description": "Requires an input schema (see API description for rubik cube notation). Takes the rubik cube string and the number of steps as input. Returns the solution with the fewest necessary steps, however with at most the given steps.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/solve\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://optimal-rubik-cube-3x3.p.rapidapi.com/solve\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"optimal-rubik-cube-3x3.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "solution": {
                        "type": "string"
                    }
                }
            }
        }
    ]
}