{
    "product_id": "api_08e7533b-01c5-430f-92f0-3b0340783702",
    "tool_description": "Opensea / Blur / Looksrare / x2y2  API - 1,000+  requests/min\n\nSimple & high performance Opensea / Blur / Looksrare / x2y2  API, backed by rotating proxies & API keys\n\n- Crypto Payments Available\n\n- Lifetime Unlimited Requests Licenses Available\n\n- Private Plans with 16 / 32 / 64 / 128  requests/second Available\n\n- Ready made bots written in node.js already configured to work with RapidApi Available.\n\nJoin our Discord to inquire & find out the latest information and tools: \n\nhttps://discord.g...",
    "home_url": "https://rapidapi.com/openseatools/api/opensea15/",
    "name": "Opensea_v2",
    "title": "Opensea",
    "pricing": "FREEMIUM",
    "tool_name": "Opensea_v2",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 1012,
        "avgSuccessRate": 98,
        "popularityScore": 9.9,
        "__typename": "Score"
    },
    "host": "opensea15.p.rapidapi.com",
    "api_list": [
        {
            "name": "Retrieve active loans offers",
            "url": "https://opensea15.p.rapidapi.com/v1/blend/active-liens/0xed5af388653567af2f388e6224dc7c4b3241c544",
            "description": "This endpoint is used to retrieve the active loan offer levels for a collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "collection",
                    "type": "string",
                    "description": "",
                    "default": "0xed5af388653567af2f388e6224dc7c4b3241c544"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/blend/active-liens/0xed5af388653567af2f388e6224dc7c4b3241c544\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/blend/active-liens/{collection}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve blur events",
            "url": "https://opensea15.p.rapidapi.com/v1/activity/event-filter",
            "description": "This endpoint is used to retrieve events, customisable.\n\n**Filter examples:**\n{\"count\":50,\"eventFilter\":{\"mint\":{},\"sale\":{},\"transfer\":{},\"orderCreated\":{}}}\n\n{\"count\":50,\"tokenId\":\"541\",\"contractAddress\":\"0x60e4d786628fea6478f785a6d7e704777c86a7c6\",\"eventFilter\":{\"mint\":{},\"sale\":{},\"transfer\":{},\"orderCreated\":{}}}\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "filters",
                    "type": "STRING",
                    "description": "",
                    "default": "{\"count\":50,\"tokenId\":\"541\",\"contractAddress\":\"0x60e4d786628fea6478f785a6d7e704777c86a7c6\",\"eventFilter\":{\"mint\":{},\"sale\":{},\"transfer\":{},\"orderCreated\":{}}}"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/activity/event-filter\"\nquerystring = {\"filters\": \"{\\\"count\\\":50,\\\"tokenId\\\":\\\"541\\\",\\\"contractAddress\\\":\\\"0x60e4d786628fea6478f785a6d7e704777c86a7c6\\\",\\\"eventFilter\\\":{\\\"mint\\\":{},\\\"sale\\\":{},\\\"transfer\\\":{},\\\"orderCreated\\\":{}}}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/activity/event-filter\"\nquerystring = {\"filters\": \"{\\\"count\\\":50,\\\"tokenId\\\":\\\"541\\\",\\\"contractAddress\\\":\\\"0x60e4d786628fea6478f785a6d7e704777c86a7c6\\\",\\\"eventFilter\\\":{\\\"mint\\\":{},\\\"sale\\\":{},\\\"transfer\\\":{},\\\"orderCreated\\\":{}}}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Search",
            "url": "https://opensea15.p.rapidapi.com/v1/search",
            "description": "Blur Search Query\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "query",
                    "type": "STRING",
                    "description": "",
                    "default": "doodles"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/search\"\nquerystring = {\"query\": \"doodles\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/search\"\nquerystring = {\"query\": \"doodles\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve aggregated loan offers",
            "url": "https://opensea15.p.rapidapi.com/v1/blend/aggregated-loan-offers/0x5af0d9827e0c53e4799bb226655a1de152a425a",
            "description": "This endpoint is used to retrieve the aggregated loan offer levels for a collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "collection",
                    "type": "string",
                    "description": "",
                    "default": "0x5af0d9827e0c53e4799bb226655a1de152a425a"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/blend/aggregated-loan-offers/0x5af0d9827e0c53e4799bb226655a1de152a425a\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/blend/aggregated-loan-offers/{collection}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve blur collections",
            "url": "https://opensea15.p.rapidapi.com/v1/collections/",
            "description": "This endpoint is used to retrieve information about all collection, including real time statistics such as floor price.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "filters",
                    "type": "STRING",
                    "description": "",
                    "default": "{\"sort\":\"VOLUME_ONE_DAY\",\"order\":\"DESC\"}"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/\"\nquerystring = {\"filters\": \"{\\\"sort\\\":\\\"VOLUME_ONE_DAY\\\",\\\"order\\\":\\\"DESC\\\"}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/\"\nquerystring = {\"filters\": \"{\\\"sort\\\":\\\"VOLUME_ONE_DAY\\\",\\\"order\\\":\\\"DESC\\\"}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve user collection bids",
            "url": "https://opensea15.p.rapidapi.com/v1/collection-bids/user/{walletAddress}",
            "description": "This endpoint is used to retrieve the active collection bids to a user wallet address.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "walletAddress",
                    "type": "string",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "filters",
                    "type": "STRING",
                    "description": "",
                    "default": "{}"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collection-bids/user/{walletAddress}\"\nquerystring = {\"walletAddress\": \"\", \"filters\": \"{}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collection-bids/user/{walletAddress}\"\nquerystring = {\"walletAddress\": \"\", \"filters\": \"{}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collection bids",
            "url": "https://opensea15.p.rapidapi.com/v1/collections/0x60e4d786628fea6478f785a6d7e704777c86a7c6/executable-bids",
            "description": "This endpoint is used to retrieve the collection bid price levels for a collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "collection",
                    "type": "string",
                    "description": "",
                    "default": "0x60e4d786628fea6478f785a6d7e704777c86a7c6"
                },
                {
                    "name": "filters",
                    "type": "STRING",
                    "description": "",
                    "default": "{}"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/0x60e4d786628fea6478f785a6d7e704777c86a7c6/executable-bids\"\nquerystring = {\"filters\": \"{}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/{collection}/executable-bids\"\nquerystring = {\"filters\": \"{}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collection",
            "url": "https://opensea15.p.rapidapi.com/v1/collections/0x60e4d786628fea6478f785a6d7e704777c86a7c6",
            "description": "This endpoint is used to retrieve more in-depth information about an individual collection, including real time statistics such as floor price.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "collection",
                    "type": "string",
                    "description": "Enter contract address or slug",
                    "default": "0x60e4d786628fea6478f785a6d7e704777c86a7c6"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/0x60e4d786628fea6478f785a6d7e704777c86a7c6\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/{collection}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve projects",
            "url": "https://opensea15.p.rapidapi.com/projects",
            "description": "Retrieve projects",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/projects\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/projects\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve orderbook depth",
            "url": "https://opensea15.p.rapidapi.com/collections/boredapeyachtclub/orderbook/depth",
            "description": "Retrieve orderbook depth",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "boredapeyachtclub"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/collections/boredapeyachtclub/orderbook/depth\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/collections/{slug}/orderbook/depth\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "x2y2 GET",
            "url": "https://opensea15.p.rapidapi.com/uniapi/xy3/v1/offer/list?contractAddress=0x34d85c9CDeB23FA97cb08333b511ac86E1C4E258&tokenId=28807&duration=0&page=1&pageSize=10&sort=desc&order=createdAt&isSufficient=1",
            "description": "x2y2 API endpoint (https://api.x2y2.io)\nMake over 1000 requests / minute\n\nSimply copy the path into the x2y2_path header.\n\n![](https://i.ibb.co/WKYfTDy/x2y2-path-get-header.png)",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/uniapi/xy3/v1/offer/list?contractAddress=0x34d85c9CDeB23FA97cb08333b511ac86E1C4E258&tokenId=28807&duration=0&page=1&pageSize=10&sort=desc&order=createdAt&isSufficient=1\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/uniapi/xy3/v1/offer/list?contractAddress=0x34d85c9CDeB23FA97cb08333b511ac86E1C4E258&tokenId=28807&duration=0&page=1&pageSize=10&sort=desc&order=createdAt&isSufficient=1\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve all offers",
            "url": "https://opensea15.p.rapidapi.com/v2/offers/collection/doodles-official/all",
            "description": "Get all open offers for a collection\n\nThis endpoint is used to get all open offers for a given collection. It returns: all offers on individual NFTs, all collection offers, and all trait offers. The offers are sorted by ascending date (oldest listings first) -- at this time, we do not support any other sorting methods.\n\nThe response has two fields: offers and an optional next cursor in case the number of offers is greater than our default page size (100). This endpoint returns only a subset of the fields found in our orders endpoint. Here is the model for each offer:\n\norder_hash\nchain\ncriteria: specifies if the offer was for an individual NFT, a collection offer, or a trait offer\nprotocol_data",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "doodles-official"
                }
            ],
            "optional_parameters": [
                {
                    "name": "next",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "",
                    "default": "20"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/offers/collection/doodles-official/all\"\nquerystring = {\"next\": \"\", \"limit\": \"20\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/offers/collection/{slug}/all\"\nquerystring = {\"next\": \"\", \"limit\": \"20\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve all listings",
            "url": "https://opensea15.p.rapidapi.com/v2/listings/collection/doodles-official/all",
            "description": "Get all active listings for a collection\n\nThis endpoint is used to get all active listings for a given collection. The listings are sorted by ascending date (oldest listings first) -- at this time, we do not support any other sorting methods.\n\nThe response has two fields: listings and an optional next cursor in case the number of active listings is greater than our default page size (100). This endpoint returns only a subset of the fields found in our orders endpoint. Here is the model for each listing\n\norder_hash\nchain\ntype: can be basic, english, or dutch\nprice\nprotocol_data\nSample URL\nhttps://api.opensea.io/v2/listings/collection/cool-cats-nft/all",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "doodles-official"
                }
            ],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "",
                    "default": "20"
                },
                {
                    "name": "next",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/listings/collection/doodles-official/all\"\nquerystring = {\"limit\": \"20\", \"next\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/listings/collection/{slug}/all\"\nquerystring = {\"limit\": \"20\", \"next\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve trait offers",
            "url": "https://opensea15.p.rapidapi.com/v2/offers/collection/cool-cats-nft/traits",
            "description": "This endpoint is used to get all trait offers for a specified collection.\n\nWhat are trait offers?\nA trait offer is an offer that applies to every item in a collection with the specified trait. For example, this is a filter that shows every Cool Cat NFT where the type is 'tier' and the value is 'classy_1'.\n\nBelow is a response when querying trait offers for Cool Cats where trait type is 'tier' and the value is 'classy_1'.\n\nNote: this example query might not return any data if there are no open offers for that trait.\n\nSample URL\nhttps://api.opensea.io/v2/offers/collection/cool-cats-nft/traits?type=tier&value=classy_1",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "cool-cats-nft"
                }
            ],
            "optional_parameters": [
                {
                    "name": "value",
                    "type": "STRING",
                    "description": "",
                    "default": "classy_1"
                },
                {
                    "name": "type",
                    "type": "STRING",
                    "description": "",
                    "default": "tier"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/offers/collection/cool-cats-nft/traits\"\nquerystring = {\"value\": \"classy_1\", \"type\": \"tier\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/offers/collection/{slug}/traits\"\nquerystring = {\"value\": \"classy_1\", \"type\": \"tier\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collection offers",
            "url": "https://opensea15.p.rapidapi.com/v2/offers/collection/cool-cats-nft",
            "description": "This endpoint is used to get collection offers.\n\nWhat are collection offers?\nIf you'd like to purchase into a collection but don't have a particular NFT in mind, collection offers allow you to make an offer that applies to all NFTs in a collection.\n\nBelow is a response when querying collection offers for Cool Cats.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "cool-cats-nft"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/offers/collection/cool-cats-nft\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/offers/collection/{slug}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve listings",
            "url": "https://opensea15.p.rapidapi.com/v2/orders/ethereum/seaport/listings",
            "description": "This endpoint is used to fetch the set of active listings on a given NFT for the Seaport contract.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "chain",
                    "type": "string",
                    "description": "",
                    "default": "ethereum"
                }
            ],
            "optional_parameters": [
                {
                    "name": "maker",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "order_direction",
                    "type": "STRING",
                    "description": "",
                    "default": "desc"
                },
                {
                    "name": "order_by",
                    "type": "STRING",
                    "description": "",
                    "default": "created_date"
                },
                {
                    "name": "listed_before",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "listed_after",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "taker",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "limit",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "token_ids",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "asset_contract_address",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/orders/ethereum/seaport/listings\"\nquerystring = {\"maker\": \"\", \"order_direction\": \"desc\", \"order_by\": \"created_date\", \"listed_before\": \"\", \"listed_after\": \"\", \"taker\": \"\", \"limit\": \"\", \"token_ids\": \"\", \"asset_contract_address\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/orders/{chain}/seaport/listings\"\nquerystring = {\"maker\": \"\", \"order_direction\": \"desc\", \"order_by\": \"created_date\", \"listed_before\": \"\", \"listed_after\": \"\", \"taker\": \"\", \"limit\": \"\", \"token_ids\": \"\", \"asset_contract_address\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve offers",
            "url": "https://opensea15.p.rapidapi.com/v2/orders/ethereum/seaport/offers",
            "description": "This endpoint is used to fetch the set of active offers on a given NFT for the Seaport contract.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "chain",
                    "type": "string",
                    "description": "",
                    "default": "ethereum"
                }
            ],
            "optional_parameters": [
                {
                    "name": "asset_contract_address",
                    "type": "STRING",
                    "description": "",
                    "default": "0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e"
                },
                {
                    "name": "limit",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "token_ids",
                    "type": "STRING",
                    "description": "",
                    "default": "1475"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/orders/ethereum/seaport/offers\"\nquerystring = {\"asset_contract_address\": \"0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e\", \"limit\": \"\", \"token_ids\": \"1475\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v2/orders/{chain}/seaport/offers\"\nquerystring = {\"asset_contract_address\": \"0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e\", \"limit\": \"\", \"token_ids\": \"1475\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve assets",
            "url": "https://opensea15.p.rapidapi.com/api/v1/assets",
            "description": "This endpoint returns a set of NFTs based on the specified filter parameters.\n\nAuctions created on OpenSea don't use an escrow contract, which enables gas-free auctions and allows users to retain ownership of their items while they're on sale. In these cases, some NFTs from opensea.io may not appear in the API until a transaction has been completed.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "",
                    "default": "20"
                },
                {
                    "name": "token_ids",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "asset_contract_addresses",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "collection_editor",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "include_orders",
                    "type": "BOOLEAN",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "asset_contract_address",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "order_direction",
                    "type": "STRING",
                    "description": "",
                    "default": "desc"
                },
                {
                    "name": "collection_slug",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "collection",
                    "type": "STRING",
                    "description": "",
                    "default": "ongakucraft"
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "owner",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/assets\"\nquerystring = {\"limit\": \"20\", \"token_ids\": \"\", \"asset_contract_addresses\": \"\", \"collection_editor\": \"\", \"include_orders\": \"\", \"asset_contract_address\": \"\", \"order_direction\": \"desc\", \"collection_slug\": \"\", \"collection\": \"ongakucraft\", \"cursor\": \"\", \"owner\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/assets\"\nquerystring = {\"limit\": \"20\", \"token_ids\": \"\", \"asset_contract_addresses\": \"\", \"collection_editor\": \"\", \"include_orders\": \"\", \"asset_contract_address\": \"\", \"order_direction\": \"desc\", \"collection_slug\": \"\", \"collection\": \"ongakucraft\", \"cursor\": \"\", \"owner\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collections",
            "url": "https://opensea15.p.rapidapi.com/api/v1/collections",
            "description": "This endpoint provides a list of all the collections supported and vetted by OpenSea. To include all collections relevant to a user (including non-whitelisted ones), set the owner param.\n\nEach collection in the response has an attribute called primary_asset_contracts with info about the smart contracts belonging to that collection. For example, ERC-1155 contracts maybe have multiple collections all referencing the same contract, but many ERC-721 contracts may all belong to the same collection (dapp).\n\nYou can also use this endpoint to find which dapps an account uses, and how many items they own in each in a single API call.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "asset_owner",
                    "type": "STRING",
                    "description": "",
                    "default": "0x2bf699087a0d1d67519ba86f960fecd80d59c4d7"
                },
                {
                    "name": "offset",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "",
                    "default": "20"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/collections\"\nquerystring = {\"asset_owner\": \"0x2bf699087a0d1d67519ba86f960fecd80d59c4d7\", \"offset\": \"\", \"limit\": \"20\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/collections\"\nquerystring = {\"asset_owner\": \"0x2bf699087a0d1d67519ba86f960fecd80d59c4d7\", \"offset\": \"\", \"limit\": \"20\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve an asset",
            "url": "https://opensea15.p.rapidapi.com/api/v1/asset/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb/1/",
            "description": "This endpoint is used to fetch information about a single NFT, based on its contract address and token ID. The response will contain an Asset Object.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "asset_contract_address",
                    "type": "string",
                    "description": "",
                    "default": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb"
                },
                {
                    "name": "token_id",
                    "type": "string",
                    "description": "",
                    "default": "1"
                }
            ],
            "optional_parameters": [
                {
                    "name": "include_orders",
                    "type": "BOOLEAN",
                    "description": "",
                    "default": "false"
                },
                {
                    "name": "account_address",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/asset/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb/1/\"\nquerystring = {\"include_orders\": \"false\", \"account_address\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/asset/{asset_contract_address}/{token_id}/\"\nquerystring = {\"include_orders\": \"false\", \"account_address\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collection fees",
            "url": "https://opensea15.p.rapidapi.com/v1/collections/azuki/fees",
            "description": "This endpoint returns the various collection fees\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "azuki"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/azuki/fees\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/{slug}/fees\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "ETH price",
            "url": "https://opensea15.p.rapidapi.com/v1/prices",
            "description": "Get the current ETH price, can beused to generate a new __cf_bm token to be passed in every request as a header called '__cf_bm'\n\nhttps://developers.cloudflare.com/fundamentals/get-started/reference/cloudflare-cookies/",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/prices\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/prices\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve rewards",
            "url": "https://opensea15.p.rapidapi.com/v1/collections/nakamigos/rewards",
            "description": "This endpoint is used to retrieve if bid rewards\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "nakamigos"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/nakamigos/rewards\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/{slug}/rewards\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve fees",
            "url": "https://opensea15.p.rapidapi.com/v1/fees",
            "description": "This endpoint returns the various contract fees\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "feeRequests",
                    "type": "STRING",
                    "description": "",
                    "default": "[{\"tokenId\":null,\"contractAddress\":\"0x5d62fb8dcd9b480960f55956fbdd8d9f07f2b402\"}]"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/fees\"\nquerystring = {\"feeRequests\": \"[{\\\"tokenId\\\":null,\\\"contractAddress\\\":\\\"0x5d62fb8dcd9b480960f55956fbdd8d9f07f2b402\\\"}]\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/fees\"\nquerystring = {\"feeRequests\": \"[{\\\"tokenId\\\":null,\\\"contractAddress\\\":\\\"0x5d62fb8dcd9b480960f55956fbdd8d9f07f2b402\\\"}]\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve airdrop leaderboard",
            "url": "https://opensea15.p.rapidapi.com/v1/rewards/leaderboard",
            "description": "Retrieve the current airdrop leaderboard list\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/rewards/leaderboard\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/rewards/leaderboard\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collection traits",
            "url": "https://opensea15.p.rapidapi.com/v1/traits/0x60bb1e2aa1c9acafb4d34f71585d7e959f387769",
            "description": "This endpoint is used to retrieve trait information about a single collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "contract_address",
                    "type": "string",
                    "description": "",
                    "default": "0x60bb1e2aa1c9acafb4d34f71585d7e959f387769"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/traits/0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/traits/{contract_address}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collection activity",
            "url": "https://opensea15.p.rapidapi.com/v1/activity",
            "description": "This endpoint is used to retrieve activity for an individual collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "filters",
                    "type": "STRING",
                    "description": "",
                    "default": "{\"count\":25,\"contractAddress\":\"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\"eventTypes\":[\"SALE\",\"ORDER_CREATED\"]}"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/activity\"\nquerystring = {\"filters\": \"{\\\"count\\\":25,\\\"contractAddress\\\":\\\"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\\\",\\\"eventTypes\\\":[\\\"SALE\\\",\\\"ORDER_CREATED\\\"]}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/activity\"\nquerystring = {\"filters\": \"{\\\"count\\\":25,\\\"contractAddress\\\":\\\"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\\\",\\\"eventTypes\\\":[\\\"SALE\\\",\\\"ORDER_CREATED\\\"]}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve tokens / listings",
            "url": "https://opensea15.p.rapidapi.com/v1/collections/0x60e4d786628fea6478f785a6d7e704777c86a7c6/tokens",
            "description": "This endpoint returns a set of NFTs based on the specified filter parameters.\n\nFilter for Listed Tokens: {\"cursor\":null,\"traits\":[],\"hasAsks\":true}\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "collection",
                    "type": "string",
                    "description": "Enter contract address or slug",
                    "default": "0x60e4d786628fea6478f785a6d7e704777c86a7c6"
                }
            ],
            "optional_parameters": [
                {
                    "name": "filters",
                    "type": "STRING",
                    "description": "",
                    "default": "{\"cursor\":null,\"traits\":[],\"hasAsks\":true}"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/0x60e4d786628fea6478f785a6d7e704777c86a7c6/tokens\"\nquerystring = {\"filters\": \"{\\\"cursor\\\":null,\\\"traits\\\":[],\\\"hasAsks\\\":true}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/collections/{collection}/tokens\"\nquerystring = {\"filters\": \"{\\\"cursor\\\":null,\\\"traits\\\":[],\\\"hasAsks\\\":true}\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retreive portfolio",
            "url": "https://opensea15.p.rapidapi.com/v1/portfolio/{walletAddress}/owned",
            "description": "This endpoint is used to retrieve portfolio details for a single wallet address.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "filters",
                    "type": "STRING",
                    "description": "",
                    "default": "{}"
                },
                {
                    "name": "walletAddress",
                    "type": "string",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/portfolio/{walletAddress}/owned\"\nquerystring = {\"filters\": \"{}\", \"walletAddress\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/portfolio/{walletAddress}/owned\"\nquerystring = {\"filters\": \"{}\", \"walletAddress\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve user airdrop rewards",
            "url": "https://opensea15.p.rapidapi.com/v1/user/rewards/wallet-compact",
            "description": "Retrieve user airdrop rewards\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/user/rewards/wallet-compact\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/user/rewards/wallet-compact\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve collection stats",
            "url": "https://opensea15.p.rapidapi.com/api/v1/collection/doodles-official/stats",
            "description": "This endpoint can be used to fetch stats for a specific collection, including real-time floor price data.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "collection_slug",
                    "type": "string",
                    "description": "",
                    "default": "doodles-official"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/collection/doodles-official/stats\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/collection/{collection_slug}/stats\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve owners",
            "url": "https://opensea15.p.rapidapi.com/v1/asset/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb/1/owners",
            "description": "This endpoint is used to obtain the entire list of owners for an NFT. Results will also include the quantity owned.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "asset_contract_address",
                    "type": "string",
                    "description": "",
                    "default": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb"
                },
                {
                    "name": "token_id",
                    "type": "string",
                    "description": "",
                    "default": "1"
                }
            ],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "STRING",
                    "description": "",
                    "default": "20"
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "order_by",
                    "type": "STRING",
                    "description": "",
                    "default": "created_date"
                },
                {
                    "name": "order_direction",
                    "type": "STRING",
                    "description": "",
                    "default": "desc"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/asset/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb/1/owners\"\nquerystring = {\"limit\": \"20\", \"cursor\": \"\", \"order_by\": \"created_date\", \"order_direction\": \"desc\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/v1/asset/{asset_contract_address}/{token_id}/owners\"\nquerystring = {\"limit\": \"20\", \"cursor\": \"\", \"order_by\": \"created_date\", \"order_direction\": \"desc\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve events",
            "url": "https://opensea15.p.rapidapi.com/api/v1/events",
            "description": "This endpoint provides a list of events that occur on the NFTs that are tracked by OpenSea. The event_type field indicates the type of event (transfer, successful auction, etc) and the results are sorted by event timestamp.\n\nNote that due to block reorganizations, recent events (less than 10 minutes old) may not reflect the final state of the blockchain.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account_address",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "occurred_after",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "auction_type",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "event_type",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "collection_slug",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "only_opensea",
                    "type": "BOOLEAN",
                    "description": "",
                    "default": "0"
                },
                {
                    "name": "collection_editor",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "token_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": "863"
                },
                {
                    "name": "occurred_before",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "asset_contract_address",
                    "type": "STRING",
                    "description": "",
                    "default": "0xed5af388653567af2f388e6224dc7c4b3241c544"
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/events\"\nquerystring = {\"account_address\": \"\", \"occurred_after\": \"\", \"auction_type\": \"\", \"event_type\": \"\", \"collection_slug\": \"\", \"only_opensea\": \"0\", \"collection_editor\": \"\", \"token_id\": \"863\", \"occurred_before\": \"\", \"cursor\": \"\", \"asset_contract_address\": \"0xed5af388653567af2f388e6224dc7c4b3241c544\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/events\"\nquerystring = {\"account_address\": \"\", \"occurred_after\": \"\", \"auction_type\": \"\", \"event_type\": \"\", \"collection_slug\": \"\", \"only_opensea\": \"0\", \"collection_editor\": \"\", \"token_id\": \"863\", \"occurred_before\": \"\", \"cursor\": \"\", \"asset_contract_address\": \"0xed5af388653567af2f388e6224dc7c4b3241c544\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Rarity Tools",
            "url": "https://opensea15.p.rapidapi.com/api/v0/collections/women-ape-yacht-club/artifacts/data",
            "description": "Rarity Tools Collection Items Endpoint , to  use you need to understand the source code of the webpage and reconstruct.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "women-ape-yacht-club"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v0/collections/women-ape-yacht-club/artifacts/data\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v0/collections/{slug}/artifacts/data\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "User Information",
            "url": "https://opensea15.p.rapidapi.com/Luciusl",
            "description": "Scrape all the HTML information from the NFT asset page without having to use chrome , scrape 10,000  NFTs images, & metadata in under 11min (*using top plan)",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "user",
                    "type": "string",
                    "description": "",
                    "default": "Luciusl"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/Luciusl\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/{user}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Collection Information",
            "url": "https://opensea15.p.rapidapi.com/collection/goblintownwtf",
            "description": "Scrape all the HTML information from the NFT collection page without having to use chrome.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "string",
                    "description": "",
                    "default": "goblintownwtf"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/collection/goblintownwtf\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/collection/{slug}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Asset Information",
            "url": "https://opensea15.p.rapidapi.com/assets/ethereum/0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e/3278",
            "description": "Scrape all the HTML information from the NFT asset page without having to use chrome , scrape 10,000  NFTs images, & metadata in under 11min (*using top plan)",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "contract_address",
                    "type": "string",
                    "description": "",
                    "default": "0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e"
                },
                {
                    "name": "token_id",
                    "type": "string",
                    "description": "",
                    "default": "3278"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/assets/ethereum/0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e/3278\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/assets/ethereum/{contract_address}/{token_id}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve bundles",
            "url": "https://opensea15.p.rapidapi.com/api/v1/bundles",
            "description": "Bundles are groups of NFTs for sale on OpenSea. You can buy them all at once in one transaction, and you can create them without any transactions or gas, as long as you've already approved the NFTs inside.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "on_sale",
                    "type": "BOOLEAN",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "limit",
                    "type": "STRING",
                    "description": "",
                    "default": "1"
                },
                {
                    "name": "offset",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "asset_contract_address",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "owner",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "asset_contract_addresses",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "token_ids",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/bundles\"\nquerystring = {\"on_sale\": \"\", \"limit\": \"1\", \"offset\": \"\", \"asset_contract_address\": \"\", \"owner\": \"\", \"asset_contract_addresses\": \"\", \"token_ids\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/bundles\"\nquerystring = {\"on_sale\": \"\", \"limit\": \"1\", \"offset\": \"\", \"asset_contract_address\": \"\", \"owner\": \"\", \"asset_contract_addresses\": \"\", \"token_ids\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve a collection",
            "url": "https://opensea15.p.rapidapi.com/api/v1/collection/doodles-official",
            "description": "This endpoint is used to retrieve more in-depth information about an individual collection, including real time statistics such as floor price.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "collection_slug",
                    "type": "string",
                    "description": "",
                    "default": "doodles-official"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/collection/doodles-official\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/collection/{collection_slug}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Retrieve a contract",
            "url": "https://opensea15.p.rapidapi.com/api/v1/asset_contract/0x06012c8cf97bead5deae237070f9587f8e7a266d",
            "description": "This endpoint is used to fetch detailed information about a specified contract.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "asset_contract_address",
                    "type": "string",
                    "description": "",
                    "default": "0x06012c8cf97bead5deae237070f9587f8e7a266d"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/asset_contract/0x06012c8cf97bead5deae237070f9587f8e7a266d\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://opensea15.p.rapidapi.com/api/v1/asset_contract/{asset_contract_address}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"opensea15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        }
    ],
    "standardized_name": "opensea_v2"
}