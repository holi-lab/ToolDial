{
    "product_id": "api_fa58aab8-0e4a-4e6a-9d78-d5d887b67d0c",
    "tool_description": "Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner\n\nWebsocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)",
    "home_url": "https://rapidapi.com/hartmann-it-solutions-gmbh-main/api/chain49/",
    "name": "Chain49",
    "title": "Chain49",
    "pricing": "FREEMIUM",
    "tool_name": "Chain49",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 68,
        "avgSuccessRate": 99,
        "popularityScore": 9.1,
        "__typename": "Score"
    },
    "host": "chain49.p.rapidapi.com",
    "api_list": [
        {
            "name": "Estimate transaction fee V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/estimatefee/1",
            "description": "Returns an estimated transaction fee for a specific confirmation target.\nIf you want your transaction to be included in the next block, then you give 1 as parameter. If it is not urgent, then you can wait a bit longer and get an estimation for the fifth next block.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "confirmationTarget",
                    "type": "NUMBER",
                    "description": "Number of blocks in which the transaction should be confirmed",
                    "default": 1
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [
                {
                    "name": "conservative",
                    "type": "BOOLEAN",
                    "description": "Sets fee estimation mode for Bitcoin-like coins. If set to false, fee estimate mode is ECONOMICAL, true means CONSERVATIVE mode which is the default. Has no effect on Ethereum-like coins More info: https://bitcoincore.org/en/doc/24.0.0/rpc/util/estimatesmartfee/",
                    "default": true
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/estimatefee/1\"\nquerystring = {\"conservative\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/estimatefee/{confirmationtarget}\"\nquerystring = {\"conservative\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string"
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "result": "0.00018096"
                    }
                }
            }
        },
        {
            "name": "Get NFT metadata V2",
            "url": "https://chain49.p.rapidapi.com/ethereum/v2/nft/0x05756b07725dA0101813475333f372a844789Dc2/22",
            "description": "Only works on Ethereum-like blockchains (currently ethereum and bsc)\n\nGet metadata like name or description for a specified contract and token ID.\nThe resulting data contains a link which can then be used to request the IPFS link for the actual image to display in a block explorer for example.\n\nNote: this route was implemented by us and is therefore not yet supported by existing blockbook clients.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "NFT-compatible blockchain name",
                    "default": "ethereum"
                },
                {
                    "name": "nftContract",
                    "type": "STRING",
                    "description": "Address of NFT contract",
                    "default": "0x05756b07725dA0101813475333f372a844789Dc2"
                },
                {
                    "name": "nftTokenId",
                    "type": "STRING",
                    "description": "Unique token ID of NFT",
                    "default": "22"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/ethereum/v2/nft/0x05756b07725dA0101813475333f372a844789Dc2/22\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/nft/{nftcontract}/{nfttokenid}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "tokenId": "22",
                "uri": "https://ipfs.io/ipfs/QmfARTk1r8Y5gSu3ZguKicTSVeg4J3rTLdnRz78tAREvZ4/metadata.json",
                "contractInfo": {
                    "type": "ERC721",
                    "contract": "0x05756b07725dA0101813475333f372a844789Dc2",
                    "name": "Post Photography",
                    "symbol": "POSTRUTH",
                    "decimals": 18
                }
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "tokenId": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "contractInfo": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "contract": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "symbol": {
                                "type": "string"
                            },
                            "decimals": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Get raw block data V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/rawblock/00000000000000000035835503f43c878ebb643f3b40bdfd0dfda760da74e73c",
            "description": "Returns the raw hex-encoded block data for a given block hash or height",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockHashOrHeight",
                    "type": "STRING",
                    "description": "Block hash or height",
                    "default": "00000000000000000035835503f43c878ebb643f3b40bdfd0dfda760da74e73c"
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/rawblock/00000000000000000035835503f43c878ebb643f3b40bdfd0dfda760da74e73c\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/rawblock/{blockhashorheight}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "hex": {
                        "type": "string"
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "hex": "010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e362990101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000"
                    }
                }
            }
        },
        {
            "name": "Get UTXO V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/utxo/321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL",
            "description": "Returns array of unspent transaction outputs of address or xpub, applicable only for Bitcoin-type coins. By default, the list contains both confirmed and unconfirmed transactions. The query parameter confirmed=true disables return of unconfirmed transactions. The returned utxos are sorted by block height, newest blocks first. For xpubs or output descriptors, the response also contains address and derivation path of the utxo.\n\n\n\nUnconfirmed utxos do not have field height, the field confirmations has value 0 and may contain field lockTime, if not zero.\n\nCoinbase utxos have field coinbase set to true, however due to performance reasons only up to minimum coinbase confirmations limit (100). After this limit, utxos are not detected as coinbase.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "addressOrXpub",
                    "type": "STRING",
                    "description": "Address or XPUB",
                    "default": "321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL"
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [
                {
                    "name": "confirmed",
                    "type": "BOOLEAN",
                    "description": "confirmed=true disables return of unconfirmed transactions",
                    "default": true
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/utxo/321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL\"\nquerystring = {\"confirmed\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/utxo/{addressorxpub}\"\nquerystring = {\"confirmed\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "array",
                "items": {}
            }
        },
        {
            "name": "Get address V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/address/321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL",
            "description": "Returns balances and transactions of an address. The returned transactions are sorted by block height, newest blocks first.\n\nThe **details** query parameter can specify the level of details returned by the request (default: \"txids\").\nPossible values are:\n\n**basic**: return only xpub balances, without any derived addresses and transactions\n\n**tokens**: basic + tokens (addresses) derived from the xpub, subject to tokens parameter\n\n**tokenBalances**: basic + tokens (addresses) derived from the xpub with balances, subject to tokens parameter\n\n**txids**: tokenBalances + list of txids, subject to from, to filter and paging\n\n**txs**: tokenBalances + list of transaction with details, subject to from, to filter and paging\n",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "address",
                    "type": "STRING",
                    "description": "Wallet address",
                    "default": "321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL"
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [
                {
                    "name": "details",
                    "type": "STRING",
                    "description": "specifies level of details returned by request",
                    "default": "txids"
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page.",
                    "default": 1
                },
                {
                    "name": "fromBlock",
                    "type": "NUMBER",
                    "description": "filter of the returned transactions from block height to block height (default no filter)",
                    "default": 10
                },
                {
                    "name": "secondary",
                    "type": "STRING",
                    "description": "specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values",
                    "default": "usd"
                },
                {
                    "name": "toBlock",
                    "type": "NUMBER",
                    "description": "filter of the returned transactions from block height to block height (default no filter)",
                    "default": 100
                },
                {
                    "name": "pageSize",
                    "type": "NUMBER",
                    "description": "number of transactions returned by call (default and maximum 1000)",
                    "default": 1000
                },
                {
                    "name": "contract",
                    "type": "STRING",
                    "description": "return only transactions which affect specified contract (applicable only to coins which support contracts)",
                    "default": "0xdAC17F958D2ee523a2206206994597C13D831ec7"
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/address/321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL\"\nquerystring = {\"details\": \"txids\", \"page\": 1, \"fromBlock\": 10, \"secondary\": \"usd\", \"toBlock\": 100, \"pageSize\": 1000, \"contract\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/address/{address}\"\nquerystring = {\"details\": \"txids\", \"page\": 1, \"fromBlock\": 10, \"secondary\": \"usd\", \"toBlock\": 100, \"pageSize\": 1000, \"contract\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object"
            }
        },
        {
            "name": "Get xpub V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/xpub/tpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN",
            "description": "Returns balances and transactions of an xpub or output descriptor, applicable only for Bitcoin-type coins.\n\nBlockbook supports BIP44, BIP49, BIP84 and BIP86 (Taproot) derivation schemes, using either xpubs or output descriptors (see https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)\n\nNote: usedTokens always returns total number of used addresses of xpub.\n\nDetailed documentation found here: https://github.com/trezor/blockbook/blob/master/docs/api.md#get-xpub",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                },
                {
                    "name": "xpub",
                    "type": "STRING",
                    "description": "xpub or output descriptor, applicable only for Bitcoin-type coins",
                    "default": "tpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN"
                }
            ],
            "optional_parameters": [
                {
                    "name": "pageSize",
                    "type": "NUMBER",
                    "description": "number of transactions returned by call (default and maximum 1000)",
                    "default": 1000
                },
                {
                    "name": "secondary",
                    "type": "STRING",
                    "description": "specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values",
                    "default": "usd"
                },
                {
                    "name": "toBlock",
                    "type": "NUMBER",
                    "description": "filter of the returned transactions from block height to block height (default no filter)",
                    "default": 100
                },
                {
                    "name": "fromBlock",
                    "type": "NUMBER",
                    "description": "filter of the returned transactions from block height to block height (default no filter)",
                    "default": 10
                },
                {
                    "name": "tokens",
                    "type": "STRING",
                    "description": "specifies what tokens (xpub addresses) are returned by the request (default nonzero)",
                    "default": "nonzero"
                },
                {
                    "name": "details",
                    "type": "STRING",
                    "description": "specifies level of details returned by request",
                    "default": "txids"
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page.",
                    "default": 1
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/xpub/tpubDC88gkaZi5HvJGxGDNLADkvtdpni3mLmx6vr2KnXmWMG8zfkBRggsxHVBkUpgcwPe2KKpkyvTJCdXHb1UHEWE64vczyyPQfHr1skBcsRedN\"\nquerystring = {\"pageSize\": 1000, \"secondary\": \"usd\", \"toBlock\": 100, \"fromBlock\": 10, \"tokens\": \"nonzero\", \"details\": \"txids\", \"page\": 1}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/xpub/{xpub}\"\nquerystring = {\"pageSize\": 1000, \"secondary\": \"usd\", \"toBlock\": 100, \"fromBlock\": 10, \"tokens\": \"nonzero\", \"details\": \"txids\", \"page\": 1}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer"
                    },
                    "totalPages": {
                        "type": "integer"
                    },
                    "itemsOnPage": {
                        "type": "integer"
                    },
                    "address": {
                        "type": "string"
                    },
                    "balance": {
                        "type": "string"
                    },
                    "totalReceived": {
                        "type": "string"
                    },
                    "totalSent": {
                        "type": "string"
                    },
                    "unconfirmedBalance": {
                        "type": "string"
                    },
                    "unconfirmedTxs": {
                        "type": "integer"
                    },
                    "txs": {
                        "type": "integer"
                    },
                    "txids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "usedTokens": {
                        "type": "integer"
                    },
                    "tokens": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "path": {
                                    "type": "string"
                                },
                                "transfers": {
                                    "type": "integer"
                                },
                                "decimals": {
                                    "type": "integer"
                                },
                                "balance": {
                                    "type": "string"
                                },
                                "totalReceived": {
                                    "type": "string"
                                },
                                "totalSent": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "secondaryValue": {
                        "type": "number"
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "page": 1,
                        "totalPages": 1,
                        "itemsOnPage": 1000,
                        "address": "dgub8sbe5Mi8LA4dXB9zPfLZW8arm...9Vjp2HHx91xdDEmWYpmD49fpoUYF",
                        "balance": "90000000",
                        "totalReceived": "3093381250",
                        "totalSent": "3083381250",
                        "unconfirmedBalance": "0",
                        "unconfirmedTxs": 0,
                        "txs": 5,
                        "txids": [
                            "383ccb5da16fccad294e24a2ef77bdee5810573bb1b252d8b2af4f0ac8c4e04c",
                            "75fb93d47969ac92112628e39148ad22323e96f0004c18f8c75938cffb6c1798",
                            "e8cd84f204b4a42b98e535e72f461dd9832aa081458720b0a38db5856a884876",
                            "57833d50969208091bd6c950599a1b5cf9d66d992ae8a8d3560fb943b98ebb23",
                            "9cfd6295f20e74ddca6dd816c8eb71a91e4da70fe396aca6f8ce09dc2947839f"
                        ],
                        "usedTokens": 2,
                        "tokens": [
                            {
                                "type": "XPUBAddress",
                                "name": "DUCd1B3YBiXL5By15yXgSLZtEkvwsgEdqS",
                                "path": "m/44'/3'/0'/0/0",
                                "transfers": 3,
                                "decimals": 8,
                                "balance": "90000000",
                                "totalReceived": "2903986975",
                                "totalSent": "2803986975"
                            },
                            {
                                "type": "XPUBAddress",
                                "name": "DKu2a8Wo6zC2dmBBYXwUG3fxWDHbKnNiPj",
                                "path": "m/44'/3'/0'/1/0",
                                "transfers": 2,
                                "decimals": 8,
                                "balance": "0",
                                "totalReceived": "279394275",
                                "totalSent": "279394275"
                            }
                        ],
                        "secondaryValue": 21195.47633568
                    }
                }
            }
        },
        {
            "name": "Get Balance History V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/balancehistory/321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL",
            "description": "Returns a balance history for the specified XPUB or address\n\nThe value of sentToSelf is the amount sent from the same address to the same address or within addresses of xpub.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "addressOrXpub",
                    "type": "STRING",
                    "description": "Address or XPUB",
                    "default": "321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL"
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [
                {
                    "name": "groupBy",
                    "type": "NUMBER",
                    "description": "an interval in seconds, to group results by. Default is 3600 seconds",
                    "default": 3600
                },
                {
                    "name": "fiatcurrency",
                    "type": "STRING",
                    "description": "if specified, the response will contain secondary (fiat) rate at the time of transaction. If not, all available currencies will be returned",
                    "default": "usd"
                },
                {
                    "name": "fromDate",
                    "type": "STRING",
                    "description": "specifies a start date as a Unix timestamp",
                    "default": "1578391200"
                },
                {
                    "name": "toDate",
                    "type": "STRING",
                    "description": "specifies an end date as a Unix timestamp",
                    "default": "1599053802"
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/balancehistory/321x69Cb9HZLWwAWGiUBT1U81r1zPLnEjL\"\nquerystring = {\"groupBy\": 3600, \"fiatcurrency\": \"usd\", \"fromDate\": \"1578391200\", \"toDate\": \"1599053802\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/balancehistory/{addressorxpub}\"\nquerystring = {\"groupBy\": 3600, \"fiatcurrency\": \"usd\", \"fromDate\": \"1578391200\", \"toDate\": \"1599053802\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "array",
                "x-examples": {
                    "Example 1": [
                        {
                            "time": 1578391200,
                            "txs": 5,
                            "received": "5000000",
                            "sent": "0",
                            "sentToSelf": "100000",
                            "rates": {
                                "usd": 7855.9,
                                "eur": 6838.13,
                                "...": 1234
                            }
                        },
                        {
                            "time": 1578488400,
                            "txs": 1,
                            "received": "0",
                            "sent": "5000000",
                            "sentToSelf": "0",
                            "rates": {
                                "usd": 8283.11,
                                "eur": 7464.45,
                                "...": 1234
                            }
                        }
                    ]
                },
                "items": {
                    "type": "object",
                    "properties": {
                        "time": {
                            "type": "integer"
                        },
                        "txs": {
                            "type": "integer"
                        },
                        "received": {
                            "type": "string"
                        },
                        "sent": {
                            "type": "string"
                        },
                        "sentToSelf": {
                            "type": "string"
                        },
                        "rates": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "Get Tickers V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/tickers",
            "description": "Returns currency rate for the specified currency and date. If the currency is not available for that specific timestamp, the next closest rate will be returned. All responses contain an actual rate timestamp.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [
                {
                    "name": "timestamp",
                    "type": "STRING",
                    "description": "specifies a Unix timestamp to (/tickers-list) return available tickers for or (/tickers) that specifies a date to return currency rates for. If not specified, the last available rate will be returned.",
                    "default": "1519053802"
                },
                {
                    "name": "currency",
                    "type": "STRING",
                    "description": "specifies a currency of returned rate (\"usd\", \"eur\", \"eth\"...). If not specified, all available currencies will be returned",
                    "default": "usd"
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/tickers\"\nquerystring = {\"timestamp\": \"1519053802\", \"currency\": \"usd\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/tickers\"\nquerystring = {\"timestamp\": \"1519053802\", \"currency\": \"usd\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "x-examples": {
                    "Example 1": {
                        "ts": 1574346615,
                        "rates": {
                            "eur": 7134.1,
                            "usd": 7914.5
                        }
                    }
                },
                "properties": {
                    "ts": {
                        "type": "integer"
                    },
                    "rates": {
                        "type": "object"
                    }
                }
            }
        },
        {
            "name": "Get block hash V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/block-index/15",
            "description": "Get block hash by its height\n\nNote: Blockbook always follows the main chain of the backend it is attached to.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockHeight",
                    "type": "NUMBER",
                    "description": "Block height/index",
                    "default": 15
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/block-index/15\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/block-index/{blockheight}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "blockHash": {
                        "type": "string"
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "blockHash": "ed8f3af8c10ca70a136901c6dd3adf037f0aea8a93fbe9e80939214034300f1e"
                    }
                }
            }
        },
        {
            "name": "Blockchain Info Summary",
            "url": "https://chain49.p.rapidapi.com/bitcoin",
            "description": "Get basic summary of info relating to the currently selected blockchain",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "blockbook": {
                        "type": "object",
                        "properties": {
                            "coin": {
                                "type": "string"
                            },
                            "host": {
                                "type": "string"
                            },
                            "version": {
                                "type": "string"
                            },
                            "gitCommit": {
                                "type": "string"
                            },
                            "buildTime": {
                                "type": "string"
                            },
                            "syncMode": {
                                "type": "boolean"
                            },
                            "initialSync": {
                                "type": "boolean"
                            },
                            "inSync": {
                                "type": "boolean"
                            },
                            "bestHeight": {
                                "type": "integer"
                            },
                            "lastBlockTime": {
                                "type": "string"
                            },
                            "inSyncMempool": {
                                "type": "boolean"
                            },
                            "lastMempoolTime": {
                                "type": "string"
                            },
                            "mempoolSize": {
                                "type": "integer"
                            },
                            "decimals": {
                                "type": "integer"
                            },
                            "dbSize": {
                                "type": "integer"
                            },
                            "hasFiatRates": {
                                "type": "boolean"
                            },
                            "currentFiatRatesTime": {
                                "type": "string"
                            },
                            "historicalFiatRatesTime": {
                                "type": "string"
                            },
                            "about": {
                                "type": "string"
                            }
                        }
                    },
                    "backend": {
                        "type": "object",
                        "properties": {
                            "chain": {
                                "type": "string"
                            },
                            "blocks": {
                                "type": "integer"
                            },
                            "headers": {
                                "type": "integer"
                            },
                            "bestBlockHash": {
                                "type": "string"
                            },
                            "difficulty": {
                                "type": "string"
                            },
                            "sizeOnDisk": {
                                "type": "integer"
                            },
                            "version": {
                                "type": "string"
                            },
                            "subversion": {
                                "type": "string"
                            },
                            "protocolVersion": {
                                "type": "string"
                            }
                        }
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "blockbook": {
                            "coin": "Bitcoin",
                            "host": "s4",
                            "version": "0.4.0",
                            "gitCommit": "83fe6672",
                            "buildTime": "2023-02-27T02:40:48+00:00",
                            "syncMode": true,
                            "initialSync": false,
                            "inSync": true,
                            "bestHeight": 784299,
                            "lastBlockTime": "2023-04-07T02:55:40.032567054Z",
                            "inSyncMempool": true,
                            "lastMempoolTime": "2023-04-07T03:04:36.260327616Z",
                            "mempoolSize": 30785,
                            "decimals": 8,
                            "dbSize": 399834379691,
                            "hasFiatRates": true,
                            "currentFiatRatesTime": "2023-04-07T03:00:04.080770962Z",
                            "historicalFiatRatesTime": "2023-04-07T00:00:00Z",
                            "about": "Blockbook blockchain indexer for https://chain49.com/ - based on trezor/blockbook"
                        },
                        "backend": {
                            "chain": "main",
                            "blocks": 784299,
                            "headers": 784299,
                            "bestBlockHash": "00000000000000000000df1072b381603f20d3e6877cf4689c743e90d2dde719",
                            "difficulty": "47887764338536.25",
                            "sizeOnDisk": 534828732178,
                            "version": "240001",
                            "subversion": "/Satoshi:24.0.1/",
                            "protocolVersion": "70016"
                        }
                    }
                }
            }
        },
        {
            "name": "List available blockchains",
            "url": "https://chain49.p.rapidapi.com/",
            "description": "Get an array of active blockchains",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "x-examples": {
                    "Example 1": [
                        "bitcoin",
                        "bitcoin-testnet",
                        "bitcoin-signet",
                        "bcash",
                        "bcash-testnet",
                        "litecoin-testnet",
                        "litecoin",
                        "zcash",
                        "zcash-testnet",
                        "dogecoin",
                        "dogecoin-testnet",
                        "ethereum"
                    ]
                }
            }
        },
        {
            "name": "Get Block V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/block/00000000000000000035835503f43c878ebb643f3b40bdfd0dfda760da74e73c",
            "description": "Returns information about block with transactions, subject to paging.\n\nNote: Blockbook always follows the main chain of the backend it is attached to. If there is a rollback-reorg in the backend, Blockbook will also do rollback. When you ask for block by height, you will always get the main chain block. If you ask for block by hash, you may get the block from another fork but it is not guaranteed (backend may not keep it)",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                },
                {
                    "name": "blockHashOrHeight",
                    "type": "STRING",
                    "description": "Block hash or height",
                    "default": "00000000000000000035835503f43c878ebb643f3b40bdfd0dfda760da74e73c"
                }
            ],
            "optional_parameters": [
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page.",
                    "default": 1
                },
                {
                    "name": "pageSize",
                    "type": "NUMBER",
                    "description": "number of transactions returned by call (default and maximum 1000)",
                    "default": 1000
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/block/00000000000000000035835503f43c878ebb643f3b40bdfd0dfda760da74e73c\"\nquerystring = {\"page\": 1, \"pageSize\": 1000}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/block/{blockhashorheight}\"\nquerystring = {\"page\": 1, \"pageSize\": 1000}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer"
                    },
                    "totalPages": {
                        "type": "integer"
                    },
                    "itemsOnPage": {
                        "type": "integer"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "previousBlockHash": {
                        "type": "string"
                    },
                    "nextBlockHash": {
                        "type": "string"
                    },
                    "height": {
                        "type": "integer"
                    },
                    "confirmations": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "time": {
                        "type": "integer"
                    },
                    "version": {
                        "type": "integer"
                    },
                    "merkleRoot": {
                        "type": "string"
                    },
                    "nonce": {
                        "type": "string"
                    },
                    "bits": {
                        "type": "string"
                    },
                    "difficulty": {
                        "type": "string"
                    },
                    "txCount": {
                        "type": "integer"
                    },
                    "txs": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "txid": {
                                    "type": "string"
                                },
                                "vin": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "n": {
                                                "type": "integer"
                                            },
                                            "isAddress": {
                                                "type": "boolean"
                                            },
                                            "value": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "vout": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "value": {
                                                "type": "string"
                                            },
                                            "n": {
                                                "type": "integer"
                                            },
                                            "addresses": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "isAddress": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                },
                                "blockHash": {
                                    "type": "string"
                                },
                                "blockHeight": {
                                    "type": "integer"
                                },
                                "confirmations": {
                                    "type": "integer"
                                },
                                "blockTime": {
                                    "type": "integer"
                                },
                                "value": {
                                    "type": "string"
                                },
                                "valueIn": {
                                    "type": "string"
                                },
                                "fees": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "page": 1,
                        "totalPages": 1,
                        "itemsOnPage": 1000,
                        "hash": "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048",
                        "previousBlockHash": "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
                        "nextBlockHash": "000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd",
                        "height": 1,
                        "confirmations": 784303,
                        "size": 215,
                        "time": 1231469665,
                        "version": 1,
                        "merkleRoot": "0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098",
                        "nonce": "2573394689",
                        "bits": "1d00ffff",
                        "difficulty": "1",
                        "txCount": 1,
                        "txs": [
                            {
                                "txid": "0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098",
                                "vin": [
                                    {
                                        "n": 0,
                                        "isAddress": false,
                                        "value": "0"
                                    }
                                ],
                                "vout": [
                                    {
                                        "value": "5000000000",
                                        "n": 0,
                                        "addresses": [
                                            "12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX"
                                        ],
                                        "isAddress": true
                                    }
                                ],
                                "blockHash": "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048",
                                "blockHeight": 1,
                                "confirmations": 784303,
                                "blockTime": 1231469665,
                                "value": "5000000000",
                                "valueIn": "0",
                                "fees": "0"
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "Get Mempool V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/mempool",
            "description": "Get a list of transaction IDs currently in the mempool of the node (meaning unconfirmed transactions not included in any block yet)\n\nNote: this route was implemented by us and is therefore not yet supported by existing blockbook clients.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [
                {
                    "name": "pageSize",
                    "type": "NUMBER",
                    "description": "number of transactions returned by call (default and maximum 1000)",
                    "default": 1000
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page.",
                    "default": 1
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/mempool\"\nquerystring = {\"pageSize\": 1000, \"page\": 1}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/mempool\"\nquerystring = {\"pageSize\": 1000, \"page\": 1}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer"
                    },
                    "totalPages": {
                        "type": "integer"
                    },
                    "itemsOnPage": {
                        "type": "integer"
                    },
                    "mempool": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "time": {
                                    "type": "integer"
                                },
                                "txid": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "mempoolSize": {
                        "type": "integer"
                    }
                }
            }
        },
        {
            "name": "Get transaction (as is from Backend) V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/tx-specific/cd8ec77174e426070d0a50779232bba7312b712e2c6843d82d963d7076c61366",
            "description": "Returns transaction data in the exact format as returned by backend, including all coin specific fields",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "txId",
                    "type": "STRING",
                    "description": "Transaction ID",
                    "default": "cd8ec77174e426070d0a50779232bba7312b712e2c6843d82d963d7076c61366"
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/tx-specific/cd8ec77174e426070d0a50779232bba7312b712e2c6843d82d963d7076c61366\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/tx-specific/{txid}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object"
            }
        },
        {
            "name": "Get transaction V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/tx/cd8ec77174e426070d0a50779232bba7312b712e2c6843d82d963d7076c61366",
            "description": "Get transaction returns \"normalized\" data about transaction, which has the same general structure for all supported coins. It does not return coin specific fields (for example information about Zcash shielded addresses).\n\nA note about the blockTime field:\nfor already mined transaction (confirmations > 0), the field blockTime contains time of the block\nfor transactions in mempool (confirmations == 0), the field contains time when the running instance of Blockbook was first time notified about the transaction. This time may be different in different instances of Blockbook.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                },
                {
                    "name": "txId",
                    "type": "STRING",
                    "description": "Transaction ID",
                    "default": "cd8ec77174e426070d0a50779232bba7312b712e2c6843d82d963d7076c61366"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/tx/cd8ec77174e426070d0a50779232bba7312b712e2c6843d82d963d7076c61366\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/tx/{txid}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "txid": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    },
                    "vin": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "txid": {
                                    "type": "string"
                                },
                                "vout": {
                                    "type": "integer"
                                },
                                "sequence": {
                                    "type": "integer"
                                },
                                "n": {
                                    "type": "integer"
                                },
                                "addresses": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "isAddress": {
                                    "type": "boolean"
                                },
                                "value": {
                                    "type": "string"
                                },
                                "hex": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "vout": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                },
                                "n": {
                                    "type": "integer"
                                },
                                "hex": {
                                    "type": "string"
                                },
                                "addresses": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "isAddress": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "blockHash": {
                        "type": "string"
                    },
                    "blockHeight": {
                        "type": "integer"
                    },
                    "confirmations": {
                        "type": "integer"
                    },
                    "blockTime": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "vsize": {
                        "type": "integer"
                    },
                    "value": {
                        "type": "string"
                    },
                    "valueIn": {
                        "type": "string"
                    },
                    "fees": {
                        "type": "string"
                    },
                    "hex": {
                        "type": "string"
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "txid": "9e2bc8fbd40af17a6564831f84aef0cab2046d4bad19e91c09d21bff2c851851",
                        "version": 1,
                        "vin": [
                            {
                                "txid": "f124e6999bf67e710b9e8a8ac4dbb08a64aa9c264120cf98793455e36a531615",
                                "vout": 2,
                                "sequence": 4294967295,
                                "n": 0,
                                "addresses": [
                                    "DDhUv8JZGmSxKYV95NLnbRTUKni9cDZD3S"
                                ],
                                "isAddress": true,
                                "value": "55795108999999",
                                "hex": "473...2c7ec77bb982"
                            }
                        ],
                        "vout": [
                            {
                                "value": "55585679000000",
                                "n": 0,
                                "hex": "76a914feaca9d9fa7120c7c587c00c639bb18d40faadd388ac",
                                "addresses": [
                                    "DUMh1rPrXTrCN2Z9EHsLPg7b78rACHB2h7"
                                ],
                                "isAddress": true
                            },
                            {
                                "value": "209329999999",
                                "n": 1,
                                "hex": "76a914ea8984be785868391d92f49c14933f47c152ea0a88ac",
                                "addresses": [
                                    "DSXDQ6rnwLX47WFRnemctoXPHA9pLMxqXn"
                                ],
                                "isAddress": true
                            }
                        ],
                        "blockHash": "78d1f3de899a10dd2e580704226ebf9508e95e1706f177fc9c31c47f245d2502",
                        "blockHeight": 2647927,
                        "confirmations": 1,
                        "blockTime": 1553088212,
                        "size": 234,
                        "vsize": 153,
                        "value": "55795008999999",
                        "valueIn": "55795108999999",
                        "fees": "100000000",
                        "hex": "0100000...0011000"
                    }
                }
            }
        },
        {
            "name": "Send transaction (in URL) V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/sendtx/01000000017f9a22c9cbf54bd902400df746f138f37bcf5b4d93eb755820e974ba43ed5f42040000006a4730440220037f4ed5427cde81d55b9b6a2fd08c8a25090c2c2fff3a75c1a57625ca8a7118022076c702fe55969fa08137f71afd4851c48e31082dd3c40c919c92cdbc826758d30121029f6da5623c9f9b68a9baf9c1bc7511df88fa34c6c2f71f7c62f2f03ff48dca80feffffff019c9700000000000017a9146144d57c8aff48492c9dfb914e120b20bad72d6f8773d00700",
            "description": "Sends new transaction to backend\n\nIt is recommended to use POST for sending transactions as there is a limit on how much data can be sent in the URL itself.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "hex",
                    "type": "STRING",
                    "description": "Transaction hex data",
                    "default": "01000000017f9a22c9cbf54bd902400df746f138f37bcf5b4d93eb755820e974ba43ed5f42040000006a4730440220037f4ed5427cde81d55b9b6a2fd08c8a25090c2c2fff3a75c1a57625ca8a7118022076c702fe55969fa08137f71afd4851c48e31082dd3c40c919c92cdbc826758d30121029f6da5623c9f9b68a9baf9c1bc7511df88fa34c6c2f71f7c62f2f03ff48dca80feffffff019c9700000000000017a9146144d57c8aff48492c9dfb914e120b20bad72d6f8773d00700"
                },
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/sendtx/01000000017f9a22c9cbf54bd902400df746f138f37bcf5b4d93eb755820e974ba43ed5f42040000006a4730440220037f4ed5427cde81d55b9b6a2fd08c8a25090c2c2fff3a75c1a57625ca8a7118022076c702fe55969fa08137f71afd4851c48e31082dd3c40c919c92cdbc826758d30121029f6da5623c9f9b68a9baf9c1bc7511df88fa34c6c2f71f7c62f2f03ff48dca80feffffff019c9700000000000017a9146144d57c8aff48492c9dfb914e120b20bad72d6f8773d00700\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/sendtx/{hex}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string"
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "result": "7c3be24063f268aaa1ed81b64776798f56088757641a34fb156c4f51ed2e9d25"
                    }
                }
            }
        },
        {
            "name": "Get Tickers list V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/tickers-list",
            "description": "Returns a list of available currency rate tickers (secondary currencies) for the specified date, along with an actual data timestamp.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [
                {
                    "name": "timestamp",
                    "type": "STRING",
                    "description": "specifies a Unix timestamp to (/tickers-list) return available tickers for or (/tickers) that specifies a date to return currency rates for. If not specified, the last available rate will be returned.",
                    "default": "1519053802"
                }
            ],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/tickers-list\"\nquerystring = {\"timestamp\": \"1519053802\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/tickers-list\"\nquerystring = {\"timestamp\": \"1519053802\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "ts": {
                        "type": "integer"
                    },
                    "available_currencies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "ts": 1574346615,
                        "available_currencies": [
                            "eur",
                            "usd"
                        ]
                    }
                }
            }
        },
        {
            "name": "JSON-RPC over HTTP",
            "url": "https://chain49.p.rapidapi.com/bitcoin/rpc/getblock/000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506",
            "description": "All JSON-RPC methods are also available as normal HTTP GET routes if you specify a method (and optional parameters) in the URL.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                },
                {
                    "name": "rpcParams",
                    "type": "STRING",
                    "description": "Optional: Parameters delimited by \"/\"",
                    "default": "000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506"
                },
                {
                    "name": "rpcMethod",
                    "type": "STRING",
                    "description": "Method to execute on node",
                    "default": "getblock"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/rpc/getblock/000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/rpc/{rpcmethod}/{rpcparams}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "You have exceeded the rate limit per second for your plan, BASIC, by the API provider"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "x-examples": {
                    "Example 1": {
                        "result": {
                            "hash": "000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506",
                            "confirmations": 690937,
                            "height": 100000,
                            "version": 1,
                            "versionHex": "00000001",
                            "merkleroot": "f3e94742aca4b5ef85488dc37c06c3282295ffec960994b2c0d5ac2a25a95766",
                            "time": 1293623863,
                            "mediantime": 1293622620,
                            "nonce": 274148111,
                            "bits": "1b04864c",
                            "difficulty": 14484.1623612254,
                            "chainwork": "0000000000000000000000000000000000000000000000000644cb7f5234089e",
                            "nTx": 4,
                            "previousblockhash": "000000000002d01c1fccc21636b607dfd930d31d01c3a62104612a1719011250",
                            "nextblockhash": "00000000000080b66c911bd5ba14a74260057311eaeb1982802f7010f1a9f090",
                            "strippedsize": 957,
                            "size": 957,
                            "weight": 3828,
                            "tx": [
                                "8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87",
                                "fff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c4",
                                "6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4",
                                "e9a66845e05d5abc0ad04ec80f774a7e585c6e8db975962d069a522137b80c1d"
                            ]
                        },
                        "error": null,
                        "id": "chain49.com"
                    }
                },
                "properties": {
                    "result": {
                        "type": "object",
                        "x-stoplight": {
                            "id": "uf0d0z9pnx2a8"
                        }
                    },
                    "error": {
                        "type": [
                            "object",
                            "null"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "Send transaction (POST) V2",
            "url": "https://chain49.p.rapidapi.com/bitcoin/v2/sendtx",
            "description": "Sends new transaction to backend for broadcasting\n",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/v2/sendtx\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/v2/sendtx\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string"
                    }
                },
                "x-examples": {
                    "Example 1": {
                        "result": "7c3be24063f268aaa1ed81b64776798f56088757641a34fb156c4f51ed2e9d25"
                    }
                }
            }
        },
        {
            "name": "JSON-RPC Endpoint",
            "url": "https://chain49.p.rapidapi.com/bitcoin/rpc",
            "description": "Universal JSON-RPC endpoint for all available blockchains.\nCan also be accessed via rpc.chain49.com/{blockchain}\n\nThis endpoint is compatible with wallets like MetaMask or CLI software such as bitcoin-cli\n\nFor detailed documentation of each method, check out the official JSON-RPC spec for your coin:<br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum & BNB Smart Chain</a><br>\n<a href=\"https://developer.bitcoin.org/reference/rpc/index.html\">Bitcoin, Litecoin, Dogecoin etc</a><br>\n<a href=\"https://zcash-rpc.github.io/\">Zcash</a><br>\n\n### Available methods for Bitcoin-like coins (Bitcoin, Litecoin, Dogecoin etc)\n| Blockchain | Raw Transactions | Mining & Util |\n| ---------- | ---------------- | ---- |\n| [getblock](https://developer.bitcoin.org/reference/rpc/getblock.html) | [analyzepsbt](https://developer.bitcoin.org/reference/rpc/analyzepsbt.html) | [createmultisig](https://developer.bitcoin.org/reference/rpc/createmultisig.html)\n| [getblockchaininfo](https://developer.bitcoin.org/reference/rpc/getblockchaininfo.html) |  [combinepsbt](https://developer.bitcoin.org/reference/rpc/combinepsbt.html) | [deriveaddresses](https://developer.bitcoin.org/reference/rpc/deriveaddresses.html) \n| [getblockcount](https://developer.bitcoin.org/reference/rpc/getblockcount.html) |  [combinerawtransaction](https://developer.bitcoin.org/reference/rpc/combinerawtransaction.html) | [estimatesmartfee](https://developer.bitcoin.org/reference/rpc/estimatesmartfee.html) \n| [getblockfilter](https://developer.bitcoin.org/reference/rpc/getblockfilter.html) |   [createpsbt](https://developer.bitcoin.org/reference/rpc/createpsbt.html) | [getdescriptorinfo](https://developer.bitcoin.org/reference/rpc/getdescriptorinfo.html) \n| [getblockhash](https://developer.bitcoin.org/reference/rpc/getblockhash.html) |   [createrawtransaction](https://developer.bitcoin.org/reference/rpc/createrawtransaction.html) | [getindexinfo](https://developer.bitcoin.org/reference/rpc/getindexinfo.html) \n| [getblockheader](https://developer.bitcoin.org/reference/rpc/getblockheader.html) |   [decodepsbt](https://developer.bitcoin.org/reference/rpc/decodepsbt.html) | [signmessagewithprivkey](https://developer.bitcoin.org/reference/rpc/signmessagewithprivkey.html)\n| [getblockstats](https://developer.bitcoin.org/reference/rpc/getblockstats.html) |   [decoderawtransaction](https://developer.bitcoin.org/reference/rpc/decoderawtransaction.html) | [validateaddress](https://developer.bitcoin.org/reference/rpc/validateaddress.html)\n| [getchaintips](https://developer.bitcoin.org/reference/rpc/getchaintips.html) |   [decodescript](https://developer.bitcoin.org/reference/rpc/decodescript.html) | [verifymessage](https://developer.bitcoin.org/reference/rpc/verifymessage.html)\n| [getchaintxstats](https://developer.bitcoin.org/reference/rpc/getchaintxstats.html) |   [finalizepsbt](https://developer.bitcoin.org/reference/rpc/finalizepsbt.html) |   [getblocktemplate](https://developer.bitcoin.org/reference/rpc/getblocktemplate.html) \n| [getbestblockhash](https://developer.bitcoin.org/reference/rpc/getbestblockhash.html) |   [fundrawtransaction](https://developer.bitcoin.org/reference/rpc/fundrawtransaction.html)|   [getmininginfo](https://developer.bitcoin.org/reference/rpc/getmininginfo.html)\n| [getdifficulty](https://developer.bitcoin.org/reference/rpc/getdifficulty.html)  |   [getrawtransaction](https://developer.bitcoin.org/reference/rpc/getrawtransaction.html)|   [getnetworkhashps](https://developer.bitcoin.org/reference/rpc/getnetworkhashps.html)\n| [getmempoolancestors](https://developer.bitcoin.org/reference/rpc/getmempoolancestors.html)    | [joinpsbts](https://developer.bitcoin.org/reference/rpc/joinpsbts.html) |   [help](https://developer.bitcoin.org/reference/rpc/help.html)\n| [getmempooldescendants](https://developer.bitcoin.org/reference/rpc/getmempooldescendants.html) |   [sendrawtransaction](https://developer.bitcoin.org/reference/rpc/sendrawtransaction.html)| [z_validateaddress](https://zcash-rpc.github.io/z_validateaddress.html) Zcash only\n| [getmempoolentry](https://developer.bitcoin.org/reference/rpc/getmempoolentry.html)  |   [signrawtransactionwithkey](https://developer.bitcoin.org/reference/rpc/signrawtransactionwithkey.html)\n| [getmempoolinfo](https://developer.bitcoin.org/reference/rpc/getmempoolinfo.html)  |   [testmempoolaccept](https://developer.bitcoin.org/reference/rpc/testmempoolaccept.html)\n| [getrawmempool](https://developer.bitcoin.org/reference/rpc/getrawmempool.html)  |   [utxoupdatepsbt](https://developer.bitcoin.org/reference/rpc/utxoupdatepsbt.html)\n| [gettxout](https://developer.bitcoin.org/reference/rpc/gettxout.html)  |   [getfinalizedblockhash](https://developer.bitcoin.org/reference/rpc/getfinalizedblockhash.html)\n| [gettxoutproof](https://developer.bitcoin.org/reference/rpc/gettxoutproof.html)  |   [converttopsbt](https://developer.bitcoin.org/reference/rpc/converttopsbt.html)\n| [z_gettreestate](https://zcash-rpc.github.io/z_gettreestate.html) Zcash only | | \n\nFor Ethereum-like coins (Ethereum and BNB Smart Chain):<br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#web3_clientversion\">web3_clientVersion</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#web3_sha3\">web3_sha3</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#net_version\">net_version</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#net_listening\">net_listening</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_syncing\">eth_syncing</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_mining\">eth_mining</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice\">eth_gasPrice</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber\">eth_blockNumber</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid\">eth_chainId</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance\">eth_getBalance</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat\">eth_getStorageAt</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount\">eth_getTransactionCount</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash\">eth_getBlockTransactionCountByHash</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber\">eth_getBlockTransactionCountByNumber</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getunclecountbyblockhash\">eth_getUncleCountByBlockHash</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getunclecountbyblocknumber\">eth_getUncleCountByBlockNumber</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode\">eth_getCode</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction\">eth_sendRawTransaction</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call\">eth_call</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas\">eth_estimateGas</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash\">eth_getBlockByHash</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber\">eth_getBlockByNumber</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash\">eth_getTransactionByHash</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyblockhashandindex\">eth_getTransactionByBlockHashAndIndex</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyblocknumberandindex\">eth_getTransactionByBlockNumberAndIndex</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt\">eth_getTransactionReceipt</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getunclebyblockhashandindex\">eth_getUncleByBlockHashAndIndex</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getunclebyblocknumberandindex\">eth_getUncleByBlockNumberAndIndex</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getwork\">eth_getWork</a><br>\n<a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getproof\">eth_getProof</a><br>",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "blockchain",
                    "type": "STRING",
                    "description": "Blockchain name",
                    "default": "bitcoin"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/bitcoin/rpc\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://chain49.p.rapidapi.com/{blockchain}/rpc\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"chain49.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "get": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array"
                    },
                    "errors": {
                        "type": "array"
                    },
                    "results": {
                        "type": "integer"
                    },
                    "response": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    ],
    "standardized_name": "chain49"
}