{
    "product_id": "api_6a583be3-a701-4423-ac7f-1f0dd7345c59",
    "tool_description": "Lexicala API is a REST interface offering access to dictionary and lexical data from our monolingual, bilingual, multilingual and learner\u2019s dictionaries in JSON format.",
    "home_url": "https://rapidapi.com/kdictionaries/api/lexicala1/",
    "name": "Lexicala",
    "title": "Lexicala",
    "pricing": "FREEMIUM",
    "tool_name": "Lexicala",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 188,
        "avgSuccessRate": 100,
        "popularityScore": 9.8,
        "__typename": "Score"
    },
    "host": "lexicala1.p.rapidapi.com",
    "api_list": [
        {
            "name": "SearchEntries",
            "url": "https://lexicala1.p.rapidapi.com/search-entries",
            "description": "search for entries with filters in query",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "sample",
                    "type": "NUMBER",
                    "description": "Number of randomly-sampled results to return",
                    "default": ""
                },
                {
                    "name": "source",
                    "type": "STRING",
                    "description": "The resource to search within. The default value is 'global', i.e. the Global series",
                    "default": ""
                },
                {
                    "name": "language",
                    "type": "STRING",
                    "description": "The language code of the entry\u2019s language. For an extensive list of language codes, see GET /languages",
                    "default": ""
                },
                {
                    "name": "analyzed",
                    "type": "BOOLEAN",
                    "description": "Whether to search using the language analyzer or to get exact matches only. The default value is 'false'",
                    "default": ""
                },
                {
                    "name": "subcategorization",
                    "type": "STRING",
                    "description": "The subcategorization (e.g. countable, transitive, \u2026) to search for",
                    "default": ""
                },
                {
                    "name": "polysemous",
                    "type": "BOOLEAN",
                    "description": "Whether to only return polysemous entries",
                    "default": ""
                },
                {
                    "name": "pos",
                    "type": "STRING",
                    "description": "The part of speech (POS) to search for",
                    "default": ""
                },
                {
                    "name": "gender",
                    "type": "STRING",
                    "description": "The grammatical gender to search for",
                    "default": ""
                },
                {
                    "name": "monosemous",
                    "type": "BOOLEAN",
                    "description": "Whether to only return monosemous entries",
                    "default": ""
                },
                {
                    "name": "morph",
                    "type": "BOOLEAN",
                    "description": "Whether to search in headword inflections if exist. The default value is 'false'",
                    "default": ""
                },
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "The headword text to search for",
                    "default": ""
                },
                {
                    "name": "number",
                    "type": "STRING",
                    "description": "The grammatical number to search for",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "Page number of results to return (1-indexed). The default value is 1",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/search-entries\"\nquerystring = {\"sample\": \"\", \"source\": \"\", \"language\": \"\", \"analyzed\": \"\", \"subcategorization\": \"\", \"polysemous\": \"\", \"pos\": \"\", \"gender\": \"\", \"monosemous\": \"\", \"morph\": \"\", \"text\": \"\", \"number\": \"\", \"page\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/search-entries\"\nquerystring = {\"sample\": \"\", \"source\": \"\", \"language\": \"\", \"analyzed\": \"\", \"subcategorization\": \"\", \"polysemous\": \"\", \"pos\": \"\", \"gender\": \"\", \"monosemous\": \"\", \"morph\": \"\", \"text\": \"\", \"number\": \"\", \"page\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "Validation errors",
                "errors": [
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "ENUM_MISMATCH",
                                "params": [
                                    ""
                                ],
                                "message": "No enum match for: ",
                                "path": [],
                                "description": "The resource to search within"
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (source): Value failed JSON Schema validation",
                        "name": "source",
                        "path": [
                            "paths",
                            "/search-entries",
                            "get",
                            "parameters",
                            "0"
                        ]
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (morph): Expected type boolean but found type string",
                        "name": "morph",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (monosemous): Expected type boolean but found type string",
                        "name": "monosemous",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (polysemous): Expected type boolean but found type string",
                        "name": "polysemous",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type integer but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (sample): Expected type integer but found type string",
                        "name": "sample",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type integer but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (page): Expected type integer but found type string",
                        "name": "page",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (analyzed): Expected type boolean but found type string",
                        "name": "analyzed",
                        "path": []
                    }
                ]
            }
        },
        {
            "name": "Test",
            "url": "https://lexicala1.p.rapidapi.com/test",
            "description": "test that the API is running",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/test\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/test\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "API is up"
            }
        },
        {
            "name": "Languages",
            "url": "https://lexicala1.p.rapidapi.com/languages",
            "description": "all supported languages and codes",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/languages\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/languages\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "language_names": {
                    "af": "Afrikaans",
                    "ar": "Arabic",
                    "az": "Azeri",
                    "bg": "Bulgarian",
                    "br": "Brazilian Portuguese",
                    "ca": "Catalan",
                    "cs": "Czech",
                    "da": "Canadian French",
                    "de": "German",
                    "dk": "Danish",
                    "el": "Greek",
                    "en": "English",
                    "es": "Spanish",
                    "et": "Estonian",
                    "fa": "Farsi",
                    "fi": "Finnish",
                    "fr": "French",
                    "fy": "Frisian",
                    "he": "Hebrew",
                    "hi": "Hindi",
                    "hr": "Croatian",
                    "hu": "Hungarian",
                    "id": "Indonesian",
                    "is": "Icelandic",
                    "it": "Italian",
                    "ja": "Japanese",
                    "ko": "Korean",
                    "la": "Latin",
                    "lt": "Lithuanian",
                    "lv": "Latvian",
                    "ml": "Malay",
                    "nl": "Dutch",
                    "no": "Norwegian",
                    "pl": "Polish",
                    "prs": "Dari",
                    "ps": "Pashto",
                    "pt": "Portuguese",
                    "ro": "Romanian",
                    "ru": "Russian",
                    "sk": "Slovak",
                    "sl": "Slovenian",
                    "sr": "Serbian",
                    "sv": "Swedish",
                    "th": "Thai",
                    "tr": "Turkish",
                    "tw": "Traditional Chinese",
                    "uk": "Ukrainian",
                    "ur": "Urdu",
                    "vi": "Vietnamese",
                    "zh": "Simplified Chinese"
                },
                "resources": {
                    "global": {
                        "source_languages": [
                            "ar",
                            "br",
                            "cs",
                            "de",
                            "dk",
                            "el",
                            "en",
                            "es",
                            "fr",
                            "he",
                            "hi",
                            "it",
                            "ja",
                            "ko",
                            "la",
                            "nl",
                            "no",
                            "pl",
                            "pt",
                            "ru",
                            "sv",
                            "th",
                            "tr",
                            "tw",
                            "zh"
                        ],
                        "target_languages": [
                            "ar",
                            "br",
                            "da",
                            "de",
                            "dk",
                            "el",
                            "en",
                            "es",
                            "fr",
                            "he",
                            "it",
                            "ja",
                            "ko",
                            "nl",
                            "no",
                            "pl",
                            "pt",
                            "ru",
                            "sv",
                            "tr",
                            "zh"
                        ]
                    },
                    "password": {
                        "source_languages": [
                            "en"
                        ],
                        "target_languages": [
                            "af",
                            "ar",
                            "az",
                            "bg",
                            "br",
                            "ca",
                            "cs",
                            "de",
                            "dk",
                            "el",
                            "es",
                            "et",
                            "fa",
                            "fi",
                            "fr",
                            "fy",
                            "he",
                            "hi",
                            "hr",
                            "hu",
                            "id",
                            "is",
                            "it",
                            "ja",
                            "ko",
                            "lt",
                            "lv",
                            "ml",
                            "nl",
                            "no",
                            "pl",
                            "prs",
                            "ps",
                            "pt",
                            "ro",
                            "ru",
                            "sk",
                            "sl",
                            "sr",
                            "sv",
                            "th",
                            "tr",
                            "tw",
                            "uk",
                            "ur",
                            "vi",
                            "zh"
                        ]
                    },
                    "random": {
                        "source_languages": [
                            "en"
                        ],
                        "target_languages": [
                            "br"
                        ]
                    }
                }
            }
        },
        {
            "name": "Senses",
            "url": "https://lexicala1.p.rapidapi.com/senses/{sense_id}",
            "description": "get specific sense by its unique ID",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "sense_id",
                    "type": "string",
                    "description": "The sense ID of the sense",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/senses/{sense_id}\"\nquerystring = {\"sense_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/senses/{sense_id}\"\nquerystring = {\"sense_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "status": 200,
                "message": "ID number is not valid"
            }
        },
        {
            "name": "Entries",
            "url": "https://lexicala1.p.rapidapi.com/entries/{entry_id}",
            "description": "get specific entry by its unique ID",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "entry_id",
                    "type": "string",
                    "description": "The entry ID of the entry",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/entries/{entry_id}\"\nquerystring = {\"entry_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/entries/{entry_id}\"\nquerystring = {\"entry_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "status": 200,
                "message": "ID number is not valid"
            }
        },
        {
            "name": "Search",
            "url": "https://lexicala1.p.rapidapi.com/search",
            "description": "search for entries with filters in query",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "The headword text to search for",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "NUMBER",
                    "description": "Page number of results to return (1-indexed). The default value is 1",
                    "default": ""
                },
                {
                    "name": "number",
                    "type": "STRING",
                    "description": "The grammatical number to search for",
                    "default": ""
                },
                {
                    "name": "monosemous",
                    "type": "BOOLEAN",
                    "description": "Whether to only return monosemous entries",
                    "default": ""
                },
                {
                    "name": "language",
                    "type": "STRING",
                    "description": "The language code of the entry\u2019s language. For an extensive list of language codes, see GET /languages",
                    "default": ""
                },
                {
                    "name": "analyzed",
                    "type": "BOOLEAN",
                    "description": "Whether to search using the language analyzer or to get exact matches only. The default value is 'false'",
                    "default": ""
                },
                {
                    "name": "sample",
                    "type": "NUMBER",
                    "description": "Number of randomly-sampled results to return",
                    "default": ""
                },
                {
                    "name": "pos",
                    "type": "STRING",
                    "description": "The part of speech (POS) to search for",
                    "default": ""
                },
                {
                    "name": "subcategorization",
                    "type": "STRING",
                    "description": "The subcategorization (e.g. countable, transitive, \u2026) to search for",
                    "default": ""
                },
                {
                    "name": "morph",
                    "type": "BOOLEAN",
                    "description": "Whether to search in headword inflections if exist. The default value is 'false'",
                    "default": ""
                },
                {
                    "name": "source",
                    "type": "STRING",
                    "description": "The resource to search within. The default value is 'global', i.e. the Global series",
                    "default": ""
                },
                {
                    "name": "gender",
                    "type": "STRING",
                    "description": "The grammatical gender to search for",
                    "default": ""
                },
                {
                    "name": "polysemous",
                    "type": "BOOLEAN",
                    "description": "Whether to only return polysemous entries",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/search\"\nquerystring = {\"text\": \"\", \"page\": \"\", \"number\": \"\", \"monosemous\": \"\", \"language\": \"\", \"analyzed\": \"\", \"sample\": \"\", \"pos\": \"\", \"subcategorization\": \"\", \"morph\": \"\", \"source\": \"\", \"gender\": \"\", \"polysemous\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://lexicala1.p.rapidapi.com/search\"\nquerystring = {\"text\": \"\", \"page\": \"\", \"number\": \"\", \"monosemous\": \"\", \"language\": \"\", \"analyzed\": \"\", \"sample\": \"\", \"pos\": \"\", \"subcategorization\": \"\", \"morph\": \"\", \"source\": \"\", \"gender\": \"\", \"polysemous\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lexicala1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "Validation errors",
                "errors": [
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "ENUM_MISMATCH",
                                "params": [
                                    ""
                                ],
                                "message": "No enum match for: ",
                                "path": [],
                                "description": "The resource to search within"
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (source): Value failed JSON Schema validation",
                        "name": "source",
                        "path": [
                            "paths",
                            "/search",
                            "get",
                            "parameters",
                            "0"
                        ]
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (morph): Expected type boolean but found type string",
                        "name": "morph",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (monosemous): Expected type boolean but found type string",
                        "name": "monosemous",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (polysemous): Expected type boolean but found type string",
                        "name": "polysemous",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type integer but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (sample): Expected type integer but found type string",
                        "name": "sample",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type integer but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (page): Expected type integer but found type string",
                        "name": "page",
                        "path": []
                    },
                    {
                        "code": "INVALID_REQUEST_PARAMETER",
                        "errors": [
                            {
                                "code": "INVALID_TYPE",
                                "message": "Expected type boolean but found type string",
                                "path": []
                            }
                        ],
                        "in": "query",
                        "message": "Invalid parameter (analyzed): Expected type boolean but found type string",
                        "name": "analyzed",
                        "path": []
                    }
                ]
            }
        }
    ],
    "standardized_name": "lexicala"
}