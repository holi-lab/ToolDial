{
    "product_id": "api_b522c7bc-0f2e-477c-9cec-c48f1539248c",
    "tool_description": "Step-Based asynchronous business workflow API, for asynchronous processing and event-driven architectures",
    "home_url": "https://rapidapi.com/indiemob-indiemob-default/api/business-workflow-runner1/",
    "name": "Business Workflow Runner",
    "title": "Business Workflow Runner",
    "pricing": "FREEMIUM",
    "tool_name": "Business Workflow Runner",
    "score": {
        "avgServiceLevel": 60,
        "avgLatency": 512,
        "avgSuccessRate": 60,
        "popularityScore": 8.3,
        "__typename": "Score"
    },
    "host": "business-workflow-runner1.p.rapidapi.com",
    "api_list": [
        {
            "name": "flow_definition_post",
            "url": "https://business-workflow-runner1.p.rapidapi.com/flow/definition",
            "description": "Create a new flow definition",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://business-workflow-runner1.p.rapidapi.com/flow/definition\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"business-workflow-runner1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://business-workflow-runner1.p.rapidapi.com/flow/definition\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"business-workflow-runner1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "flow_submit_post",
            "url": "https://business-workflow-runner1.p.rapidapi.com/flow/submit",
            "description": "Submits a flow execution, this starts the whole flow process by calling the declared steps and\nperforms the desired operations as originally designed\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://business-workflow-runner1.p.rapidapi.com/flow/submit\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"business-workflow-runner1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://business-workflow-runner1.p.rapidapi.com/flow/submit\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"business-workflow-runner1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "allOf": [
                    {
                        "description": "A simple response representation",
                        "properties": {
                            "data": {
                                "description": "Schema that represents any serializable data",
                                "oneOf": [
                                    {
                                        "description": "**Omitted**"
                                    },
                                    {
                                        "description": "**Omitted**"
                                    },
                                    {
                                        "description": "**Omitted**"
                                    },
                                    {
                                        "description": "**Omitted**"
                                    }
                                ]
                            },
                            "exit_code": {
                                "description": "The response exit code returned from the server, it can be:\n* success: The request worked as expected\n* validation_error: The request contains an user input related error\n* unauthorized: Invalid credentials\n* generic_error: The request contains a generic error\n* service_down: The backend server is down\n* flow_disabled: The requested flow is currently marked as disabled\n* service_plan_max_registered_flows_reached: The maximum number of registered flows has been reached, this error also applies when trying to submit a flow after downgrading a plan\n* service_plan_max_steps_per_flow_reached: The maximum number of steps per flow has been exceeded, this error also applies when trying to submit a flow after downgrading a plan\n",
                                "enum": [
                                    "success",
                                    "validation_error",
                                    "unauthorized",
                                    "generic_error",
                                    "service_unavailable",
                                    "resource_not_found",
                                    "step_already_executed",
                                    "flow_disabled",
                                    "service_plan_max_registered_flows_reached",
                                    "service_plan_max_steps_per_flow_reached"
                                ],
                                "type": "string"
                            },
                            "status": {
                                "description": "The response status returned from the server, it can be:\n* success: The request worked as expected\n* error: The request returned an error\n",
                                "enum": [
                                    "success",
                                    "error"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "description": "The response of the flow submission request",
                        "properties": {
                            "data": {
                                "description": "The information about the flow that will get submitted",
                                "properties": {
                                    "data": {
                                        "additionalProperties": true,
                                        "description": "Any additional data we want to send (size is limited to 1kb)\n\n**WARNING: Avoid passing any sensitive data since its contents get stored**\n",
                                        "type": "object"
                                    },
                                    "flow_id": {
                                        "description": "The flow subject identifier",
                                        "type": "string"
                                    },
                                    "flow_name": {
                                        "description": "The name of the flow we want to run",
                                        "type": "string"
                                    },
                                    "step_name": {
                                        "description": "The name of the flow step we want to run",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "flow_name",
                                    "flow_id",
                                    "step_name"
                                ],
                                "type": "object"
                            },
                            "request_id": {
                                "description": "The generated request id",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            }
        },
        {
            "name": "dead_letter_id_post",
            "url": "https://business-workflow-runner1.p.rapidapi.com/dead_letter/{id}",
            "description": "Re-attempts to run the given step from the dead letter.\n\nNOTE: This will count as a submission request\n",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "The dead letter record id",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://business-workflow-runner1.p.rapidapi.com/dead_letter/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"business-workflow-runner1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://business-workflow-runner1.p.rapidapi.com/dead_letter/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"business-workflow-runner1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "allOf": [
                    {
                        "description": "A simple response representation",
                        "properties": {
                            "data": {
                                "description": "Schema that represents any serializable data",
                                "oneOf": [
                                    {
                                        "description": "**Omitted**"
                                    },
                                    {
                                        "description": "**Omitted**"
                                    },
                                    {
                                        "description": "**Omitted**"
                                    },
                                    {
                                        "description": "**Omitted**"
                                    }
                                ]
                            },
                            "exit_code": {
                                "description": "The response exit code returned from the server, it can be:\n* success: The request worked as expected\n* validation_error: The request contains an user input related error\n* unauthorized: Invalid credentials\n* generic_error: The request contains a generic error\n* service_down: The backend server is down\n* flow_disabled: The requested flow is currently marked as disabled\n* service_plan_max_registered_flows_reached: The maximum number of registered flows has been reached, this error also applies when trying to submit a flow after downgrading a plan\n* service_plan_max_steps_per_flow_reached: The maximum number of steps per flow has been exceeded, this error also applies when trying to submit a flow after downgrading a plan\n",
                                "enum": [
                                    "success",
                                    "validation_error",
                                    "unauthorized",
                                    "generic_error",
                                    "service_unavailable",
                                    "resource_not_found",
                                    "step_already_executed",
                                    "flow_disabled",
                                    "service_plan_max_registered_flows_reached",
                                    "service_plan_max_steps_per_flow_reached"
                                ],
                                "type": "string"
                            },
                            "status": {
                                "description": "The response status returned from the server, it can be:\n* success: The request worked as expected\n* error: The request returned an error\n",
                                "enum": [
                                    "success",
                                    "error"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "description": "The record set of registered flows",
                        "properties": {
                            "data": {
                                "description": "Overall view of a failed step execution that ended up in dead letter",
                                "properties": {
                                    "additional_info": {
                                        "additionalProperties": true,
                                        "description": "Additional information",
                                        "type": "object"
                                    },
                                    "context": {
                                        "description": "Contains information about the context of the step execution",
                                        "properties": {
                                            "dependencies_context": {
                                                "description": "**Omitted**"
                                            },
                                            "flow_id": {
                                                "description": "**Omitted**"
                                            },
                                            "flow_name": {
                                                "description": "**Omitted**"
                                            },
                                            "request_id": {
                                                "description": "**Omitted**"
                                            },
                                            "step_name": {
                                                "description": "**Omitted**"
                                            },
                                            "triggered_by": {
                                                "description": "**Omitted**"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "error": {
                                        "description": "Information about the issue that caused this step to end up in dead letter",
                                        "type": "string"
                                    },
                                    "id": {
                                        "description": "The dead letter record identifier",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                ]
            }
        }
    ]
}