{
    "product_id": "552a4af7e4b0c8d11c9fde2d",
    "tool_description": "bracketPy can help you build innovative applications which can leverage the power of natural language processing and machine learning. It enables you to retrieve information from web and build predictive models, topic models and recommendation engines.",
    "home_url": "https://rapidapi.com/bracketPy/api/bracketpy/",
    "name": "bracketPy",
    "title": "bracketPy",
    "pricing": "FREEMIUM",
    "tool_name": "bracketPy",
    "score": null,
    "host": "bracketpy.p.rapidapi.com",
    "api_list": [
        {
            "name": "Fetch Urls",
            "url": "https://bracketpy.p.rapidapi.com/fetchUrls",
            "description": "This API returns all the urls from a webpage. It is quite useful in information retrieval and finding similar content on web while designing crawlers and page rank analysis.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/fetchUrls\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/fetchUrls\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "concept extraction",
            "url": "https://bracketpy.p.rapidapi.com/conceptExtraction",
            "description": "This API extract the concepts in the content and link them to their corresponding Dbpedia or wikipedia link.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/conceptExtraction\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/conceptExtraction\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "YouTube Context",
            "url": "https://bracketpy.p.rapidapi.com/getYouTubeContext",
            "description": "This API provides the information about the  You Tube video. It fetches the context of the video from description and comments and then provide information about the topics associated with the url.  Without going into video analysis detail user can easily get the information about the context of the video.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getYouTubeContext\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getYouTubeContext\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Language",
            "url": "https://bracketpy.p.rapidapi.com/getLanguage",
            "description": "This API identifies language of the content. Currently we are able to identify 33 languages.  A score representing the closeness with the language is also provided.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getLanguage\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getLanguage\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "sentiment",
            "url": "https://bracketpy.p.rapidapi.com/getSentiment",
            "description": "This API returns the sentiment score of the data provided. Data can be either text or just url.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getSentiment\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getSentiment\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "document matching",
            "url": "https://bracketpy.p.rapidapi.com/docSimilarity",
            "description": "This API provides a similarity score between two documents. These two documents can be either text or urls. The score is calculated based on conceptual information provided in the documents. It is not a syntactical matching. The score is fuzzy match score.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/docSimilarity\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/docSimilarity\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "sentence matching",
            "url": "https://bracketpy.p.rapidapi.com/sentenceSimilarity",
            "description": "This API takes a target sentence and match it with a list of other sentences. It also works on semantical/ conceptual matching.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/sentenceSimilarity\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/sentenceSimilarity\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Categorization",
            "url": "https://bracketpy.p.rapidapi.com/getTopics",
            "description": "This API categorizes given url/text into predefined set of categories based on it's content. We have 10 broad level categories--'home', 'arts', 'games', 'health', 'society', 'computers', 'business', 'recreation', 'sports', \u2018science\u2019.  Each of these 10 categories have sub-categorization, if you call the API with these categories.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getTopics\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getTopics\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Hashtag Suggestion",
            "url": "https://bracketpy.p.rapidapi.com/hashTags",
            "description": "This API generates few Hashtags which can post with the content while posting at social media, It also provide few topics which are helpful in creating your own hashtags. So user does not have to go through the content, It suggest which keywords are important and can be helpful in creating hashtags.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/hashTags\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/hashTags\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Word Similarity Index",
            "url": "https://bracketpy.p.rapidapi.com/similarityIndex",
            "description": "This API gives similarity between two phrases. This similarity indicates that these two words have been coming together and share same context.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/similarityIndex\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/similarityIndex\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Image recognition",
            "url": "https://bracketpy.p.rapidapi.com/imgclass",
            "description": "This API will try to identify the image given to it. It is a trained model which can identify the object in an image with state of the art accuracy, together with prediction it also provide the wordnet 3.0 Ids of the objects.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/imgclass\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/imgclass\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Tone",
            "url": "https://bracketpy.p.rapidapi.com/getTone",
            "description": "This API will identify tone of the text.  Tone of a text content can be Corporate or  Personal  which depend on the words and writing style of the author.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getTone\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getTone\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Summary",
            "url": "https://bracketpy.p.rapidapi.com/summary",
            "description": "This API creates a summary from the provided content, a content can be a url or text and even a pdf link as well.  It successfully avoids the links, supporting text and ads. It also take as input the count of sentences user wants in a summary.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/summary\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/summary\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "similar phrases",
            "url": "https://bracketpy.p.rapidapi.com/similarPhrases",
            "description": "This API takes a query string and return all the similar phrases related to that query. The similar phrases are phrases which have occurred with the query on web in past",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/similarPhrases\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/similarPhrases\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Mood",
            "url": "https://bracketpy.p.rapidapi.com/getMood",
            "description": "This API provides the mood  of the writer/author .",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getMood\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/getMood\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Classification Model",
            "url": "https://bracketpy.p.rapidapi.com/classify",
            "description": "It's a machine learning model which trains on the data provided by the user. Our model learns from the provided categories and predicts the category of the un-categorized text. Our classification is based on semantics and conceptual information extracted from the text/ url.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/classify\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/classify\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Named Entities",
            "url": "https://bracketpy.p.rapidapi.com/nerTag",
            "description": "This API extract all the named entities in the data. It can identify \u2018PERSON\u2019, \u2018LOCATION\u2019,  and \u2018 ORGANIZATION' with a confidence score.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/nerTag\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://bracketpy.p.rapidapi.com/nerTag\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"bracketpy.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}