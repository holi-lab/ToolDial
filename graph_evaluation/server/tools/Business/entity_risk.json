{
    "tool_name": "Entity Risk",
    "tool_description": "The Entity Risk API accesses our risk intelligence data.",
    "title": "Entity Risk",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 879,
        "avgSuccessRate": 9,
        "popularityScore": 0.1,
        "__typename": "Score"
    },
    "home_url": "https://rapidapi.com/sigma-ratings-sigma-ratings-default/api/entity-risk/",
    "host": "entity-risk.p.rapidapi.com",
    "api_list": [
        {
            "name": "Risk Scoring",
            "url": "https://entity-risk.p.rapidapi.com/v1/risk",
            "description": "The Risk Scoring endpoint returns a Sigma Risk score for a given search term.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "q",
                    "type": "STRING",
                    "description": "",
                    "default": "Gazprom"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://entity-risk.p.rapidapi.com/v1/risk\"\nquerystring = {\"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"entity-risk.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "key1": "value",
                "key2": "value"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "Audit",
            "url": "https://entity-risk.p.rapidapi.com/v1/audit/{id}",
            "description": "This endpoint retrieves individual audit records. An audit record represents the request and response that was submitted using Sigma's API and it is used for traceability.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "",
                    "default": "e723887d-4e3b-42ee-820c-339602aaa72c"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://entity-risk.p.rapidapi.com/v1/audit/{id}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"entity-risk.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "Indicator Categories",
            "url": "https://entity-risk.p.rapidapi.com/v1/indicators",
            "description": "List the available Sigma indicator categories to filter by.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://entity-risk.p.rapidapi.com/v1/indicators\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"entity-risk.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "Sources",
            "url": "https://entity-risk.p.rapidapi.com/v1/sources",
            "description": "Lists the available Sigma Sources to search on. Sigma Sources are specific integrations which Sigma has constructed to impose structure to its various datasets. Use the name field as value to filter sources on.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://entity-risk.p.rapidapi.com/v1/sources\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"entity-risk.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "Account Status",
            "url": "https://entity-risk.p.rapidapi.com/v1/account_status",
            "description": "Check the status of this account (api key)",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://entity-risk.p.rapidapi.com/v1/account_status\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"entity-risk.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "Risk Scoring",
            "url": "https://entity-risk.p.rapidapi.com/v1/risk",
            "description": "The Risk Scoring endpoint returns a Sigma Risk score for a given search term.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "q",
                    "type": "STRING",
                    "description": "",
                    "default": "Gazprom"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://entity-risk.p.rapidapi.com/v1/risk\"\nquerystring = {\"q\": \"Gazprom\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"entity-risk.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://entity-risk.p.rapidapi.com/v1/risk\"\nquerystring = {\"q\": \"Gazprom\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"entity-risk.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        }
    ]
}