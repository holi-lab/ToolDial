{
    "product_id": "53aa31dde4b07e1f4ebe9993",
    "tool_description": "Markdownifier",
    "home_url": "https://rapidapi.com/thefosk/api/heck-yes-markdown/",
    "name": "Heck Yes Markdown",
    "title": "Heck Yes Markdown",
    "pricing": "FREE",
    "tool_name": "Heck Yes Markdown",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 442,
        "avgSuccessRate": 100,
        "popularityScore": 5.9,
        "__typename": "Score"
    },
    "host": "thefosk-heck-yes-markdown.p.rapidapi.com",
    "api_list": [
        {
            "name": "Get Markdown",
            "url": "https://thefosk-heck-yes-markdown.p.rapidapi.com/go/",
            "description": "Enter a url or some HTML code to convert the page to Markdown. One parameter between \"u\" and \"html\" must be submitted with the request.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "domarkdown",
                    "type": "STRING",
                    "description": "(any value will run this) used without the other parameters (including u), and takes a text parameter containing url-encoded Markdown text. It returns raw HTML",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "STRING",
                    "description": "HTML text to be Markdownified. May be a full page or snippet, and can be submitted as urlencoded text in a GET call or straight using POST (suggested for larger requests).",
                    "default": ""
                },
                {
                    "name": "output",
                    "type": "STRING",
                    "description": "(optional, default markdown) type of text to return (json*, url (encoded), or markdown). There's also an 'nv' output mode that will generate a Notational Velocity/nvALT url for creating a note from resulting text. If you need the 'nvalt://' handler for older versions, use 'nvalt' for the output mode instead. Might be useful for some people.",
                    "default": ""
                },
                {
                    "name": "preview",
                    "type": "BOOLEAN",
                    "description": "(optional, default 0) whether to run the result back through Markdown and provide HTML instead of Markdown",
                    "default": ""
                },
                {
                    "name": "showframe",
                    "type": "BOOLEAN",
                    "description": "determines whether or not the output is encased in the HTML frame for viewing/copying",
                    "default": ""
                },
                {
                    "name": "tags",
                    "type": "STRING",
                    "description": "(optional) if the output type is \"nv\" or \"nvalt\", adding this key with a url-encoded string of space or comma separated tags will include them when importing into NV/nvALT",
                    "default": ""
                },
                {
                    "name": "u",
                    "type": "STRING",
                    "description": "url encoded URI to parse",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://thefosk-heck-yes-markdown.p.rapidapi.com/go/\"\nquerystring = {\"domarkdown\": \"\", \"html\": \"\", \"output\": \"\", \"preview\": \"\", \"showframe\": \"\", \"tags\": \"\", \"u\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"thefosk-heck-yes-markdown.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://thefosk-heck-yes-markdown.p.rapidapi.com/go/\"\nquerystring = {\"domarkdown\": \"\", \"html\": \"\", \"output\": \"\", \"preview\": \"\", \"showframe\": \"\", \"tags\": \"\", \"u\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"thefosk-heck-yes-markdown.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ],
    "standardized_name": "heck_yes_markdown"
}