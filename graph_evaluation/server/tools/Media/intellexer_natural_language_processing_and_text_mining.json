{
    "product_id": "5924259be4b0f633a5a6e444",
    "tool_description": "Intellexer API includes natural language processing solutions for sentiment analysis, named entity recognition, summarization, keywords extraction, document comparison, file conversion, natural language interface for search engines, language detection, spell-checking, article and concepts extraction,  etc.",
    "home_url": "https://rapidapi.com/IntellexerSupport/api/intellexer-natural-language-processing-and-text-mining/",
    "name": "Intellexer Natural Language Processing and Text Mining",
    "title": "Intellexer Natural Language Processing and Text Mining",
    "pricing": "FREEMIUM",
    "tool_name": "Intellexer Natural Language Processing and Text Mining",
    "score": null,
    "host": "intellexer.p.rapidapi.com",
    "api_list": [
        {
            "name": "Spelling Correction",
            "url": "https://intellexer.p.rapidapi.com/checkTextSpelling",
            "description": "Perform text spell check.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "errorTune",
                    "type": "NUMBER",
                    "description": "Adjust \u2018errorBound\u2019 to the length of words according to the expert bound values. There are 3 possible modes:  Reduce(1) \u2013 choose the smaller value between the expert value and the bound set by the user;  Equal(2) \u2013 choose the bound set by the user;  Raise(3) \u2013 choose the bigger value between the expert value and the bound set by the user.",
                    "default": "2"
                },
                {
                    "name": "errorBound",
                    "type": "NUMBER",
                    "description": "Manually set maximum number of corrections for a single word regardless of its length.",
                    "default": "3"
                },
                {
                    "name": "minProbabilityWeight",
                    "type": "NUMBER",
                    "description": "Set minimum probability for the words to be included to the list of candidates.",
                    "default": "40"
                },
                {
                    "name": "separatelines",
                    "type": "BOOLEAN",
                    "description": "Process each line independently.",
                    "default": true
                },
                {
                    "name": "minprobabilitytune",
                    "type": "NUMBER",
                    "description": "Adjust \u2018minProbabilityWeight\u2019 to the length of words according to the expert probability values. Modes are similar to \u2018errorTune\u2019.",
                    "default": "2"
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/checkTextSpelling\"\nquerystring = {\"errorTune\": \"2\", \"errorBound\": \"3\", \"minProbabilityWeight\": \"40\", \"separatelines\": true, \"minprobabilitytune\": \"2\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/checkTextSpelling\"\nquerystring = {\"errorTune\": \"2\", \"errorBound\": \"3\", \"minProbabilityWeight\": \"40\", \"separatelines\": true, \"minprobabilitytune\": \"2\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Summarization of texts",
            "url": "https://intellexer.p.rapidapi.com/summarizeText?loadConceptsTree=True&loadNamedEntityTree=True&summaryRestriction=10&usePercentRestriction=True&conceptsRestriction=True&structure=General&returnedTopicsCount=3&fullTextTrees=True&textStreamLength=1033",
            "description": "Return summary data for a text.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "summaryrestriction",
                    "type": "NUMBER",
                    "description": "Determine size of a summary measured in sentences.",
                    "default": "10"
                }
            ],
            "optional_parameters": [
                {
                    "name": "conceptsrestriction",
                    "type": "BOOLEAN",
                    "description": "Determine the length of a concept tree.",
                    "default": true
                },
                {
                    "name": "fulltexttrees",
                    "type": "BOOLEAN",
                    "description": "Load full text trees.",
                    "default": true
                },
                {
                    "name": "loadconceptstree",
                    "type": "BOOLEAN",
                    "description": "Load a tree of concepts (FALSE by default).",
                    "default": true
                },
                {
                    "name": "loadnamedentitytree",
                    "type": "BOOLEAN",
                    "description": "Load a tree of Named Entities (FALSE by default).",
                    "default": true
                },
                {
                    "name": "returnedtopicscount",
                    "type": "NUMBER",
                    "description": "Determine max count of document topics to return.",
                    "default": "3"
                },
                {
                    "name": "structure",
                    "type": "STRING",
                    "description": "Specify structure of the document (News Article, Research Paper, Patent or General).",
                    "default": "General"
                },
                {
                    "name": "textstreamlength",
                    "type": "NUMBER",
                    "description": "Content length in bytes.",
                    "default": "1033"
                },
                {
                    "name": "usepercentrestriction",
                    "type": "BOOLEAN",
                    "description": "Use percentage of the number of sentences in the original text instead of the exact number of sentences.",
                    "default": true
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/summarizeText?loadConceptsTree=True&loadNamedEntityTree=True&summaryRestriction=10&usePercentRestriction=True&conceptsRestriction=True&structure=General&returnedTopicsCount=3&fullTextTrees=True&textStreamLength=1033\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/summarizeText?loadConceptsTree={loadconceptstree}&loadNamedEntityTree={loadnamedentitytree}&summaryRestriction={summaryrestriction}&usePercentRestriction={usepercentrestriction}&conceptsRestriction={conceptsrestriction}&structure={structure}&returnedTopicsCount={returnedtopicscount}&fullTextTrees={fulltexttrees}&textStreamLength={textstreamlength}\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Concept Extraction from files",
            "url": "https://intellexer.p.rapidapi.com/clusterizeFileContent",
            "description": "Return tree of concepts for file content.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "file",
                    "type": "BINARY",
                    "description": "File to process.",
                    "default": ""
                },
                {
                    "name": "conceptsRestriction",
                    "type": "NUMBER",
                    "description": "Determine the length of a concept tree.",
                    "default": "10"
                },
                {
                    "name": "filename",
                    "type": "STRING",
                    "description": "Name of the file to process.",
                    "default": "1.txt"
                }
            ],
            "optional_parameters": [
                {
                    "name": "fileSize",
                    "type": "NUMBER",
                    "description": "Size of the file to process in bytes.",
                    "default": "1024"
                },
                {
                    "name": "fullTextTrees\u2019",
                    "type": "BOOLEAN",
                    "description": "Load full text trees.",
                    "default": true
                },
                {
                    "name": "loadSentences",
                    "type": "BOOLEAN",
                    "description": "Load all sentences.",
                    "default": true
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/clusterizeFileContent\"\nquerystring = {\"file\": \"\", \"fileSize\": \"1024\", \"conceptsRestriction\": \"10\", \"fullTextTrees\u2019\": true, \"loadSentences\": true, \"filename\": \"1.txt\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/clusterizeFileContent\"\nquerystring = {\"file\": \"\", \"fileSize\": \"1024\", \"conceptsRestriction\": \"10\", \"fullTextTrees\u2019\": true, \"loadSentences\": true, \"filename\": \"1.txt\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Concept Extraction from texts",
            "url": "https://intellexer.p.rapidapi.com/clusterizeText",
            "description": "Return tree of concepts for a text.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "conceptsRestriction",
                    "type": "NUMBER",
                    "description": "Concepts tree length restriction.",
                    "default": "10"
                }
            ],
            "optional_parameters": [
                {
                    "name": "fullTextTrees",
                    "type": "BOOLEAN",
                    "description": "Flag to load full text trees.",
                    "default": true
                },
                {
                    "name": "loadSentences",
                    "type": "BOOLEAN",
                    "description": "Load all sentences.",
                    "default": true
                },
                {
                    "name": "textstreamlength",
                    "type": "NUMBER",
                    "description": "Content length in bytes.",
                    "default": "1024"
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/clusterizeText\"\nquerystring = {\"conceptsRestriction\": \"10\", \"fullTextTrees\": true, \"loadSentences\": true, \"textstreamlength\": \"1024\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/clusterizeText\"\nquerystring = {\"conceptsRestriction\": \"10\", \"fullTextTrees\": true, \"loadSentences\": true, \"textstreamlength\": \"1024\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Text Extraction from files",
            "url": "https://intellexer.p.rapidapi.com/parseFileContent",
            "description": "Parse and extract file content in the form of plain text.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "fileName",
                    "type": "STRING",
                    "description": "Name of the file to process.",
                    "default": "1.docx"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/parseFileContent\"\nquerystring = {\"fileName\": \"1.docx\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/parseFileContent\"\nquerystring = {\"fileName\": \"1.docx\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Language Recognition",
            "url": "https://intellexer.p.rapidapi.com/recognizeLanguage",
            "description": "Recognize language and encoding of an input text stream.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/recognizeLanguage\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/recognizeLanguage\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Summarization of files",
            "url": "https://intellexer.p.rapidapi.com/summarizeFileContent?fileName=1.txt&fileSize=1233&loadConceptsTree=True&loadNamedEntityTree=True&summaryRestriction=10&usePercentRestriction=True&conceptsRestriction=10&structure=General&returnedTopicsCount=3&fullTextTrees=True",
            "description": "Return summary data for a file.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text file",
                    "type": "BINARY",
                    "description": "POST body as binary text file content.",
                    "default": ""
                },
                {
                    "name": "summaryrestriction",
                    "type": "NUMBER",
                    "description": "Determine size of a summary measured in sentences.",
                    "default": "10"
                },
                {
                    "name": "filename",
                    "type": "STRING",
                    "description": "Name of the file to process.",
                    "default": "1.txt"
                }
            ],
            "optional_parameters": [
                {
                    "name": "usepercentrestriction",
                    "type": "BOOLEAN",
                    "description": "Use percentage of the number of sentences in the original text instead of the exact number of sentences.",
                    "default": true
                },
                {
                    "name": "structure",
                    "type": "STRING",
                    "description": "Specify structure of the document (News Article, Research Paper, Patent or General).",
                    "default": "General"
                },
                {
                    "name": "returnedtopicscount",
                    "type": "NUMBER",
                    "description": "Determine max count of document topics to return.",
                    "default": "3"
                },
                {
                    "name": "loadnamedentitytree",
                    "type": "BOOLEAN",
                    "description": "Load the tree of Named Entities (FALSE by default).",
                    "default": true
                },
                {
                    "name": "loadconceptstree",
                    "type": "BOOLEAN",
                    "description": "Load the tree of concepts (FALSE by default).",
                    "default": true
                },
                {
                    "name": "fulltexttrees",
                    "type": "BOOLEAN",
                    "description": "Load full text trees.",
                    "default": true
                },
                {
                    "name": "filesize",
                    "type": "NUMBER",
                    "description": "Size of the file to process in bytes.",
                    "default": "1233"
                },
                {
                    "name": "conceptsrestriction",
                    "type": "NUMBER",
                    "description": "Determine the length of a concept tree.",
                    "default": "10"
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/summarizeFileContent?fileName=1.txt&fileSize=1233&loadConceptsTree=True&loadNamedEntityTree=True&summaryRestriction=10&usePercentRestriction=True&conceptsRestriction=10&structure=General&returnedTopicsCount=3&fullTextTrees=True\"\nquerystring = {\"text file\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/summarizeFileContent?fileName={filename}&fileSize={filesize}&loadConceptsTree={loadconceptstree}&loadNamedEntityTree={loadnamedentitytree}&summaryRestriction={summaryrestriction}&usePercentRestriction={usepercentrestriction}&conceptsRestriction={conceptsrestriction}&structure={structure}&returnedTopicsCount={returnedtopicscount}&fullTextTrees={fulltexttrees}\"\nquerystring = {\"text file\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Natural Language Interface",
            "url": "https://intellexer.p.rapidapi.com/convertQueryToBool",
            "description": "Convert user query in English to a set of terms and concepts joined by logical operators.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "query",
                    "type": "BINARY",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/convertQueryToBool\"\nquerystring = {\"query\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/convertQueryToBool\"\nquerystring = {\"query\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Named Entity Recognition from files",
            "url": "https://intellexer.p.rapidapi.com/recognizeNeFileContent",
            "description": "Load named entities (personal names, names of organizations, geographical locations, positions/occupations, etc.) from a file.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text file",
                    "type": "BINARY",
                    "description": "POST body as binary text file content.",
                    "default": ""
                },
                {
                    "name": "fileName",
                    "type": "STRING",
                    "description": "Name of the file to process.",
                    "default": "1.txt"
                }
            ],
            "optional_parameters": [
                {
                    "name": "fileSize",
                    "type": "NUMBER",
                    "description": "Size of the file to process in bytes.",
                    "default": "1233"
                },
                {
                    "name": "loadNamedEntities",
                    "type": "BOOLEAN",
                    "description": "Load named entities (FALSE by default).",
                    "default": true
                },
                {
                    "name": "loadRelationsTree",
                    "type": "BOOLEAN",
                    "description": "Load tree of relations (FALSE by default).",
                    "default": true
                },
                {
                    "name": "loadSentences",
                    "type": "BOOLEAN",
                    "description": "Load source sentences (FALSE by default).",
                    "default": true
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/recognizeNeFileContent\"\nquerystring = {\"text file\": \"\", \"fileName\": \"1.txt\", \"fileSize\": \"1233\", \"loadNamedEntities\": true, \"loadRelationsTree\": true, \"loadSentences\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/recognizeNeFileContent\"\nquerystring = {\"text file\": \"\", \"fileName\": \"1.txt\", \"fileSize\": \"1233\", \"loadNamedEntities\": true, \"loadRelationsTree\": true, \"loadSentences\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Comparison of texts",
            "url": "https://intellexer.p.rapidapi.com/compareTextData",
            "description": "Compares the specified sources. POST body is form-urlencoded structure:   \u2018text1\u2019 : \u2018string, text content of the first document\u2019, \u2018text2\u2019 : \u2018string, text content of the second document\u2019 .",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "text1",
                    "type": "STRING",
                    "description": "",
                    "default": "This room is very good!"
                },
                {
                    "name": "text2",
                    "type": "STRING",
                    "description": "",
                    "default": "This hotel room is bad!"
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/compareTextData\"\nquerystring = {\"text1\": \"This room is very good!\", \"text2\": \"This hotel room is bad!\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/compareTextData\"\nquerystring = {\"text1\": \"This room is very good!\", \"text2\": \"This hotel room is bad!\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Sentiment Analysis",
            "url": "https://intellexer.p.rapidapi.com/AnalyzeReviews",
            "description": "Perform sentiments analysis on reviews from the list. Reviews for the analysis should be transferred to the POST body in the form of JSON array, where each array item contains \"id\" - review ID and \"text\" - review text.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "sentiments",
                    "type": "STRING",
                    "description": "Reviews in the form of JSON array, where each array item contains \"id\" - review ID and \"text\" - review text.",
                    "default": "[ {\"id\": \"1\", \"text\": \"The room of this hotel is very good!\" }]"
                }
            ],
            "optional_parameters": [
                {
                    "name": "loadSentences",
                    "type": "BOOLEAN",
                    "description": "Load source sentences (FALSE by default).",
                    "default": true
                },
                {
                    "name": "ontology",
                    "type": "STRING",
                    "description": "Specify which of the existing ontologies will be used to group the results. Possible values: Gadgets, Hotels, Restaurants.",
                    "default": "Hotels"
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/AnalyzeReviews\"\nquerystring = {\"loadSentences\": true, \"ontology\": \"Hotels\", \"sentiments\": \"[ {\\\"id\\\": \\\"1\\\", \\\"text\\\": \\\"The room of this hotel is very good!\\\" }]\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/AnalyzeReviews\"\nquerystring = {\"loadSentences\": true, \"ontology\": \"Hotels\", \"sentiments\": \"[ {\\\"id\\\": \\\"1\\\", \\\"text\\\": \\\"The room of this hotel is very good!\\\" }]\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Named Entity Recognition from texts",
            "url": "https://intellexer.p.rapidapi.com/recognizeNeText",
            "description": "Load named entities (personal names, names of organizations, geographical locations, positions/occupations, etc.) from a text.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "loadNamedEntities",
                    "type": "BOOLEAN",
                    "description": "Load named entities (FALSE by default).",
                    "default": true
                },
                {
                    "name": "loadRelationsTree",
                    "type": "BOOLEAN",
                    "description": "Load tree of relations (FALSE by default).",
                    "default": true
                },
                {
                    "name": "loadSentences",
                    "type": "BOOLEAN",
                    "description": "Load source sentences (FALSE by default).",
                    "default": true
                }
            ],
            "code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/recognizeNeText\"\nquerystring = {\"loadNamedEntities\": true, \"loadRelationsTree\": true, \"loadSentences\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://intellexer.p.rapidapi.com/recognizeNeText\"\nquerystring = {\"loadNamedEntities\": true, \"loadRelationsTree\": true, \"loadSentences\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"intellexer.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}