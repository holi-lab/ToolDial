{
    "product_id": "53aa57e4e4b0f2c975470923",
    "tool_description": "MediaCrush makes sharing media super fast by reducing the file size, without sacrificing quality.  We'll losslessly compress images, video, and audio uploaded to our service.  We can get 1000-3000% faster for some files!",
    "home_url": "https://rapidapi.com/jdiez/api/mediacrush/",
    "name": "MediaCrush",
    "title": "MediaCrush",
    "pricing": "FREE",
    "tool_name": "MediaCrush",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 178,
        "avgSuccessRate": 74,
        "popularityScore": 9.1,
        "__typename": "Score"
    },
    "host": "community-mediacrush.p.rapidapi.com",
    "api_list": [
        {
            "name": "/api/upload/file",
            "url": "https://community-mediacrush.p.rapidapi.com/upload/file",
            "description": "Returns: a dictionary with the hash of the file in case the upload succeeded, a dictionary containing the error code if it did not succeed.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "file",
                    "type": "BINARY",
                    "description": "the file to upload.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://community-mediacrush.p.rapidapi.com/upload/file\"\nquerystring = {\"file\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"community-mediacrush.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://community-mediacrush.p.rapidapi.com/upload/file\"\nquerystring = {\"file\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"community-mediacrush.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}