{
    "product_id": "api_6bdbbffe-762d-4b4a-88e2-657a6b1c5868",
    "tool_description": "The Content Monitoring API is a powerful tool designed for developers who need to monitor changes in website content. This API allows developers to register detectors that periodically scrape the provided URL, analyze the change with the help of ChatGPT and notify the API consumer on the significance of the detected change.  \n**The API reference:** https://apitrends.stoplight.io/docs/changedetector/",
    "home_url": "https://rapidapi.com/apitrendsteo/api/the-content-monitoring-api/",
    "name": "The Content Monitoring API",
    "title": "The Content Monitoring API",
    "pricing": "FREEMIUM",
    "tool_name": "The Content Monitoring API",
    "score": null,
    "host": "the-content-monitoring-api.p.rapidapi.com",
    "api_list": [
        {
            "name": "create_detector",
            "url": "https://the-content-monitoring-api.p.rapidapi.com/detector",
            "description": "Add a new detector. If added correctly, the scheduler immediately adds the detector as a runable job.\nIn order for the first url snapshot to be taken as fast as possible, detectInterval.startDate should be set to **current datetime - detectInterval + 1 minute**.\n\n**Important!** The price of the API directly depends on the frequency of detector activations (detectInterval) when the provided URL is scraped for the content.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://the-content-monitoring-api.p.rapidapi.com/detector\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"the-content-monitoring-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://the-content-monitoring-api.p.rapidapi.com/detector\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"the-content-monitoring-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "Detector",
                "type": "object",
                "x-examples": {
                    "Example 1": {
                        "dtAdded": "2023-03-12T10:10:01.737167+00:00",
                        "status": "active",
                        "keywords": [
                            "price",
                            "meubelen"
                        ],
                        "detectInterval": {
                            "endDate": "2024-03-03T10:00:00+00:00",
                            "hours": 0,
                            "days": 0,
                            "minutes": 16,
                            "startDate": "2023-03-07T08:13:15+00:00",
                            "weeks": 0
                        },
                        "urlParams": {
                            "evaluateJS": false,
                            "unexpectedTexts": [],
                            "method": "GET",
                            "headers": {
                                "accept-language": "en-US,en;q=0.9",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36",
                                "accept-encoding": "gzip, deflate, br",
                                "cookie": "testcookie"
                            },
                            "data": "",
                            "expectedStatuses": [
                                200
                            ],
                            "url": "https://www.lumz.nl/kasten/dressoirs/bepurehome-draw-dressoir-mangohout-walnoot",
                            "retries": 3,
                            "timeout": 10
                        },
                        "name": "tv stand",
                        "userId": "1",
                        "extractText": true
                    }
                },
                "description": "A detector object that stores all the config parameters which describe frequency and the logic for the provided URL to be monitored for a change.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique id generated by the server for further reference."
                    },
                    "name": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "Short description of an object"
                    },
                    "userId": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "Identifies a user who requested for the URL monitoring. Can be used to segregate the data by application users."
                    },
                    "keywords": {
                        "maxItems": 10,
                        "type": "array",
                        "items": {
                            "maxLength": 30,
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "default": "active",
                        "enum": [
                            "active",
                            "paused"
                        ]
                    },
                    "dtAdded": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date-time when object was created."
                    },
                    "dtUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date-time when object was last updated."
                    },
                    "detectInterval": {
                        "type": "object",
                        "title": "Detection interval",
                        "description": "Defines frequency for scheduler to ativate the detector.",
                        "properties": {
                            "minutes": {
                                "maximum": 59,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "hours": {
                                "maximum": 24,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "days": {
                                "maximum": 366,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "weeks": {
                                "maximum": 55,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "startDate": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date-time from which the scheduler calculates intervals for detector activation. "
                            },
                            "endDate": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date-time for scheduler to stop detector's activations. If not defined the detector will be activated perioadically as defined by interval indefinetly."
                            }
                        },
                        "required": [
                            "startDate"
                        ]
                    },
                    "extractText": {
                        "type": "boolean",
                        "default": true,
                        "description": "Forces text extraction from HTML content before difference calculation."
                    },
                    "urlParams": {
                        "type": "object",
                        "title": "URL parameters",
                        "description": "Parameterization for content scraping.",
                        "properties": {
                            "url": {
                                "type": "string"
                            },
                            "method": {
                                "type": "string",
                                "default": "GET",
                                "enum": [
                                    "GET",
                                    "POST",
                                    "PATCH",
                                    "PUT"
                                ]
                            },
                            "retries": {
                                "maximum": 5,
                                "minimum": 0,
                                "type": "integer",
                                "default": 2
                            },
                            "timeout": {
                                "maximum": 30,
                                "minimum": 1,
                                "type": "integer",
                                "default": 10
                            },
                            "evaluateJS": {
                                "type": "boolean",
                                "default": true,
                                "description": "Launches real browser. Significantly slower and more expensive. Only GET requests are supported with JS evaluation."
                            },
                            "unexpectedTexts": {
                                "maxItems": 5,
                                "type": "array",
                                "description": "If the provided text is found in the response, the response is treated as failed. For example captcha is requested before content is provided in the response.",
                                "items": {
                                    "maxLength": 100,
                                    "type": "string"
                                }
                            },
                            "expectedStatuses": {
                                "maxItems": 10,
                                "type": "array",
                                "description": "A list of expected status. Normally 200, 201, etc.",
                                "items": {
                                    "maximum": 999,
                                    "type": "integer",
                                    "default": 200
                                }
                            },
                            "headers": {
                                "maxProperties": 30,
                                "type": "object",
                                "description": "A list of headers to be sent with the request."
                            },
                            "data": {
                                "maxLength": 1000,
                                "type": "string",
                                "description": "Payload to be sent with the request."
                            }
                        }
                    }
                }
            }
        }
    ]
}