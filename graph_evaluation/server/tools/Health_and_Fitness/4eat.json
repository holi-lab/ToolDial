{
    "product_id": "api_c8c66953-139f-40c2-be88-7c17b481b882",
    "tool_description": "4eat API is the Digital Nutritionist infrastructure for the internet. It provides you with an easy and advanced digital nutritionist that you can integrate into your service. We aim to add value to verticals related to nutrition services, so we can improve people's life through better health, which starts with better nutrition.",
    "home_url": "https://rapidapi.com/4eat-4eat-default/api/4eat/",
    "name": "4eat",
    "title": "4eat",
    "pricing": "FREEMIUM",
    "tool_name": "4eat",
    "score": null,
    "host": "4eat.p.rapidapi.com",
    "api_list": [
        {
            "name": "post-userRecipe",
            "url": "https://4eat.p.rapidapi.com/userRecipe",
            "description": "This method allow your users to create their own healthy recipes and these recipes will only be available for them. This feature will allow your users to create their own recipes considering what they like and/or what they have in their fridge, following our guides.\n\nThe user may need to add any specific kind of ingredient, depending on the rest of the meals. You should call ```GET /userRecipe``` to check which ingredients are available and how many of them you need to include on the recipe to be healthy.\n\nThese recipes are defined by adding ingredients, following the guides that we add over the process. Consider that as a recipe is defined by the user for a specific meal of the day, that recipe has specific rules to complete to ensure that the day is healthy and well balanced. That will be a key part of this recipe creation process.\n\nYou can allow your users to save their recipes with the ```store``` parameter, and to be part of the offer available when we look for good fit alternatives in a meal.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/userRecipe\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/userRecipe\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "post-signupUser",
            "url": "https://4eat.p.rapidapi.com/user",
            "description": "This endpoint will allow you to create a new user. You will need to define all the information to register them. This function is critical as it is needed to add a user that is always related to you, as a customer.\n\nYou will need to define several mandatory and optional information in this endpoint, which typically results in a registration process. To us, this information will be critical to create the basis of your users requirements, and better understand their needs. Along all the information that we will specify in details in the parameters section, you will need to define the user itself, meaning its age, gender, height, weight, etc. As well as their nutritional profile, such as diet type, goal, meals per day, allergies, etc.\n\nIf you don't know how to deal in terms of UX/UI with this process, we have our demo use case, [4eat app](https://apps.apple.com/es/app/4eat-dieta-comiendo-saludable/id1532396937), where you can see how we ask in this use case those properties and perform the registration process",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/user\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/user\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "post-addRecipe",
            "url": "https://4eat.p.rapidapi.com/recipe",
            "description": "This endpoint allows you to create your own recipes catalog. This is a very important feature so whether you have a food delivery service where the restaurants give you their menus, a meal kit company that has their own products, or you have a recipe book that you would like to include, this endpoint will bring you the possibility to add those recipes. \n\n4eat is a suite of algorithms, so although we have recipes optimized per country, it is only on you to show and use them to your service. We allow you to create in different ways recipes that then we will analyze automatically to decide if they suit your user in a specific meal in a specific day, or not. This is a critical function, as it will allow you to add your service offer that will be fully private for yourself, and that you will be able to control all time. \nThis functionality allows you, as a customer, to define in different ways \u201crecipes\u201d, that are \u201cmeals\u201d in several ways. This concept is important so you need to pay attention in order to define it properly and understand the implications of the definition. We control recipes with ingredients, subcategories and quantities. We give you alternatives in how to define your recipes, as different use cases have different requirements. This is critical, so we will explain here the different definition cases that we have:\n\n**1. Recipe with ingredients and fixed quantities**. You can define a recipe including its ingredients and the quantity of each of them. Then, as we define internally each of those ingredients, we are able to identify even in more detail than we were with the first case if a recipe suits a specific meal or not. This case is better in terms of optimisation than the first one, and can be used if you know how much of each ingredient is included in the recipe.\n\n**2. Recipe with ingredients without quantities**. You can also define a recipe including only its ingredients, without specific quantities. In this case, we use our optimizer in each meal to calculate how much of each ingredient would require a user in that meal. This option is the best one in terms of diet optimization, but it only works if the user is the one that cooks their own meal, or if the restaurant/dark kitchen adjusts the quantities of the meal to that specific case.\n\nYou can see every available ingredient with ```GET /setupData``` method, and you must use our ingredients to define your meals as we carefully consider them in the selection and optimisation process. Consider that we only add generic and what we consider healthy ingredients, but if you miss an ingredient we encourage you to contact us so we can add it in our service.\n\nPlease, consider also the following statements:\n\n- Ingredients are important in order to identify if a meal is not selectionable for a user regarding their allergies. As part of the platform development, we recommend you to ask your users for their allergies, by using ```PUT /user``` method, that will allow your user to select specific ingredients and also general allergies such as gluten. When a user selects their allergies in their profile, we are able to better select if a recipe is suitable to your user, so please, define the ingredients properly and ask your users to fill up their allergies and the ingredients they don't like.\n- Ingredients quantities and macronutrients are key for a user's diet. We analyze which meals are suitable around the available for an specific meal, in terms of diet requirements and diet balance (this is considering the rest of your meals, physical activity, balance in terms of group of ingredients, etc).\n- You need to add a name for the meal that you are defining. Add as many languages as you will use in your service. English language will always be the default one when no other language is available. Contact us if you are missing one of them.\n- As part of our balance focus, we use recipes subcategories as a tool to improve your users diet. You should select the recipe subcategory that better suits your meal.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/recipe\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/recipe\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "post-newWeek",
            "url": "https://4eat.p.rapidapi.com/week",
            "description": "This method generates a week for a user, a nutritional plan. This allows the user to generate a nutritional plan, empty for the manual case or filled for the automatic case, considering the user's plan type defined on the signup.\n\nConsider that, in the automatic case, our algorithm analyses the available recipes, and tries to complete the plan for that user. If there are not enough recipes available, or if the user has added too many constraints (allergies or ingredients he doesn't like), that plan cannot be generated, so you will receive an error indicating that more recipes are needed, or you need to remove some constraints. In general, we recommend that you select the manual plan, where the basis of your user's diet is generated, but they are in charge of selecting from the available options for each meal. Decide what type of application you want to implement and this will give you the answer as to which method you should employ.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/week\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://4eat.p.rapidapi.com/week\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"4eat.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "default": true
                    },
                    "week": {
                        "title": "weekObject",
                        "type": "object",
                        "description": "Defines a plan for a week",
                        "properties": {
                            "weekID": {
                                "type": "integer",
                                "title": "weekID",
                                "description": "Defines the week ID for a diet plan. Each user can have several weeks generated, each one indentified with this parameter",
                                "minimum": 0,
                                "x-internal": false
                            },
                            "days": {
                                "type": "array",
                                "items": {
                                    "title": "dayObject",
                                    "type": "object",
                                    "properties": {
                                        "dayID": {
                                            "type": "integer",
                                            "title": "dayID",
                                            "description": "Defines the day ID inside a week. Each plan represents one week and have 7 days associated to it",
                                            "minimum": 1,
                                            "maximum": 7,
                                            "x-internal": false
                                        },
                                        "mealsNumber": {
                                            "type": "integer",
                                            "title": "mealsNumber",
                                            "description": "Defines the number of meals per day for a plan",
                                            "enum": [
                                                3,
                                                4,
                                                5
                                            ]
                                        },
                                        "mealsDistribution": {
                                            "type": "integer",
                                            "title": "mealsDistribution",
                                            "description": "Defines the meals distribution for a day, i.e. the combination of the meal types. There are 3 distributions for every different number of meals. See the list of every available distribution with ```GET /setupData``` method",
                                            "enum": [
                                                1,
                                                2,
                                                3
                                            ]
                                        },
                                        "meals": {
                                            "type": "array",
                                            "items": {
                                                "title": "mealObject",
                                                "type": "object",
                                                "description": "Defines a meal. \n\nIf recipe ID it's equal to -1, it means that there are no recipe associated to that meal. For example, all meals will be blank by default using the manual plan type, or if you use ```PUT /skipMeal``` on a meal",
                                                "properties": {
                                                    "mealID": {
                                                        "type": "integer",
                                                        "title": "mealID",
                                                        "description": "Defines the meal ID inside a day. Each day can have up to 5 meals associated to it",
                                                        "minimum": 1,
                                                        "maximum": 5,
                                                        "x-internal": false
                                                    },
                                                    "mealType": {
                                                        "type": "integer",
                                                        "title": "mealType",
                                                        "description": "Defines the type of a meal.\n\n- **1** = breakfast\n- **2** = noon snack\n- **3** = lunch\n- **4** = afternoon snack\n- **5** = dinner\n- **6** = supper",
                                                        "enum": [
                                                            1,
                                                            2,
                                                            3,
                                                            4,
                                                            5,
                                                            6
                                                        ]
                                                    },
                                                    "recipeID": {
                                                        "type": "integer",
                                                        "title": "recipeID",
                                                        "description": "Defines the recipe ID. See the list of every available recipe with ```GET /recipes``` method"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "title": "recipeName",
                                                        "description": "Defines the name of the recipe"
                                                    },
                                                    "subcategoryName": {
                                                        "type": "string",
                                                        "title": "subcategoryName",
                                                        "description": "Defines the name of the recipe's subcategory. See the list of every available subcategory with ```GET /setupData``` method"
                                                    },
                                                    "level": {
                                                        "type": "integer",
                                                        "title": "recipeLevel",
                                                        "description": "Defines the difficulty for cooking the recipe, from 1 to 3 (the highest, the harder)",
                                                        "enum": [
                                                            1,
                                                            2,
                                                            3
                                                        ]
                                                    },
                                                    "time": {
                                                        "type": "integer",
                                                        "title": "recipeTime",
                                                        "description": "Defines the approximate time for cooking the recipe, in minutes"
                                                    },
                                                    "done": {
                                                        "type": "boolean",
                                                        "title": "mealDone",
                                                        "description": "Defines if a meal has been done by the user. We use this information to better optimice the plan and quantities"
                                                    },
                                                    "custom": {
                                                        "title": "customRecipe",
                                                        "type": "boolean",
                                                        "description": "Defines if the recipe has been created by the user (using ```POST /userRecipe```)"
                                                    },
                                                    "ingredients": {
                                                        "title": "ingredientQuantityArray",
                                                        "type": "array",
                                                        "description": "Defines a list of ingredients with associated quantities",
                                                        "items": {
                                                            "title": "ingredientQuantityObject",
                                                            "type": "object",
                                                            "properties": {
                                                                "ingredientID": {
                                                                    "type": "integer",
                                                                    "title": "ingredientID",
                                                                    "description": "Defines the ingredient ID. See the list of every available ingredient with ```GET /setupData``` method "
                                                                },
                                                                "name": {
                                                                    "type": "string",
                                                                    "title": "ingredientName",
                                                                    "description": "Name of the ingredient"
                                                                },
                                                                "grams": {
                                                                    "type": "integer",
                                                                    "title": "ingredientGrams",
                                                                    "description": "Defines the quantity of ingredient in grams"
                                                                },
                                                                "quantity": {
                                                                    "type": "integer",
                                                                    "title": "ingredientQuantity",
                                                                    "description": "Defines the quantity of ingredient in the most appropiate measurement. If ```null```, it means that the quantity is free of choice for the user, since the nutritional contribution of this ingredient is not very relevant"
                                                                },
                                                                "measurement": {
                                                                    "type": "string",
                                                                    "title": "ingredientMeasurement",
                                                                    "description": "Defines the text for the measurement"
                                                                }
                                                            },
                                                            "description": "Defines the required quantity for an ingredient. If you defined a fixed quantity for your own recipe, ```quantity``` and ```measurement``` fields won't appear"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}