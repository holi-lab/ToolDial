{
    "product_id": "api_9b68ca3c-49cb-4507-9530-beb2d1efcaa9",
    "tool_description": "A fitness calculator API to calculate BMI, BFP, RDEE, BMR, TDEE and much more !",
    "home_url": "https://rapidapi.com/vibecomputing/api/fitness-api/",
    "name": "fitness-api",
    "title": "fitness-api",
    "pricing": "FREEMIUM",
    "tool_name": "fitness-api",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 1292,
        "avgSuccessRate": 100,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "host": "fitness-api.p.rapidapi.com",
    "api_list": [
        {
            "name": "fitness",
            "url": "https://fitness-api.p.rapidapi.com/fitness",
            "description": "Fitness API Documentation\n=========================\n\nIntroduction\n------------\n\nThis API provides many formulas to compute many things as your *Body Mass Index (BMI)*, your *Body Fat Percetage (BFP)* or to compute food energy and the list is growing !\n\nGetting started\n---------------\n\nThe first thing is to create an account on [RapidAPI](https://rapidapi.com/marketplace \"RapidAPI marketplace\") to obtain an API key. Then follow the RapidAPI documentation to use the API with your preferred programming language.\n\n/fitness route\n--------------\n\nThis route respond only to POST request. The more you add parameters, the more results you will have. For example, if you provide just *height* and *weight* parameters (let's take 190 cm and 80 Kg for this example), you will only have this:\n\n```{.json}\n{\n  \"height\": 190,\n  \"weight\": 88,\n  \"idealBodyWeight\": {\n    \"peterson\": {\n      \"formulaName\": \"Peterson et al.\",\n      \"metric\": {\n        \"value\": 87.8,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      },\n      \"imperial\": {\n        \"value\": 169.9,\n        \"unit\": [\n          \"lbs\",\n          \"pounds\"\n        ]\n      }\n    }\n  },\n  \"bodyMassIndex\": {\n    \"value\": 24.4,\n    \"conclusion\": \"Normal\",\n    \"unit\": \"Kg/m\u00b2\"\n  }\n}\n```\n\nBut, if you provide a gender (*\"male\"* for example), you will have many more things:\n\n```{.json}\n{\n  \"height\": 190,\n  \"weight\": 88,\n  \"gender\": \"male\",\n  \"idealBodyWeight\": {\n    \"peterson\": {\n      \"formulaName\": \"Peterson et al.\",\n      \"metric\": {\n        \"value\": 87.8,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      },\n      \"imperial\": {\n        \"value\": 193.7,\n        \"unit\": [\n          \"lbs\",\n          \"pounds\"\n        ]\n      }\n    },\n    \"lorentz\": {\n      \"formulaName\": \"Lorentz\",\n      \"metric\": {\n        \"value\": 80,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      },\n      \"imperial\": {\n        \"value\": 176.4,\n        \"unit\": [\n          \"lbs\",\n          \"pounds\"\n        ]\n      }\n    },\n    \"hamwi\": {\n      \"formulaName\": \"Hamwi\",\n      \"metric\": {\n        \"value\": 88,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      },\n      \"imperial\": {\n        \"value\": 193.9,\n        \"unit\": [\n          \"lbs\",\n          \"pounds\"\n        ]\n      }\n    },\n    \"devine\": {\n      \"formulaName\": \"Devine\",\n      \"metric\": {\n        \"value\": 84,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      },\n      \"imperial\": {\n        \"value\": 185.3,\n        \"unit\": [\n          \"lbs\",\n          \"pounds\"\n        ]\n      }\n    },\n    \"robinson\": {\n      \"formulaName\": \"Robinson\",\n      \"metric\": {\n        \"value\": 80.1,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      },\n      \"imperial\": {\n        \"value\": 176.6,\n        \"unit\": [\n          \"lbs\",\n          \"pounds\"\n        ]\n      }\n    },\n    \"miller\": {\n      \"formulaName\": \"Miller\",\n      \"metric\": {\n        \"value\": 77.1,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      },\n      \"imperial\": {\n        \"value\": 169.9,\n        \"unit\": [\n          \"lbs\",\n          \"pounds\"\n        ]\n      }\n    }\n  },\n  \"bodyMassIndex\": {\n    \"value\": 24.4,\n    \"conclusion\": \"Normal\",\n    \"unit\": \"Kg/m\u00b2\"\n  }\n}\n```\n\nSimple as that ! Now we will explain what you can compute.\n\n### List of parameters\n\nHere is the list of all available parameters.\n\n* *height* in centimeters\n* *weight* in kilograms\n* *age* in years\n* *gender* possible values\n  * *male*\n  * *female*\n* *exercise* level of activity according to [Occupational Safety and Health Administration](https://www.osha.gov/SLTC/heatillness/heat_index/work_rates_loads.html \"Occupational Safety and Health Administration\")\n  * *little*\n  * *light*\n  * *moderate*\n  * *heavy*\n  * *veryheavy*\n* *goal* the diet goal\n  * *fatloss_moderate*\n  * *fatloss_aggressive*\n  * *fatloss_reckless*\n  * *maintenance*\n  * *bulking_slow*\n  * *bulking_normal*\n  * *bulking_aggressive*\n* *goalWeight* the target weight in kilograms\n* *deficit* the calories deficit per day\n* *waist* the waist circumference in centimers\n* *neck* the neck circumference in centimeters\n* *hip* the hip circumference in centimeters\n\n**Note: actually the API essentially uses the metric system for the input data but we do not exclude to also use the imperial system. Metric and imperial system are used to output data.**\n\n### Body Mass Index (BMI)\n\nThe BMI needs two parameters\n\n* *height* in centimeters\n* *weight* in kilograms\n\nand as the result, you get an object named *bodyMassIndex* that contains\n\n* the *BMI* in *value*\n* the conclusion in *conclusion*\n* the unit of measurement in *unit*\n\n```{.json}\n{\n  \"bodyMassIndex\": {\n    \"value\": 24.4,\n    \"conclusion\": \"Normal\",\n    \"unit\": \"Kg/m\u00b2\"\n  }\n}\n```\n\n### Body Fat Percentage (BFP)\n\n#### From BMI\n\nThe *Body Fat Percentage (BFP)* from *BMI* needs these parameters:\n\n* *age* the age in years\n* *gender* possible values \"male\" or \"female\"\n* *bodyMassIndex.value* the *BMI* (cf. *BMI*)\n\n```{.json}\n{\n  \"bodyFatPercentage\": {\n    \"bmi\": {\n      \"formulaName\": \"From BMI\",\n      \"value\": 20,\n      \"conclusion\": \"Acceptable\",\n      \"unit\": [\n        \"%\",\n        \"percents\"\n      ]\n    }\n  }\n}\n```\n\n### Lean Body Mass (LBM)\n\n#### From BMI\n\nThe *Lean Body Mass (LBM)* calculated from the *BMI* needs two parameters\n\n* *weight* in kilograms\n* *bodyFatPercentage.bmi.value* computed with other parameters (see. *BFP*)\n\nAs the result you get an object in *leanBodyMass.bmi* containing\n\n* the formula name in *formulaName*\n* the *LBM* in *value*\n* the unit of measurement in *unit*\n\n```{.json}\n{\n  \"bmi\": {\n    \"formulaName\": \"From BMI\",\n    \"value\": 70.4,\n    \"unit\": [\n      \"Kg\",\n      \"kilograms\"\n    ]\n  }\n}\n```\n\n#### From Department of Defense BFP formula\n\nThe *Lean Body Mass (LBM)* from the *Department of Defense BFP formula* needs two\nparameters\n\n* *weight* in kilograms\n* *bodyFatPercentage.dod* computed with the *Department of Defense BFP formula*\n\nAs the result you get an object in *leanBodyMass.dod* containing\n\n* the formula name in *formulaName*\n* the *LBM* in *value*\n* the unit of measurement in *unit*\n\n```{.json}\n{\n  \"formulaName\": \"From Department of Defense\",\n  \"value\": 75.2,\n  \"unit\": [\n    \"%\",\n    \"percents\"\n  ]\n}\n```\n\n#### From YMCA BFP formula\n\nThe *Lean Body Mass (LBM)* from the *YMCA BFP formula* needs two\nparameters\n\n* *weight* in kilograms\n* *bodyFatPercentage.ymca* computed with the *YMCA BFP formula*\n\nAs the result you get an object in *leanBodyMass.ymca* containing\n\n* the formula name in *formulaName*\n* the *LBM* in *value*\n* the unit of measurement in *unit*\n\n```{.json}\n{\n  \"formulaName\": \"From YMCA\",\n  \"value\": 74.6,\n  \"unit\": [\n    \"%\",\n    \"percents\"\n  ]\n}\n```\n\n### Resting Daily Energy Expenditure (RDEE)\n\n#### From BMI\n\nThe *Resting Daily Energy Expenditure (RDEE)* from *BMI* needs one parameters\n\n* *leanBodyMass.bmi.value* the *LBM* from *BMI*\n\nAs the result you get an object in *restingDailyEnergyExpenditure* containing\n\n* the formula name in *bmi.formulaName*\n* the calories in *bmi.calories.value* and the unit in *bmi.calories.unit*\n* the joules and the unit in *ymca.joules.value* and *ymca.joules.unit*\n\n```{.json}\n{\n  \"bmi\": {\n    \"formulaName\": \"Katch-McArdle\",\n    \"calories\": {\n      \"value\": 1890.6,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 7910.3,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n#### From Department of Defense\n\nThe *Resting Daily Energy Expenditure (RDEE)* from *Department of Defense* needs one parameters\n\n* *leanBodyMass.dod.value* the *LBM* from *Department of Defense*\n\nAs the result you get an object in *restingDailyEnergyExpenditure* containing\n\n* the formula name in *dod.formulaName*\n* the calories in *dod.calories.value* and unit in *dod.calories.unit*\n* the joules and the unit in *ymca.joules.value* and *ymca.joules.unit*\n\n```{.json}\n{\n  \"dod\": {\n    \"formulaName\": \"Katch-McArdle\",\n    \"calories\": {\n      \"value\": 1890.6,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 7910.3,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n#### From YMCA\n\nThe *Resting Daily Energy Expenditure (RDEE)* from *YMCA* needs one parameters\n\n* *leanBodyMass.ymca.value* the *LBM* from *YMCA*\n\nAs the result you get an object in *restingDailyEnergyExpenditure* containing\n\n* the formula name in *ymca.formulaName*\n* the calories and the unit in *ymca.calories.value* and *ymca.calories.unit*\n* the joules and the unit in *ymca.joules.value* and *ymca.joules.unit*\n\n```{.json}\n{\n  \"ymca\": {\n    \"formulaName\": \"Katch-McArdle\",\n    \"calories\": {\n      \"value\": 1890.6,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 7910.3,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n### Basal Metabolic Rate\n\nThe *Basal Metabolic Rate (BMR)* needs four parameters\n\n* *height* in centimers\n* *weight* in kilograms\n* *age* in years\n* *gender* *male* or *female*\n\nAs the result you get an object in *basalMetabolicRate* containing the result of\nthree formulas :\n* *Harris-Benedict* in *hb*\n* *Harris-Benedict revised by Roza-Shizgal* in *rs*\n* *Harris-Benedict revised by Mifflin-St Jeor* in *msj*\n\nEach one contains\n\n* the formula name in *formulaName*\n* the calories and unit in *calories.value* and *calories.unit*\n* the joules and unit in *joules.value* and *joules.unit*\n\n```{.json}\n{\n  \"hb\": {\n    \"formulaName\": \"Harris-Benedict\",\n    \"calories\": {\n      \"value\": 2023.8,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 8467.6,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  },\n  \"rs\": {\n    \"formulaName\": \"Harris-Benedict revised by Roza-Shizgal\",\n    \"calories\": {\n      \"value\": 2008.8,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 8404.8,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    }\n  },\n  \"msj\": {\n    \"formulaName\": \"Harris-Benedict revised by Mifflin-St Jeor\",\n    \"calories\": {\n      \"value\": 1923,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 8045.8,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n### Total Daily Energy Expenditure (TDEE)\n\n#### From BMI\n\nThe *TDEE* from *BMI* needs two parameters\n\n* *exercise*\n* *restingDailyEnergyExpenditure.bmi.calories.value* computed with the *RDEE*\n\nas the result you get an object in *totalDailyEnergyExpenditure* containing\n\n* the formula name in *bmi.formulaName*\n* the calories in *bmi.calories.value* and the unit in *bmi.calories.unit*\n* the joules in *bmi.joules.value* and the unit in *bmi.joules.unit*\n\n```{.json}\n{\n  \"bmi\": {\n    \"formulaName\": \"From RDEE and BMI.\",\n    \"calories\": {\n      \"value\": 2269,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 9493.5,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n#### From Department of Defense\n\nThe *TDEE* from *Department of Defense* needs two parameters\n\n* *exercise*\n* *restingDailyEnergyExpenditure.dod.calories.value* computed with the *RDEE*\n\nas the result you get an object in *totalDailyEnergyExpenditure* containing\n\n* the formula name in *dod.formulaName*\n* the calories in *dod.calories.value* and the unit in *dod.calories.unit*\n* the joules in *dod.joules.value* and the unit in *dod.joules.unit*\n\n```{.json}\n{\n  \"dod\": {\n    \"formulaName\": \"From RDEE and Department of Defense.\",\n    \"calories\": {\n      \"value\": 2269,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 9493.5,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n#### From YMCA\n\nThe *TDEE* from *YMCA* needs two parameters\n\n* *exercise*\n* *restingDailyEnergyExpenditure.ymca.calories.value* computed with the *RDEE*\n\nas the result you get an object in *totalDailyEnergyExpenditure* containing\n\n* the formula name in *ymca.formulaName*\n* the calories in *ymca.calories.value* and the unit in *ymca.calories.unit*\n* the joules in *ymca.joules.value* and the unit in *ymca.joules.unit*\n\n```{.json}\n{\n  \"ymca\": {\n    \"formulaName\": \"From RDEE and YMCA\",\n    \"calories\": {\n      \"value\": 2269,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 9493.5,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n#### From Harris-Benedict\n\nThe *TDEE* from *Department of Defense* needs two parameters\n\n* *exercise*\n* *restingDailyEnergyExpenditure.hb.calories.value* computed with the *RDEE*\n\nas the result you get an object in *totalDailyEnergyExpenditure* containing\n\n* the formula name in *hb.formulaName*\n* the calories in *ha.calories.value* and the unit in *hb.calories.unit*\n* the joules in *hb.joules.value* and the unit in *hb.joules.unit*\n\n```{.json}\n{\n  \"hb\": {\n    \"formulaName\": \"From RDEE and Harris-Benedict\",\n    \"calories\": {\n      \"value\": 2269,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 9493.5,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n#### From Roza-Shizgal\n\nThe *TDEE* from *Roza-Shizgal* needs two parameters\n\n* *exercise*\n* *restingDailyEnergyExpenditure.rs.calories.value* computed with the *RDEE*\n\nas the result you get an object in *totalDailyEnergyExpenditure* containing\n\n* the formula name in *rs.formulaName*\n* the calories in *rs.calories.value* and the unit in *rs.calories.unit*\n* the joules in *rs.joules.value* and the unit in *rs.joules.unit*\n\n```{.json}\n{\n  \"rs\": {\n    \"formulaName\": \"From RDEE and Roza-Shizgal\",\n    \"calories\": {\n      \"value\": 2269,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 9493.5,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n#### From Mifflin-St. Jeor\n\nThe *TDEE* from *Mifflin-St. Jeor* needs two parameters\n\n* *exercise*\n* *restingDailyEnergyExpenditure.msj.calories.value* computed with the *RDEE*\n\nas the result you get an object in *totalDailyEnergyExpenditure* containing\n\n* the formula name in *msj.formulaName*\n* the calories in *msj.calories.value* and the unit in *msj.calories.unit*\n* the joules in *msj.joules.value* and the unit in *msj.joules.unit*\n\n```{.json}\n{\n  \"msj\": {\n    \"formulaName\": \"From RDEE and Mifflin-St. Jeor\",\n    \"calories\": {\n      \"value\": 2269,\n      \"unit\": [\n        \"Kcal\",\n        \"kilocalories\"\n      ]\n    },\n    \"joules\": {\n      \"value\": 9493.5,\n      \"unit\": [\n        \"Kj\",\n        \"kilojoules\"\n      ]\n    }\n  }\n}\n```\n\n### Time Before Goal Weight\n\nYou can compute the needed time to achieve a goal weight with these parameters\n\n* *weight* in kilograms\n* *goalWeight* in kilograms\n* *deficit* the deficit in calories\n\nAs the result you get an object in *timeBeforeGoalWeight* containing\n\n* the needed time in days in *value*\n* the unit in *unit*\n\n```{.json}\n{\n  \"value\": 46,\n  \"unit\": [\n    \"d\",\n    \"days\"\n  ]\n}\n```\n\n### Waist to Hip Ratio (WHR)\n\nThe *Waist to Hip Ratio (WHR)* needs two parameters\n\n* *waist* in centimers\n* *hip* in centimers\n\nAs the result you get an object in *waistToHipRatio* containing\n\n* the ratio in *value*\n* the conclution of this ratio in *conclusion*\n\n```{.json}\n{\n  \"value\": 0.88,\n  \"conclusion\": \"Low health risk\"\n}\n```\n\n### Ideal Body Weight (IBW)\n\n#### Peterson's formula\n\nThe *Ideal Body Weight (IBW)* from *Peterson's formula* eeds two parameters\n\n* *height* in centimeters\n* *weight* in kilograms\n\nand as the result, you get an object named *peterson* nested in *idealBodyWeight* that contains\n\n* the formula name\n* the value of the *Ideal Body Weight (IBW)*\n* the unit of measurement in kilograms in *metric* object\n\n```{.json}\n{\n  \"idealBodyWeight\": {\n    \"peterson\": {\n      \"formulaName\": \"Peterson et al.\",\n      \"metric\": {\n        \"value\": 87.8,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      }\n    }\n  }\n}\n```\n\n#### Lorentz's formula\n\nThe *Ideal Body Weiht (IBW)* from *Lorentz's formula* needs three parameters\n\n* *height* in centimeters\n* *weight* in kilograms\n* *gender*\n\nand as the result, you get an object named *lorentz* nested in *idealBodyWeight* that contains\n\n* the formula name\n* the value of the *Ideal Body Weight (IBW)*\n* the unit of measurement in kilograms\n\n```{.json}\n{\n  \"idealBodyWeight\": {\n    \"lorentz\": {\n      \"formulaName\": \"Lorentz\",\n      \"metric\": {\n        \"value\": 80,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      }\n    }\n  }\n}\n```\n\n#### Hamwi's formula\n\nThe *Ideal Body Weight (IBW)* from *Hawmi's formula* needs three parameters\n\n* *height* in centimeters\n* *weight* in kilograms\n* *gender*\n\nand as the result, you get an object named *hamwi* nested in *idealBodyWeight* that contains\n\n* the formula name\n* the value of the *Ideal Body Weight (IBW)*\n* the unit of measurement in kilograms\n\n```{.json}\n{\n  \"idealBodyWeight\": {\n    \"hamwi\": {\n      \"formulaName\": \"Hamwi\",\n      \"metric\": {\n        \"value\": 88,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      }\n    }\n  }\n}\n```\n\n#### Devine's formula\n\nThe *Ideal Body Weight (IBW)* from *Devine's formula* needs three parameters\n\n* *height* in centimeters\n* *weight* in kilograms\n* *gender*\n\nand as the result, you get an object named *devine* nested in *idealBodyWeight* that contains\n\n* the formula name\n* the value of the *Ideal Body Weight (IBW)*\n* the unit of measurement in kilograms\n\n```{.json}\n{\n  \"idealBodyWeight\": {\n    \"devine\": {\n      \"formulaName\": \"Devine\",\n      \"metric\": {\n        \"value\": 84,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      }\n    }\n  }\n}\n```\n\n#### Robinson's formula\n\nThe *Ideal Body Weight (IBW)* from *Robinson's formula* needs three parameters\n\n* *height* in centimeters\n* *weight* in kilograms\n* *gender*\n\nand as the result, you get an object named *robinson* nested in *idealBodyWeight* that contains\n\n* the formula name\n* the value of the *Ideal Body Weight (IBW)*\n* the unit of measurement in kilograms\n\n```{.json}\n{\n  \"idealBodyWeight\": {\n    \"robinson\": {\n      \"formulaName\": \"Robinson\",\n      \"metric\": {\n        \"value\": 80.1,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      }\n    }\n  }\n}\n```\n\n#### Miller's formula\n\nThe *Ideal Body Weight (IBW)* from *Miller's formula* needs three parameters\n\n* *height* in centimeters\n* *weight* in kilograms\n* *gender*\n\nand as the result, you get an object named *robinson* nested in *idealBodyWeight* that contains\n\n* the formula name\n* the value of the *Ideal Body Weight (IBW)*\n* the unit of measurement in kilograms\n\n```{.json}\n{\n  \"idealBodyWeight\": {\n    \"miller\": {\n      \"formulaName\": \"Miller\",\n      \"metric\": {\n        \"value\": 77.1,\n        \"unit\": [\n          \"Kg\",\n          \"kilograms\"\n        ]\n      }\n    }\n  }\n}\n```",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "weight",
                    "type": "NUMBER",
                    "description": "Weight in kilograms",
                    "default": "80"
                },
                {
                    "name": "hip",
                    "type": "NUMBER",
                    "description": "Hip circumference in centimeters.",
                    "default": "100"
                },
                {
                    "name": "gender",
                    "type": "STRING",
                    "description": "Values can be male or female.",
                    "default": "male"
                },
                {
                    "name": "goal",
                    "type": "STRING",
                    "description": "The goal to evaluate the needed Kcal and Kj. Values can be:\n- moderate fat loss\n- aggressive fat loss\n- reckless fat loss\n- maintenance\n- slow bulking\n- normal bulking\n- aggressive bulking",
                    "default": "maintenance"
                },
                {
                    "name": "exercise",
                    "type": "STRING",
                    "description": "The amount of exercise per week according to [OSHA](https://www.osha.gov/SLTC/heatillness/heat_index/work_rates_loads.html). \nValues can be:\n\n- little\n- light\n- moderate\n- heavy\n- veryheavy",
                    "default": "little"
                },
                {
                    "name": "age",
                    "type": "NUMBER",
                    "description": "",
                    "default": "30"
                },
                {
                    "name": "neck",
                    "type": "NUMBER",
                    "description": "Neck circumference in centimeters.",
                    "default": "41"
                },
                {
                    "name": "deficit",
                    "type": "NUMBER",
                    "description": "",
                    "default": "500"
                },
                {
                    "name": "height",
                    "type": "NUMBER",
                    "description": "Height in centimeters.",
                    "default": "190"
                },
                {
                    "name": "goalWeight",
                    "type": "NUMBER",
                    "description": "",
                    "default": "85"
                },
                {
                    "name": "waist",
                    "type": "NUMBER",
                    "description": "Waist circumference in centimeters.",
                    "default": "88"
                }
            ],
            "code": "import requests\n\nurl = \"https://fitness-api.p.rapidapi.com/fitness\"\nquerystring = {\"weight\": \"80\", \"hip\": \"100\", \"gender\": \"male\", \"goal\": \"maintenance\", \"exercise\": \"little\", \"age\": \"30\", \"neck\": \"41\", \"deficit\": \"500\", \"height\": \"190\", \"goalWeight\": \"85\", \"waist\": \"88\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"fitness-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://fitness-api.p.rapidapi.com/fitness\"\nquerystring = {\"weight\": \"80\", \"hip\": \"100\", \"gender\": \"male\", \"goal\": \"maintenance\", \"exercise\": \"little\", \"age\": \"30\", \"neck\": \"41\", \"deficit\": \"500\", \"height\": \"190\", \"goalWeight\": \"85\", \"waist\": \"88\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"fitness-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        }
    ]
}