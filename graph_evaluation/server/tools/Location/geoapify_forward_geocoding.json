{
    "tool_name":"Geoapify Forward Geocoding",
    "tool_description":"Search addresses and corresponding locations by free-form address string. The API returns the standardized address and individual address components, latitude &amp; longitude coordinates, and other helpful information.",
    "title":"Geoapify Forward Geocoding",
    "pricing":"FREEMIUM",
    "score":{
        "avgServiceLevel":100,
        "avgLatency":2631,
        "avgSuccessRate":100,
        "popularityScore":8.8,
        "__typename":"Score"
    },
    "home_url":"https://rapidapi.com/geoapify-gmbh-geoapify/api/geoapify-forward-geocoding/",
    "host":"geoapify-forward-geocoding.p.rapidapi.com",
    "api_list":[
        {
            "name":"geocoding",
            "url":"https://geoapify-forward-geocoding.p.rapidapi.com/v1/geocode/search",
            "description":"Geoapify provides Geocoding API that searches addresses worldwide. The API works via HTTP GET API. So it's cross-platform and can be used with most of the programming languages.",
            "method":"GET",
            "required_parameters":[
                {
                    "name":"text",
                    "type":"STRING",
                    "description":"",
                    "default":"Schwimmschulstra√üe, 86154 Augsburg"
                }
            ],
            "optional_parameters":[
                {
                    "name":"limit",
                    "type":"NUMBER",
                    "description":"",
                    "default":"1"
                },
                {
                    "name":"bias",
                    "type":"STRING",
                    "description":"Prefer places by country, boundary, circle, location:\n* By circle - circle:lon,lat,radiusMeters - bias=circle:-87.770231,41.878968,5000\n* By rectangle - rect:lon1,lat1,lon2,lat2 - bias=rect:-89.097540,39.668983,-88.399274,40.383412\n* By country - Comma-separated ISO 3166-1 Alpha-2 country codes (in lower case). Use 'auto' to detect the country by IP address. Use 'none' to skip (default value). - bias=countrycode:de,es,fr\n* By location - proximity:lon,lat - bias=proximity:41.2257145,52.971411",
                    "default":"proximity:41.2257145,52.971411"
                },
                {
                    "name":"filter",
                    "type":"STRING",
                    "description":"Filter places by country, boundary, circle:\n* By circle - circle:lon,lat,radiusMeters -  filter=circle:-87.770231,41.878968,5000\n* By rectangle - rect:lon1,lat1,lon2,lat2 - \tfilter=rect:-89.097540,39.668983,-88.399274,40.383412\n* By country  - comma-separated ISO 3166-1 Alpha-2 country codes (in lower case). Use 'auto' to detect the country by IP address. Use 'none' to skip (default value). - filter=countrycode:de,es,fr",
                    "default":"countrycode:de,es,fr"
                },
                {
                    "name":"type",
                    "type":"STRING",
                    "description":"Location type. Possible values: 'country', 'state', 'city', 'postcode', 'street', 'amenity'.",
                    "default":"street"
                },
                {
                    "name":"lang",
                    "type":"STRING",
                    "description":"Result language. 2-character ISO 639-1 language codes are supported.",
                    "default":"de"
                }
            ],
            "code":"import requests\n\nurl = \"https://geoapify-forward-geocoding.p.rapidapi.com/v1/geocode/search\"\nquerystring = {\"text\": text, \"limit\": limit, \"bias\": bias, \"filter\": filter, \"type\": type, \"lang\": lang}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geoapify-forward-geocoding.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode":111,
            "body":"",
            "headers":"",
            "schema":""
        }
    ]
}