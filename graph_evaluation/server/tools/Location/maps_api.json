{
    "tool_name": "Maps API",
    "tool_description": "Get the distance between the origin and destination addresses",
    "title": "Maps API",
    "pricing": "FREEMIUM",
    "score": null,
    "home_url": "https://rapidapi.com/tech-tide-tech-tide-default/api/maps-api2/",
    "host": "maps-api2.p.rapidapi.com",
    "api_list": [
        {
            "name": "Get Places",
            "url": "https://maps-api2.p.rapidapi.com/getPlaces",
            "description": "This API provides a comprehensive address for the provided input. You can utilize this address as the origin and destination in the /getDistance API to obtain more precise results.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "place",
                    "type": "STRING",
                    "description": "",
                    "default": "Delhi"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://maps-api2.p.rapidapi.com/getPlaces\"\nquerystring = {\"place\": place}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maps-api2.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "key1": "value",
                "key2": "value"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "Get Distance",
            "url": "https://maps-api2.p.rapidapi.com/getDistance",
            "description": "This API returns traffic-related information between the origin and destination\n\nRequest Parameters\nThe following parameters are available for use with the /getDistance endpoint:\n\n1) origins: The starting point for calculating travel distance and time. This can be a single string address or an array of addresses. (required)\n\n2) destinations: The end point for calculating travel distance and time. This can be a single string address or an array of addresses. (required)\n\n3) mode: The mode of transport to use when calculating travel distance and time. Possible values are \"driving\", \"walking\", \"bicycling\", or \"transit\". (optional)\n\n4) language: The language in which to return results. (optional)\n\n5) avoid: Features to avoid when calculating travel distance and time. Possible values are \"tolls\", \"highways\", \"ferries\", or \"indoor\". (optional)\n\n6) units: The unit system to use when displaying results. Possible values are \"metric\" or \"imperial\". (optional)\n\n7) departure_time: The departure time to use for calculating travel distance and time. This can be a string in ISO 8601 format or a JavaScript Date object. (optional)\n\n8) arrival_time: The arrival time to use for calculating travel distance and time. This can be a string in ISO 8601 format or a JavaScript Date object. (optional)\n\n9) traffic_model: The traffic prediction model to use when calculating travel distance and time. Possible values are \"best_guess\", \"optimistic\", or \"pessimistic\". (optional)\n\n10) transit_mode: The modes of transit to use when calculating travel distance and time. Possible values are \"bus\", \"subway\", \"train\", \"tram\", or \"rail\". (optional)\n\n11) transit_routing_preference: The preference for transit routes. Possible values are \"less_walking\" or \"fewer_transfers\". (optional)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://maps-api2.p.rapidapi.com/getDistance\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maps-api2.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "key1": "value",
                "key2": "value"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "Get Distance",
            "url": "https://maps-api2.p.rapidapi.com/getDistance",
            "description": "This API returns traffic-related information between the origin and destination\n\nRequest Parameters\nThe following parameters are available for use with the /getDistance endpoint:\n\n1) origins: The starting point for calculating travel distance and time. This can be a single string address or an array of addresses. (required)\n\n2) destinations: The end point for calculating travel distance and time. This can be a single string address or an array of addresses. (required)\n\n3) mode: The mode of transport to use when calculating travel distance and time. Possible values are \"driving\", \"walking\", \"bicycling\", or \"transit\". (optional)\n\n4) language: The language in which to return results. (optional)\n\n5) avoid: Features to avoid when calculating travel distance and time. Possible values are \"tolls\", \"highways\", \"ferries\", or \"indoor\". (optional)\n\n6) units: The unit system to use when displaying results. Possible values are \"metric\" or \"imperial\". (optional)\n\n7) departure_time: The departure time to use for calculating travel distance and time. This can be a string in ISO 8601 format or a JavaScript Date object. (optional)\n\n8) arrival_time: The arrival time to use for calculating travel distance and time. This can be a string in ISO 8601 format or a JavaScript Date object. (optional)\n\n9) traffic_model: The traffic prediction model to use when calculating travel distance and time. Possible values are \"best_guess\", \"optimistic\", or \"pessimistic\". (optional)\n\n10) transit_mode: The modes of transit to use when calculating travel distance and time. Possible values are \"bus\", \"subway\", \"train\", \"tram\", or \"rail\". (optional)\n\n11) transit_routing_preference: The preference for transit routes. Possible values are \"less_walking\" or \"fewer_transfers\". (optional)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://maps-api2.p.rapidapi.com/getDistance\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"maps-api2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://maps-api2.p.rapidapi.com/getDistance\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"maps-api2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        }
    ]
}