{
    "product_id": "api_56a6793e-1d79-47e6-a280-395986d3ce09",
    "tool_description": "Geofencing API provides functionality used to detect whether a coordinate is inside a circle or polygon. Accept batch requests.",
    "home_url": "https://rapidapi.com/erikilanowski-bwEUComgdqk/api/geofencing2/",
    "name": "Geofencing",
    "title": "Geofencing",
    "pricing": "FREEMIUM",
    "tool_name": "Geofencing",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 341,
        "avgSuccessRate": 100,
        "popularityScore": 8.5,
        "__typename": "Score"
    },
    "host": "geofencing2.p.rapidapi.com",
    "api_list": [
        {
            "name": "Polygon Batch",
            "url": "https://geofencing2.p.rapidapi.com/isInsidePolygonBatch",
            "description": "This endpoint returns array of true or false whether multiple coordinates are inside a polygon. A batch may contain up to 100 coordinate pairs.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsidePolygonBatch\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsidePolygonBatch\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "Polygon",
            "url": "https://geofencing2.p.rapidapi.com/isInsidePolygon",
            "description": "This endpoint returns true or false whether a coordinate is inside a polygon.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsidePolygon\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsidePolygon\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "Circle Batch",
            "url": "https://geofencing2.p.rapidapi.com/isInsideCircleBatch",
            "description": "This endpoint returns array of true or false whether multiple coordinates are inside a circle. A batch may contain up to 100 coordinate pairs.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsideCircleBatch\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsideCircleBatch\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "Distance To",
            "url": "https://geofencing2.p.rapidapi.com/distanceTo",
            "description": "This endpoint returns a distance from one coordinate to another. The distance is calculated as a straight shot and it does take Earth's curvature into account.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/distanceTo\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/distanceTo\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "Circle",
            "url": "https://geofencing2.p.rapidapi.com/isInsideCircle",
            "description": "This endpoint returns true or false whether a coordinate is inside a circle.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsideCircle\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://geofencing2.p.rapidapi.com/isInsideCircle\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"geofencing2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        }
    ]
}