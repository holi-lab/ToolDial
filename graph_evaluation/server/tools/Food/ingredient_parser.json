{
    "product_id": "api_7b73abcc-8d8a-4324-90ee-f7160a5aa5cf",
    "tool_description": "The Ingredient Parser API extracts and classifies the individual components that comprise an ingredient. The parsing algorithm utilizes C++ machine learning in the back-end to quickly parse and return the provided ingredient string as a structured JSON object.",
    "home_url": "https://rapidapi.com/parseology/api/ingredient-parser2/",
    "name": "Ingredient Parser",
    "title": "Ingredient Parser",
    "pricing": "FREEMIUM",
    "tool_name": "Ingredient Parser",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 1234,
        "avgSuccessRate": 95,
        "popularityScore": 9,
        "__typename": "Score"
    },
    "host": "ingredient-parser2.p.rapidapi.com",
    "api_list": [
        {
            "name": "/parse-ingredients",
            "url": "https://ingredient-parser2.p.rapidapi.com/parse-ingredients",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ingredient-parser2.p.rapidapi.com/parse-ingredients\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ingredient-parser2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ingredient-parser2.p.rapidapi.com/parse-ingredients\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ingredient-parser2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "The type of error. One of request_verb_error, request_parse_error, parameter_error, timeout_error, server_error,"
                            },
                            "message": {
                                "type": "string",
                                "description": "A detailed description of the error."
                            }
                        }
                    },
                    "ingredients": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "error_code": {
                                    "type": "string",
                                    "description": "The type of error. One of empty_input_error, invalid_input_error, parse_error."
                                },
                                "input": {
                                    "type": "string",
                                    "description": "The raw input string of this request."
                                },
                                "quantity": {
                                    "type": "string",
                                    "description": "The number of units or items of the ingredient."
                                },
                                "unit": {
                                    "type": "string",
                                    "description": "The unit of measurement of the ingredient. Returns non-abbreviated singular form of the unit."
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the ingredient."
                                },
                                "quantity_end": {
                                    "type": "string",
                                    "description": "The larger value if the ingredient's quantity is expressed as a range."
                                },
                                "size": {
                                    "type": "string",
                                    "description": "The amount of ingredient, but not a standard unit."
                                },
                                "suggested_amount": {
                                    "type": "string",
                                    "description": "The suggested amount for the unit of the ingredient."
                                },
                                "comments": {
                                    "type": "string",
                                    "description": "Comma separated list of additional preparation instructions or comments"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "/parse-ingredient",
            "url": "https://ingredient-parser2.p.rapidapi.com/parse-ingredient",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ingredient-parser2.p.rapidapi.com/parse-ingredient\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ingredient-parser2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ingredient-parser2.p.rapidapi.com/parse-ingredient\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ingredient-parser2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}