{
    "tool_name": "Trade Share API",
    "tool_description": "Make money by sharing profitable stock market or currency trades or by subscribing to the trades published by stock market experts and by executing these trades manually or automatically.",
    "title": "Trade Share API",
    "pricing": "FREEMIUM",
    "score": null,
    "home_url": "https://rapidapi.com/himanshukodwani-1ZgMx_9BF/api/trade-share-api/",
    "host": "trade-share-api.p.rapidapi.com",
    "api_list": [
        {
            "name": "/api/PublishSubscribeTrades/DeleteTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/DeleteTrade",
            "description": " ",
            "method": "DELETE",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/DeleteTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": "",
                "tradeID": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tradeID": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/DeleteTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/DeleteTrade",
            "description": " ",
            "method": "DELETE",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/DeleteTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": "",
                "tradeID": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tradeID": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTrade",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "channelAccessCode",
                    "type": "STRING",
                    "description": "Access code to the channel where this trade is published",
                    "default": ""
                },
                {
                    "name": "tradeID",
                    "type": "STRING",
                    "description": "Id of the trade required",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "tradeId": "",
                "tradeRef": "",
                "creationDate": "",
                "validTill": "",
                "product": 0,
                "description": "",
                "exchangeCode": "",
                "symbol": "",
                "tradeType": 0,
                "tradeCurrency": "",
                "pricePerUnit": 0,
                "priceCircuit": 0,
                "stopLossTriggerPrice": 0,
                "stopLossPrice": 0,
                "stopLossTrail": 0,
                "tradeInMultiplesOf": 0,
                "orderType": 0,
                "status": 0,
                "oneCancelsOtherTradeID": "",
                "publisherEmail": "",
                "publishOnChannel": "",
                "publisherKey": "",
                "publisherToken": ""
            },
            "headers": {},
            "schema": {
                "required": [
                    "creationDate",
                    "exchangeCode",
                    "orderType",
                    "pricePerUnit",
                    "product",
                    "publisherEmail",
                    "publishOnChannel",
                    "symbol",
                    "tradeCurrency",
                    "tradeInMultiplesOf",
                    "tradeType",
                    "validTill"
                ],
                "type": "object",
                "properties": {
                    "tradeId": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "This is used by software vendor to identify the trade. This will be created by the trade share system."
                    },
                    "tradeRef": {
                        "maxLength": 125,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "An optional identifier can be set by either the publisher or by the software that the publisher uses to identify a trade."
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date and time when the trade is created on. Universal time value must be set. Software vendor should convert and display it in local date and time if so required while showing trades and must convert local values to univeral date time while creating or updating trades.",
                        "format": "date-time"
                    },
                    "validTill": {
                        "type": "string",
                        "description": "This trade should be considered closed if ValidTill date has expired",
                        "format": "date-time"
                    },
                    "product": {
                        "type": "integer",
                        "description": "Intraday = 0, Delivery = 1",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "description": {
                        "maxLength": 500,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "So explanation by the creator if applicable"
                    },
                    "exchangeCode": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "Exchange code on which trade is expected to execute"
                    },
                    "symbol": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "Symbol of the instrument this trade is executed in"
                    },
                    "tradeType": {
                        "type": "integer",
                        "description": "Buy or Sell.  Buy =0, Sell=1",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "tradeCurrency": {
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string",
                        "description": "Currency in which this trade is expected to execute or is computed"
                    },
                    "pricePerUnit": {
                        "type": "number",
                        "description": "Price at which this trade is expected to execute. This price should be considered for cross above and cross below order types",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "priceCircuit": {
                        "type": "number",
                        "description": "Do not buy above this price if it's a buy trade and do not sell below this price if it's a sell trade",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "stopLossTriggerPrice": {
                        "type": "number",
                        "description": "Sets stop loss trigger price at this value. If market price hits this then the stop loss order is created at the stop loss price if above zero else market price is considerd as stop loss price. Zero means no stop loss set.",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "stopLossPrice": {
                        "type": "number",
                        "description": "Sets stop loss price if it's a limit type. If a stop loss price is mentioned then an exit trade order should be created at this price when triggered else exit trade must be created at the market price.",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "stopLossTrail": {
                        "type": "number",
                        "description": "Trail stop loss by this value. Every time the value of the trade increases by this value then stop loss is readjusted with the original buy and stop loss difference. Zero means no stop loss trail specified",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "tradeInMultiplesOf": {
                        "type": "integer",
                        "description": "Many trades like option trades need to be executed in the multiples of certain quantity.",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "orderType": {
                        "type": "integer",
                        "description": "Limit, Market, Price crosses above given price, Price cross below given price. Limit = 0, Market = 1, PriceCrossesAbove = 2, PriceCrossesBelow = 3",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "status": {
                        "type": "integer",
                        "description": "Draft, Active, Closed. Draft trades are created in advance and Activate signal is sent when conducive conditions occur to set it's status to Active.\r\nA trade can be created with Active status if it is ready to go. Closed trades are no longer being monitored by the publisher.\r\nDraft=0, Active=1, Closed=2, Canceled=3",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "oneCancelsOtherTradeID": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Other Trade ID for OCO (one cancels other )orders. If this trade gets executed than the other trade with the given ID if not already executed must get canceled. If other trade gets executed then this trade must be canceled."
                    },
                    "publisherEmail": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "format": "email"
                    },
                    "publishOnChannel": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "One of the creator's channel where this trade needs to be broadcasted"
                    },
                    "publisherKey": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Used for verifying publisher"
                    },
                    "publisherToken": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Used for verifying publisher"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTrade",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "channelAccessCode",
                    "type": "STRING",
                    "description": "Access code to the channel where this trade is published",
                    "default": ""
                },
                {
                    "name": "tradeID",
                    "type": "STRING",
                    "description": "Id of the trade required",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "tradeId": "",
                "tradeRef": "",
                "creationDate": "",
                "validTill": "",
                "product": 0,
                "description": "",
                "exchangeCode": "",
                "symbol": "",
                "tradeType": 0,
                "tradeCurrency": "",
                "pricePerUnit": 0,
                "priceCircuit": 0,
                "stopLossTriggerPrice": 0,
                "stopLossPrice": 0,
                "stopLossTrail": 0,
                "tradeInMultiplesOf": 0,
                "orderType": 0,
                "status": 0,
                "oneCancelsOtherTradeID": "",
                "publisherEmail": "",
                "publishOnChannel": "",
                "publisherKey": "",
                "publisherToken": ""
            },
            "headers": {},
            "schema": {
                "required": [
                    "creationDate",
                    "exchangeCode",
                    "orderType",
                    "pricePerUnit",
                    "product",
                    "publisherEmail",
                    "publishOnChannel",
                    "symbol",
                    "tradeCurrency",
                    "tradeInMultiplesOf",
                    "tradeType",
                    "validTill"
                ],
                "type": "object",
                "properties": {
                    "tradeId": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "This is used by software vendor to identify the trade. This will be created by the trade share system."
                    },
                    "tradeRef": {
                        "maxLength": 125,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "An optional identifier can be set by either the publisher or by the software that the publisher uses to identify a trade."
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date and time when the trade is created on. Universal time value must be set. Software vendor should convert and display it in local date and time if so required while showing trades and must convert local values to univeral date time while creating or updating trades.",
                        "format": "date-time"
                    },
                    "validTill": {
                        "type": "string",
                        "description": "This trade should be considered closed if ValidTill date has expired",
                        "format": "date-time"
                    },
                    "product": {
                        "type": "integer",
                        "description": "Intraday = 0, Delivery = 1",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "description": {
                        "maxLength": 500,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "So explanation by the creator if applicable"
                    },
                    "exchangeCode": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "Exchange code on which trade is expected to execute"
                    },
                    "symbol": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "Symbol of the instrument this trade is executed in"
                    },
                    "tradeType": {
                        "type": "integer",
                        "description": "Buy or Sell.  Buy =0, Sell=1",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "tradeCurrency": {
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string",
                        "description": "Currency in which this trade is expected to execute or is computed"
                    },
                    "pricePerUnit": {
                        "type": "number",
                        "description": "Price at which this trade is expected to execute. This price should be considered for cross above and cross below order types",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "priceCircuit": {
                        "type": "number",
                        "description": "Do not buy above this price if it's a buy trade and do not sell below this price if it's a sell trade",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "stopLossTriggerPrice": {
                        "type": "number",
                        "description": "Sets stop loss trigger price at this value. If market price hits this then the stop loss order is created at the stop loss price if above zero else market price is considerd as stop loss price. Zero means no stop loss set.",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "stopLossPrice": {
                        "type": "number",
                        "description": "Sets stop loss price if it's a limit type. If a stop loss price is mentioned then an exit trade order should be created at this price when triggered else exit trade must be created at the market price.",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "stopLossTrail": {
                        "type": "number",
                        "description": "Trail stop loss by this value. Every time the value of the trade increases by this value then stop loss is readjusted with the original buy and stop loss difference. Zero means no stop loss trail specified",
                        "format": "double",
                        "minimum": -1.7976931348623157e+308,
                        "maximum": 1.7976931348623157e+308
                    },
                    "tradeInMultiplesOf": {
                        "type": "integer",
                        "description": "Many trades like option trades need to be executed in the multiples of certain quantity.",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "orderType": {
                        "type": "integer",
                        "description": "Limit, Market, Price crosses above given price, Price cross below given price. Limit = 0, Market = 1, PriceCrossesAbove = 2, PriceCrossesBelow = 3",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "status": {
                        "type": "integer",
                        "description": "Draft, Active, Closed. Draft trades are created in advance and Activate signal is sent when conducive conditions occur to set it's status to Active.\r\nA trade can be created with Active status if it is ready to go. Closed trades are no longer being monitored by the publisher.\r\nDraft=0, Active=1, Closed=2, Canceled=3",
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    },
                    "oneCancelsOtherTradeID": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Other Trade ID for OCO (one cancels other )orders. If this trade gets executed than the other trade with the given ID if not already executed must get canceled. If other trade gets executed then this trade must be canceled."
                    },
                    "publisherEmail": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "format": "email"
                    },
                    "publishOnChannel": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "One of the creator's channel where this trade needs to be broadcasted"
                    },
                    "publisherKey": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Used for verifying publisher"
                    },
                    "publisherToken": {
                        "maxLength": 50,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Used for verifying publisher"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/UpdateTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/UpdateTrade",
            "description": " ",
            "method": "PUT",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/UpdateTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": "",
                "tradeID": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tradeID": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/UpdateTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/UpdateTrade",
            "description": " ",
            "method": "PUT",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/UpdateTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": "",
                "tradeID": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tradeID": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetMyActiveTrades",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetMyActiveTrades",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "Publisher token",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "Publisher key",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Publisher email address",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetMyActiveTrades\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "tradeId": "",
                    "tradeRef": "",
                    "creationDate": "",
                    "validTill": "",
                    "product": 0,
                    "description": "",
                    "exchangeCode": "",
                    "symbol": "",
                    "tradeType": 0,
                    "tradeCurrency": "",
                    "pricePerUnit": 0,
                    "priceCircuit": 0,
                    "stopLossTriggerPrice": 0,
                    "stopLossPrice": 0,
                    "stopLossTrail": 0,
                    "tradeInMultiplesOf": 0,
                    "orderType": 0,
                    "status": 0,
                    "oneCancelsOtherTradeID": "",
                    "publisherEmail": "",
                    "publishOnChannel": "",
                    "publisherKey": "",
                    "publisherToken": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "creationDate",
                        "exchangeCode",
                        "orderType",
                        "pricePerUnit",
                        "product",
                        "publisherEmail",
                        "publishOnChannel",
                        "symbol",
                        "tradeCurrency",
                        "tradeInMultiplesOf",
                        "tradeType",
                        "validTill"
                    ],
                    "type": "object",
                    "properties": {
                        "tradeId": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "This is used by software vendor to identify the trade. This will be created by the trade share system."
                        },
                        "tradeRef": {
                            "maxLength": 125,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "An optional identifier can be set by either the publisher or by the software that the publisher uses to identify a trade."
                        },
                        "creationDate": {
                            "type": "string",
                            "description": "Date and time when the trade is created on. Universal time value must be set. Software vendor should convert and display it in local date and time if so required while showing trades and must convert local values to univeral date time while creating or updating trades.",
                            "format": "date-time"
                        },
                        "validTill": {
                            "type": "string",
                            "description": "This trade should be considered closed if ValidTill date has expired",
                            "format": "date-time"
                        },
                        "product": {
                            "type": "integer",
                            "description": "Intraday = 0, Delivery = 1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "description": {
                            "maxLength": 500,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "So explanation by the creator if applicable"
                        },
                        "exchangeCode": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Exchange code on which trade is expected to execute"
                        },
                        "symbol": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Symbol of the instrument this trade is executed in"
                        },
                        "tradeType": {
                            "type": "integer",
                            "description": "Buy or Sell.  Buy =0, Sell=1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "tradeCurrency": {
                            "maxLength": 20,
                            "minLength": 1,
                            "type": "string",
                            "description": "Currency in which this trade is expected to execute or is computed"
                        },
                        "pricePerUnit": {
                            "type": "number",
                            "description": "Price at which this trade is expected to execute. This price should be considered for cross above and cross below order types",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "priceCircuit": {
                            "type": "number",
                            "description": "Do not buy above this price if it's a buy trade and do not sell below this price if it's a sell trade",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTriggerPrice": {
                            "type": "number",
                            "description": "Sets stop loss trigger price at this value. If market price hits this then the stop loss order is created at the stop loss price if above zero else market price is considerd as stop loss price. Zero means no stop loss set.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossPrice": {
                            "type": "number",
                            "description": "Sets stop loss price if it's a limit type. If a stop loss price is mentioned then an exit trade order should be created at this price when triggered else exit trade must be created at the market price.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTrail": {
                            "type": "number",
                            "description": "Trail stop loss by this value. Every time the value of the trade increases by this value then stop loss is readjusted with the original buy and stop loss difference. Zero means no stop loss trail specified",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "tradeInMultiplesOf": {
                            "type": "integer",
                            "description": "Many trades like option trades need to be executed in the multiples of certain quantity.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "orderType": {
                            "type": "integer",
                            "description": "Limit, Market, Price crosses above given price, Price cross below given price. Limit = 0, Market = 1, PriceCrossesAbove = 2, PriceCrossesBelow = 3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "status": {
                            "type": "integer",
                            "description": "Draft, Active, Closed. Draft trades are created in advance and Activate signal is sent when conducive conditions occur to set it's status to Active.\r\nA trade can be created with Active status if it is ready to go. Closed trades are no longer being monitored by the publisher.\r\nDraft=0, Active=1, Closed=2, Canceled=3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "oneCancelsOtherTradeID": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Other Trade ID for OCO (one cancels other )orders. If this trade gets executed than the other trade with the given ID if not already executed must get canceled. If other trade gets executed then this trade must be canceled."
                        },
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "format": "email"
                        },
                        "publishOnChannel": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "One of the creator's channel where this trade needs to be broadcasted"
                        },
                        "publisherKey": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        },
                        "publisherToken": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetMyActiveTrades",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetMyActiveTrades",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "Publisher token",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "Publisher key",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Publisher email address",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetMyActiveTrades\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "tradeId": "",
                    "tradeRef": "",
                    "creationDate": "",
                    "validTill": "",
                    "product": 0,
                    "description": "",
                    "exchangeCode": "",
                    "symbol": "",
                    "tradeType": 0,
                    "tradeCurrency": "",
                    "pricePerUnit": 0,
                    "priceCircuit": 0,
                    "stopLossTriggerPrice": 0,
                    "stopLossPrice": 0,
                    "stopLossTrail": 0,
                    "tradeInMultiplesOf": 0,
                    "orderType": 0,
                    "status": 0,
                    "oneCancelsOtherTradeID": "",
                    "publisherEmail": "",
                    "publishOnChannel": "",
                    "publisherKey": "",
                    "publisherToken": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "creationDate",
                        "exchangeCode",
                        "orderType",
                        "pricePerUnit",
                        "product",
                        "publisherEmail",
                        "publishOnChannel",
                        "symbol",
                        "tradeCurrency",
                        "tradeInMultiplesOf",
                        "tradeType",
                        "validTill"
                    ],
                    "type": "object",
                    "properties": {
                        "tradeId": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "This is used by software vendor to identify the trade. This will be created by the trade share system."
                        },
                        "tradeRef": {
                            "maxLength": 125,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "An optional identifier can be set by either the publisher or by the software that the publisher uses to identify a trade."
                        },
                        "creationDate": {
                            "type": "string",
                            "description": "Date and time when the trade is created on. Universal time value must be set. Software vendor should convert and display it in local date and time if so required while showing trades and must convert local values to univeral date time while creating or updating trades.",
                            "format": "date-time"
                        },
                        "validTill": {
                            "type": "string",
                            "description": "This trade should be considered closed if ValidTill date has expired",
                            "format": "date-time"
                        },
                        "product": {
                            "type": "integer",
                            "description": "Intraday = 0, Delivery = 1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "description": {
                            "maxLength": 500,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "So explanation by the creator if applicable"
                        },
                        "exchangeCode": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Exchange code on which trade is expected to execute"
                        },
                        "symbol": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Symbol of the instrument this trade is executed in"
                        },
                        "tradeType": {
                            "type": "integer",
                            "description": "Buy or Sell.  Buy =0, Sell=1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "tradeCurrency": {
                            "maxLength": 20,
                            "minLength": 1,
                            "type": "string",
                            "description": "Currency in which this trade is expected to execute or is computed"
                        },
                        "pricePerUnit": {
                            "type": "number",
                            "description": "Price at which this trade is expected to execute. This price should be considered for cross above and cross below order types",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "priceCircuit": {
                            "type": "number",
                            "description": "Do not buy above this price if it's a buy trade and do not sell below this price if it's a sell trade",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTriggerPrice": {
                            "type": "number",
                            "description": "Sets stop loss trigger price at this value. If market price hits this then the stop loss order is created at the stop loss price if above zero else market price is considerd as stop loss price. Zero means no stop loss set.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossPrice": {
                            "type": "number",
                            "description": "Sets stop loss price if it's a limit type. If a stop loss price is mentioned then an exit trade order should be created at this price when triggered else exit trade must be created at the market price.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTrail": {
                            "type": "number",
                            "description": "Trail stop loss by this value. Every time the value of the trade increases by this value then stop loss is readjusted with the original buy and stop loss difference. Zero means no stop loss trail specified",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "tradeInMultiplesOf": {
                            "type": "integer",
                            "description": "Many trades like option trades need to be executed in the multiples of certain quantity.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "orderType": {
                            "type": "integer",
                            "description": "Limit, Market, Price crosses above given price, Price cross below given price. Limit = 0, Market = 1, PriceCrossesAbove = 2, PriceCrossesBelow = 3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "status": {
                            "type": "integer",
                            "description": "Draft, Active, Closed. Draft trades are created in advance and Activate signal is sent when conducive conditions occur to set it's status to Active.\r\nA trade can be created with Active status if it is ready to go. Closed trades are no longer being monitored by the publisher.\r\nDraft=0, Active=1, Closed=2, Canceled=3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "oneCancelsOtherTradeID": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Other Trade ID for OCO (one cancels other )orders. If this trade gets executed than the other trade with the given ID if not already executed must get canceled. If other trade gets executed then this trade must be canceled."
                        },
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "format": "email"
                        },
                        "publishOnChannel": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "One of the creator's channel where this trade needs to be broadcasted"
                        },
                        "publisherKey": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        },
                        "publisherToken": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetActiveTrades",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetActiveTrades",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "channelAccessCode",
                    "type": "STRING",
                    "description": "Access code that publisher might have given to the subscriber for accessing his trades",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Publisher's email",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetActiveTrades\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "tradeId": "",
                    "tradeRef": "",
                    "creationDate": "",
                    "validTill": "",
                    "product": 0,
                    "description": "",
                    "exchangeCode": "",
                    "symbol": "",
                    "tradeType": 0,
                    "tradeCurrency": "",
                    "pricePerUnit": 0,
                    "priceCircuit": 0,
                    "stopLossTriggerPrice": 0,
                    "stopLossPrice": 0,
                    "stopLossTrail": 0,
                    "tradeInMultiplesOf": 0,
                    "orderType": 0,
                    "status": 0,
                    "oneCancelsOtherTradeID": "",
                    "publisherEmail": "",
                    "publishOnChannel": "",
                    "publisherKey": "",
                    "publisherToken": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "creationDate",
                        "exchangeCode",
                        "orderType",
                        "pricePerUnit",
                        "product",
                        "publisherEmail",
                        "publishOnChannel",
                        "symbol",
                        "tradeCurrency",
                        "tradeInMultiplesOf",
                        "tradeType",
                        "validTill"
                    ],
                    "type": "object",
                    "properties": {
                        "tradeId": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "This is used by software vendor to identify the trade. This will be created by the trade share system."
                        },
                        "tradeRef": {
                            "maxLength": 125,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "An optional identifier can be set by either the publisher or by the software that the publisher uses to identify a trade."
                        },
                        "creationDate": {
                            "type": "string",
                            "description": "Date and time when the trade is created on. Universal time value must be set. Software vendor should convert and display it in local date and time if so required while showing trades and must convert local values to univeral date time while creating or updating trades.",
                            "format": "date-time"
                        },
                        "validTill": {
                            "type": "string",
                            "description": "This trade should be considered closed if ValidTill date has expired",
                            "format": "date-time"
                        },
                        "product": {
                            "type": "integer",
                            "description": "Intraday = 0, Delivery = 1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "description": {
                            "maxLength": 500,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "So explanation by the creator if applicable"
                        },
                        "exchangeCode": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Exchange code on which trade is expected to execute"
                        },
                        "symbol": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Symbol of the instrument this trade is executed in"
                        },
                        "tradeType": {
                            "type": "integer",
                            "description": "Buy or Sell.  Buy =0, Sell=1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "tradeCurrency": {
                            "maxLength": 20,
                            "minLength": 1,
                            "type": "string",
                            "description": "Currency in which this trade is expected to execute or is computed"
                        },
                        "pricePerUnit": {
                            "type": "number",
                            "description": "Price at which this trade is expected to execute. This price should be considered for cross above and cross below order types",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "priceCircuit": {
                            "type": "number",
                            "description": "Do not buy above this price if it's a buy trade and do not sell below this price if it's a sell trade",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTriggerPrice": {
                            "type": "number",
                            "description": "Sets stop loss trigger price at this value. If market price hits this then the stop loss order is created at the stop loss price if above zero else market price is considerd as stop loss price. Zero means no stop loss set.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossPrice": {
                            "type": "number",
                            "description": "Sets stop loss price if it's a limit type. If a stop loss price is mentioned then an exit trade order should be created at this price when triggered else exit trade must be created at the market price.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTrail": {
                            "type": "number",
                            "description": "Trail stop loss by this value. Every time the value of the trade increases by this value then stop loss is readjusted with the original buy and stop loss difference. Zero means no stop loss trail specified",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "tradeInMultiplesOf": {
                            "type": "integer",
                            "description": "Many trades like option trades need to be executed in the multiples of certain quantity.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "orderType": {
                            "type": "integer",
                            "description": "Limit, Market, Price crosses above given price, Price cross below given price. Limit = 0, Market = 1, PriceCrossesAbove = 2, PriceCrossesBelow = 3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "status": {
                            "type": "integer",
                            "description": "Draft, Active, Closed. Draft trades are created in advance and Activate signal is sent when conducive conditions occur to set it's status to Active.\r\nA trade can be created with Active status if it is ready to go. Closed trades are no longer being monitored by the publisher.\r\nDraft=0, Active=1, Closed=2, Canceled=3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "oneCancelsOtherTradeID": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Other Trade ID for OCO (one cancels other )orders. If this trade gets executed than the other trade with the given ID if not already executed must get canceled. If other trade gets executed then this trade must be canceled."
                        },
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "format": "email"
                        },
                        "publishOnChannel": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "One of the creator's channel where this trade needs to be broadcasted"
                        },
                        "publisherKey": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        },
                        "publisherToken": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetActiveTrades",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetActiveTrades",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "channelAccessCode",
                    "type": "STRING",
                    "description": "Access code that publisher might have given to the subscriber for accessing his trades",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Publisher's email",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetActiveTrades\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "tradeId": "",
                    "tradeRef": "",
                    "creationDate": "",
                    "validTill": "",
                    "product": 0,
                    "description": "",
                    "exchangeCode": "",
                    "symbol": "",
                    "tradeType": 0,
                    "tradeCurrency": "",
                    "pricePerUnit": 0,
                    "priceCircuit": 0,
                    "stopLossTriggerPrice": 0,
                    "stopLossPrice": 0,
                    "stopLossTrail": 0,
                    "tradeInMultiplesOf": 0,
                    "orderType": 0,
                    "status": 0,
                    "oneCancelsOtherTradeID": "",
                    "publisherEmail": "",
                    "publishOnChannel": "",
                    "publisherKey": "",
                    "publisherToken": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "creationDate",
                        "exchangeCode",
                        "orderType",
                        "pricePerUnit",
                        "product",
                        "publisherEmail",
                        "publishOnChannel",
                        "symbol",
                        "tradeCurrency",
                        "tradeInMultiplesOf",
                        "tradeType",
                        "validTill"
                    ],
                    "type": "object",
                    "properties": {
                        "tradeId": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "This is used by software vendor to identify the trade. This will be created by the trade share system."
                        },
                        "tradeRef": {
                            "maxLength": 125,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "An optional identifier can be set by either the publisher or by the software that the publisher uses to identify a trade."
                        },
                        "creationDate": {
                            "type": "string",
                            "description": "Date and time when the trade is created on. Universal time value must be set. Software vendor should convert and display it in local date and time if so required while showing trades and must convert local values to univeral date time while creating or updating trades.",
                            "format": "date-time"
                        },
                        "validTill": {
                            "type": "string",
                            "description": "This trade should be considered closed if ValidTill date has expired",
                            "format": "date-time"
                        },
                        "product": {
                            "type": "integer",
                            "description": "Intraday = 0, Delivery = 1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "description": {
                            "maxLength": 500,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "So explanation by the creator if applicable"
                        },
                        "exchangeCode": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Exchange code on which trade is expected to execute"
                        },
                        "symbol": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Symbol of the instrument this trade is executed in"
                        },
                        "tradeType": {
                            "type": "integer",
                            "description": "Buy or Sell.  Buy =0, Sell=1",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "tradeCurrency": {
                            "maxLength": 20,
                            "minLength": 1,
                            "type": "string",
                            "description": "Currency in which this trade is expected to execute or is computed"
                        },
                        "pricePerUnit": {
                            "type": "number",
                            "description": "Price at which this trade is expected to execute. This price should be considered for cross above and cross below order types",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "priceCircuit": {
                            "type": "number",
                            "description": "Do not buy above this price if it's a buy trade and do not sell below this price if it's a sell trade",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTriggerPrice": {
                            "type": "number",
                            "description": "Sets stop loss trigger price at this value. If market price hits this then the stop loss order is created at the stop loss price if above zero else market price is considerd as stop loss price. Zero means no stop loss set.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossPrice": {
                            "type": "number",
                            "description": "Sets stop loss price if it's a limit type. If a stop loss price is mentioned then an exit trade order should be created at this price when triggered else exit trade must be created at the market price.",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "stopLossTrail": {
                            "type": "number",
                            "description": "Trail stop loss by this value. Every time the value of the trade increases by this value then stop loss is readjusted with the original buy and stop loss difference. Zero means no stop loss trail specified",
                            "format": "double",
                            "minimum": -1.7976931348623157e+308,
                            "maximum": 1.7976931348623157e+308
                        },
                        "tradeInMultiplesOf": {
                            "type": "integer",
                            "description": "Many trades like option trades need to be executed in the multiples of certain quantity.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "orderType": {
                            "type": "integer",
                            "description": "Limit, Market, Price crosses above given price, Price cross below given price. Limit = 0, Market = 1, PriceCrossesAbove = 2, PriceCrossesBelow = 3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "status": {
                            "type": "integer",
                            "description": "Draft, Active, Closed. Draft trades are created in advance and Activate signal is sent when conducive conditions occur to set it's status to Active.\r\nA trade can be created with Active status if it is ready to go. Closed trades are no longer being monitored by the publisher.\r\nDraft=0, Active=1, Closed=2, Canceled=3",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "oneCancelsOtherTradeID": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Other Trade ID for OCO (one cancels other )orders. If this trade gets executed than the other trade with the given ID if not already executed must get canceled. If other trade gets executed then this trade must be canceled."
                        },
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "format": "email"
                        },
                        "publishOnChannel": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "One of the creator's channel where this trade needs to be broadcasted"
                        },
                        "publisherKey": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        },
                        "publisherToken": {
                            "maxLength": 50,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Used for verifying publisher"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetTradeSignals",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTradeSignals",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTradeSignals\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "signalSentOn": "",
                    "tradeID": "",
                    "signal": 0,
                    "description": "",
                    "increaseValidityByDays": 0
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "signal",
                        "signalSentOn",
                        "tradeID"
                    ],
                    "type": "object",
                    "properties": {
                        "signalSentOn": {
                            "type": "string",
                            "description": "This is the time when the signal is sent to the server. This value will be set again at the server side upon receiving the signal.",
                            "format": "date-time"
                        },
                        "tradeID": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Target trade id for which this signal is being sent"
                        },
                        "signal": {
                            "type": "integer",
                            "description": "Activate = 0, Buy = 1, Sell = 2, Hold = 3 , DoNotEnterNow=4, Close =5, Self=6, IncreaseValidity=7, Exit=8 \r\nActivate signal will set the draft trade status to Active. \r\nClose will set the trade status to Closed if the trade is Active. \r\nClose signal will set the trade status to Canceled if it's present status is Draft.\r\nIncreaseValidity will increase the validity of the trade by the number of days specified. \r\nSelf signal signifies that the trade should be managed by the subscriber eg if it's an invetment trade and sets the trade status to Closed.\r\nExit signal means that one should exit the trade weather target achieved or not.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "description": {
                            "maxLength": 150,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "A brief description about this signal."
                        },
                        "increaseValidityByDays": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "description": "This is required only if increase validity signal is sent.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/GetTradeSignals",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTradeSignals",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/GetTradeSignals\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "signalSentOn": "",
                    "tradeID": "",
                    "signal": 0,
                    "description": "",
                    "increaseValidityByDays": 0
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "signal",
                        "signalSentOn",
                        "tradeID"
                    ],
                    "type": "object",
                    "properties": {
                        "signalSentOn": {
                            "type": "string",
                            "description": "This is the time when the signal is sent to the server. This value will be set again at the server side upon receiving the signal.",
                            "format": "date-time"
                        },
                        "tradeID": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Target trade id for which this signal is being sent"
                        },
                        "signal": {
                            "type": "integer",
                            "description": "Activate = 0, Buy = 1, Sell = 2, Hold = 3 , DoNotEnterNow=4, Close =5, Self=6, IncreaseValidity=7, Exit=8 \r\nActivate signal will set the draft trade status to Active. \r\nClose will set the trade status to Closed if the trade is Active. \r\nClose signal will set the trade status to Canceled if it's present status is Draft.\r\nIncreaseValidity will increase the validity of the trade by the number of days specified. \r\nSelf signal signifies that the trade should be managed by the subscriber eg if it's an invetment trade and sets the trade status to Closed.\r\nExit signal means that one should exit the trade weather target achieved or not.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        },
                        "description": {
                            "maxLength": 150,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "A brief description about this signal."
                        },
                        "increaseValidityByDays": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "description": "This is required only if increase validity signal is sent.",
                            "format": "int32",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/SetTradeSignal",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/SetTradeSignal",
            "description": " ",
            "method": "PUT",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/SetTradeSignal\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "signalTime": "",
                "success": true,
                "message": "",
                "signalID": 0
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "signalTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "signalID": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/SetTradeSignal",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/SetTradeSignal",
            "description": " ",
            "method": "PUT",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/SetTradeSignal\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "signalTime": "",
                "success": true,
                "message": "",
                "signalID": 0
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "signalTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "signalID": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/CreateTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/CreateTrade",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/CreateTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": "",
                "tradeID": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tradeID": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/CreateTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/CreateTrade",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/CreateTrade\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": "",
                "tradeID": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tradeID": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/ExpireAllAccessCodes",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/ExpireAllAccessCodes",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ExpireAllAccessCodes\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/ExpireAllAccessCodes",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/ExpireAllAccessCodes",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ExpireAllAccessCodes\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/SearchPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/SearchPublisher",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "recordsPerPage",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "searchTerm",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "pageNumber",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SearchPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "publisherEmail": "",
                    "publisherName": "",
                    "description": "",
                    "phoneNumber": "",
                    "address": "",
                    "country": "",
                    "targetExchangesCSV": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "address",
                        "country",
                        "phoneNumber",
                        "publisherEmail",
                        "publisherName",
                        "targetExchangesCSV"
                    ],
                    "type": "object",
                    "properties": {
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's email verifies publisher's identity. It is recommended a publisher uses an email address that he would exclusively devote to sharing his trades.",
                            "format": "email"
                        },
                        "publisherName": {
                            "maxLength": 100,
                            "minLength": 1,
                            "type": "string",
                            "description": "Name of the publisher"
                        },
                        "description": {
                            "maxLength": 5000,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "A publisher can describe himself, his work and achievements here"
                        },
                        "phoneNumber": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "A phone number where a publisher may be approached or where he provides support."
                        },
                        "address": {
                            "maxLength": 500,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's address"
                        },
                        "country": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's country"
                        },
                        "targetExchangesCSV": {
                            "maxLength": 1000,
                            "minLength": 1,
                            "type": "string",
                            "description": "A comma separated list of exchanges for which the publisher publishes his trades for. This field could be used by subscriber's to search for publishers who publish trades targeted to exchanges these subscribers wish to trade on"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/Management/SearchPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/SearchPublisher",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "recordsPerPage",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "searchTerm",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "pageNumber",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SearchPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "publisherEmail": "",
                    "publisherName": "",
                    "description": "",
                    "phoneNumber": "",
                    "address": "",
                    "country": "",
                    "targetExchangesCSV": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "address",
                        "country",
                        "phoneNumber",
                        "publisherEmail",
                        "publisherName",
                        "targetExchangesCSV"
                    ],
                    "type": "object",
                    "properties": {
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's email verifies publisher's identity. It is recommended a publisher uses an email address that he would exclusively devote to sharing his trades.",
                            "format": "email"
                        },
                        "publisherName": {
                            "maxLength": 100,
                            "minLength": 1,
                            "type": "string",
                            "description": "Name of the publisher"
                        },
                        "description": {
                            "maxLength": 5000,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "A publisher can describe himself, his work and achievements here"
                        },
                        "phoneNumber": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "A phone number where a publisher may be approached or where he provides support."
                        },
                        "address": {
                            "maxLength": 500,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's address"
                        },
                        "country": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's country"
                        },
                        "targetExchangesCSV": {
                            "maxLength": 1000,
                            "minLength": 1,
                            "type": "string",
                            "description": "A comma separated list of exchanges for which the publisher publishes his trades for. This field could be used by subscriber's to search for publishers who publish trades targeted to exchanges these subscribers wish to trade on"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/Management/GetCountOfAllPublishersByCountry",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetCountOfAllPublishersByCountry",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "countryName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetCountOfAllPublishersByCountry\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": -2147483648,
                "maximum": 2147483647
            }
        },
        {
            "name": "/api/Management/GetCountOfAllPublishersByCountry",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetCountOfAllPublishersByCountry",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "countryName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetCountOfAllPublishersByCountry\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": -2147483648,
                "maximum": 2147483647
            }
        },
        {
            "name": "/api/Management/GetCountSearchPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetCountSearchPublisher",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "searchTerm",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetCountSearchPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": -2147483648,
                "maximum": 2147483647
            }
        },
        {
            "name": "/api/Management/GetCountSearchPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetCountSearchPublisher",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "searchTerm",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetCountSearchPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": -2147483648,
                "maximum": 2147483647
            }
        },
        {
            "name": "/api/Management/UnBlockAccessCode",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/UnBlockAccessCode",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "accessCodeToBlock",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/UnBlockAccessCode\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/UnBlockAccessCode",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/UnBlockAccessCode",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "accessCodeToBlock",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/UnBlockAccessCode\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/BlockAccessCode",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/BlockAccessCode",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "accessCodeToBlock",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/BlockAccessCode\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/BlockAccessCode",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/BlockAccessCode",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "accessCodeToBlock",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/BlockAccessCode\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/GetPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetPublisher",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "publisherEmail": "",
                "publisherName": "",
                "description": "",
                "phoneNumber": "",
                "address": "",
                "country": "",
                "targetExchangesCSV": ""
            },
            "headers": {},
            "schema": {
                "required": [
                    "address",
                    "country",
                    "phoneNumber",
                    "publisherEmail",
                    "publisherName",
                    "targetExchangesCSV"
                ],
                "type": "object",
                "properties": {
                    "publisherEmail": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "Publisher's email verifies publisher's identity. It is recommended a publisher uses an email address that he would exclusively devote to sharing his trades.",
                        "format": "email"
                    },
                    "publisherName": {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of the publisher"
                    },
                    "description": {
                        "maxLength": 5000,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A publisher can describe himself, his work and achievements here"
                    },
                    "phoneNumber": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "A phone number where a publisher may be approached or where he provides support."
                    },
                    "address": {
                        "maxLength": 500,
                        "minLength": 1,
                        "type": "string",
                        "description": "Publisher's address"
                    },
                    "country": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "Publisher's country"
                    },
                    "targetExchangesCSV": {
                        "maxLength": 1000,
                        "minLength": 1,
                        "type": "string",
                        "description": "A comma separated list of exchanges for which the publisher publishes his trades for. This field could be used by subscriber's to search for publishers who publish trades targeted to exchanges these subscribers wish to trade on"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/GetPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetPublisher",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "publisherEmail": "",
                "publisherName": "",
                "description": "",
                "phoneNumber": "",
                "address": "",
                "country": "",
                "targetExchangesCSV": ""
            },
            "headers": {},
            "schema": {
                "required": [
                    "address",
                    "country",
                    "phoneNumber",
                    "publisherEmail",
                    "publisherName",
                    "targetExchangesCSV"
                ],
                "type": "object",
                "properties": {
                    "publisherEmail": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "Publisher's email verifies publisher's identity. It is recommended a publisher uses an email address that he would exclusively devote to sharing his trades.",
                        "format": "email"
                    },
                    "publisherName": {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of the publisher"
                    },
                    "description": {
                        "maxLength": 5000,
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A publisher can describe himself, his work and achievements here"
                    },
                    "phoneNumber": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "A phone number where a publisher may be approached or where he provides support."
                    },
                    "address": {
                        "maxLength": 500,
                        "minLength": 1,
                        "type": "string",
                        "description": "Publisher's address"
                    },
                    "country": {
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "Publisher's country"
                    },
                    "targetExchangesCSV": {
                        "maxLength": 1000,
                        "minLength": 1,
                        "type": "string",
                        "description": "A comma separated list of exchanges for which the publisher publishes his trades for. This field could be used by subscriber's to search for publishers who publish trades targeted to exchanges these subscribers wish to trade on"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/SetChannelAccessKey",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/SetChannelAccessKey",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "validFrom",
                    "type": "STRING",
                    "description": "Access key is valid from date",
                    "default": ""
                },
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "Name of the channel already created by the publisher",
                    "default": ""
                },
                {
                    "name": "publisherEmailAddress",
                    "type": "STRING",
                    "description": "Email address of the registered and verified publisher",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "Publisher token which is emailed to publisher at the time of signup or when reset is requested. Used for authentication of the publisher",
                    "default": ""
                },
                {
                    "name": "validTill",
                    "type": "STRING",
                    "description": "Access key is valid till date",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "Publisher key which is emailed to publisher at the time of signup or when reset is requested. Used for authentication of the publisher",
                    "default": ""
                },
                {
                    "name": "channelAccessKey",
                    "type": "STRING",
                    "description": "New key that publisher wishes to create for the channel. A channel can have multiple access keys with different validities",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SetChannelAccessKey\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/SetChannelAccessKey",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/SetChannelAccessKey",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "validFrom",
                    "type": "STRING",
                    "description": "Access key is valid from date",
                    "default": ""
                },
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "Name of the channel already created by the publisher",
                    "default": ""
                },
                {
                    "name": "publisherEmailAddress",
                    "type": "STRING",
                    "description": "Email address of the registered and verified publisher",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "Publisher token which is emailed to publisher at the time of signup or when reset is requested. Used for authentication of the publisher",
                    "default": ""
                },
                {
                    "name": "validTill",
                    "type": "STRING",
                    "description": "Access key is valid till date",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "Publisher key which is emailed to publisher at the time of signup or when reset is requested. Used for authentication of the publisher",
                    "default": ""
                },
                {
                    "name": "channelAccessKey",
                    "type": "STRING",
                    "description": "New key that publisher wishes to create for the channel. A channel can have multiple access keys with different validities",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SetChannelAccessKey\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/VerifyPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/VerifyPublisher",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "emailAddress",
                    "type": "STRING",
                    "description": "Email address of the publisher that needs to be verifed",
                    "default": ""
                },
                {
                    "name": "verificationToken",
                    "type": "STRING",
                    "description": "Verification token received through email when signed up",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/VerifyPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": true,
            "headers": {},
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/Management/VerifyPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/VerifyPublisher",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "emailAddress",
                    "type": "STRING",
                    "description": "Email address of the publisher that needs to be verifed",
                    "default": ""
                },
                {
                    "name": "verificationToken",
                    "type": "STRING",
                    "description": "Verification token received through email when signed up",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/VerifyPublisher\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": true,
            "headers": {},
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/Management/EmailMyChannelList",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelList",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelList\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/EmailMyChannelList",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelList",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelList\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/GetAllPublishersByCountry",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetAllPublishersByCountry",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "recordsPerPage",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "countryName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "pageNumber",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetAllPublishersByCountry\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "publisherEmail": "",
                    "publisherName": "",
                    "description": "",
                    "phoneNumber": "",
                    "address": "",
                    "country": "",
                    "targetExchangesCSV": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "address",
                        "country",
                        "phoneNumber",
                        "publisherEmail",
                        "publisherName",
                        "targetExchangesCSV"
                    ],
                    "type": "object",
                    "properties": {
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's email verifies publisher's identity. It is recommended a publisher uses an email address that he would exclusively devote to sharing his trades.",
                            "format": "email"
                        },
                        "publisherName": {
                            "maxLength": 100,
                            "minLength": 1,
                            "type": "string",
                            "description": "Name of the publisher"
                        },
                        "description": {
                            "maxLength": 5000,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "A publisher can describe himself, his work and achievements here"
                        },
                        "phoneNumber": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "A phone number where a publisher may be approached or where he provides support."
                        },
                        "address": {
                            "maxLength": 500,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's address"
                        },
                        "country": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's country"
                        },
                        "targetExchangesCSV": {
                            "maxLength": 1000,
                            "minLength": 1,
                            "type": "string",
                            "description": "A comma separated list of exchanges for which the publisher publishes his trades for. This field could be used by subscriber's to search for publishers who publish trades targeted to exchanges these subscribers wish to trade on"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/Management/GetAllPublishersByCountry",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetAllPublishersByCountry",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "recordsPerPage",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "countryName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "pageNumber",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetAllPublishersByCountry\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "publisherEmail": "",
                    "publisherName": "",
                    "description": "",
                    "phoneNumber": "",
                    "address": "",
                    "country": "",
                    "targetExchangesCSV": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "address",
                        "country",
                        "phoneNumber",
                        "publisherEmail",
                        "publisherName",
                        "targetExchangesCSV"
                    ],
                    "type": "object",
                    "properties": {
                        "publisherEmail": {
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's email verifies publisher's identity. It is recommended a publisher uses an email address that he would exclusively devote to sharing his trades.",
                            "format": "email"
                        },
                        "publisherName": {
                            "maxLength": 100,
                            "minLength": 1,
                            "type": "string",
                            "description": "Name of the publisher"
                        },
                        "description": {
                            "maxLength": 5000,
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "A publisher can describe himself, his work and achievements here"
                        },
                        "phoneNumber": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "A phone number where a publisher may be approached or where he provides support."
                        },
                        "address": {
                            "maxLength": 500,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's address"
                        },
                        "country": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string",
                            "description": "Publisher's country"
                        },
                        "targetExchangesCSV": {
                            "maxLength": 1000,
                            "minLength": 1,
                            "type": "string",
                            "description": "A comma separated list of exchanges for which the publisher publishes his trades for. This field could be used by subscriber's to search for publishers who publish trades targeted to exchanges these subscribers wish to trade on"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/Management/PublisherSignup",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/PublisherSignup",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/PublisherSignup\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "/api/Management/PublisherSignup",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/PublisherSignup",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/PublisherSignup\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "/api/Management/SendNewKeyGenerationRequestToken",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/SendNewKeyGenerationRequestToken",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Email address of the publisher where this request token will be sent",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SendNewKeyGenerationRequestToken\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "get": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array"
                    },
                    "errors": {
                        "type": "array"
                    },
                    "results": {
                        "type": "integer"
                    },
                    "response": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "/api/Management/ SendVerificationToken",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/ SendVerificationToken",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Email address of the publisher used for signing up",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ SendVerificationToken\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": true,
            "headers": {},
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/Management/ SendVerificationToken",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/ SendVerificationToken",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Email address of the publisher used for signing up",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ SendVerificationToken\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": true,
            "headers": {},
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/Management/CreateChannel",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/CreateChannel",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/CreateChannel\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/CreateChannel",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/CreateChannel",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/CreateChannel\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/EmailMyChannelAccessCodes",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelAccessCodes",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelAccessCodes\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/EmailMyChannelAccessCodes",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelAccessCodes",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelAccessCodes\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/GetPublisherChannels",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetPublisherChannels",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetPublisherChannels\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "publisherEmail": "",
                    "channelName": "",
                    "description": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "channelName"
                    ],
                    "type": "object",
                    "properties": {
                        "publisherEmail": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "channelName": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string"
                        },
                        "description": {
                            "maxLength": 1000,
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/Management/GetPublisherChannels",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GetPublisherChannels",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GetPublisherChannels\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "publisherEmail": "",
                    "channelName": "",
                    "description": ""
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "required": [
                        "channelName"
                    ],
                    "type": "object",
                    "properties": {
                        "publisherEmail": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "channelName": {
                            "maxLength": 50,
                            "minLength": 1,
                            "type": "string"
                        },
                        "description": {
                            "maxLength": 1000,
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "name": "/api/Management/RemoveChannel",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/RemoveChannel",
            "description": " ",
            "method": "DELETE",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmailAddress",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/RemoveChannel\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/RemoveChannel",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/RemoveChannel",
            "description": " ",
            "method": "DELETE",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmailAddress",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/RemoveChannel\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "success": true,
                "message": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/GenerateNewKeyAndTokenPair",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GenerateNewKeyAndTokenPair",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Publisher's email address",
                    "default": ""
                },
                {
                    "name": "requestToken",
                    "type": "STRING",
                    "description": "Request token received through email",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GenerateNewKeyAndTokenPair\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": true,
            "headers": {},
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/Management/GenerateNewKeyAndTokenPair",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GenerateNewKeyAndTokenPair",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Publisher's email address",
                    "default": ""
                },
                {
                    "name": "requestToken",
                    "type": "STRING",
                    "description": "Request token received through email",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GenerateNewKeyAndTokenPair\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": true,
            "headers": {},
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/PublishSubscribeTrades/CreateTrade",
            "url": "https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/CreateTrade",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/CreateTrade\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/PublishSubscribeTrades/CreateTrade\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tradeID": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/ExpireAllAccessCodes",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/ExpireAllAccessCodes",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ExpireAllAccessCodes\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ExpireAllAccessCodes\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/UnBlockAccessCode",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/UnBlockAccessCode",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "accessCodeToBlock",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/UnBlockAccessCode\"\nquerystring = {\"accessCodeToBlock\": \"\", \"publisherEmail\": \"\", \"publisherKey\": \"\", \"publisherToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/UnBlockAccessCode\"\nquerystring = {\"accessCodeToBlock\": \"\", \"publisherEmail\": \"\", \"publisherKey\": \"\", \"publisherToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/BlockAccessCode",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/BlockAccessCode",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "accessCodeToBlock",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/BlockAccessCode\"\nquerystring = {\"publisherToken\": \"\", \"publisherEmail\": \"\", \"publisherKey\": \"\", \"accessCodeToBlock\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/BlockAccessCode\"\nquerystring = {\"publisherToken\": \"\", \"publisherEmail\": \"\", \"publisherKey\": \"\", \"accessCodeToBlock\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/SetChannelAccessKey",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/SetChannelAccessKey",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "validFrom",
                    "type": "STRING",
                    "description": "Access key is valid from date",
                    "default": ""
                },
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "Name of the channel already created by the publisher",
                    "default": ""
                },
                {
                    "name": "publisherEmailAddress",
                    "type": "STRING",
                    "description": "Email address of the registered and verified publisher",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "Publisher token which is emailed to publisher at the time of signup or when reset is requested. Used for authentication of the publisher",
                    "default": ""
                },
                {
                    "name": "validTill",
                    "type": "STRING",
                    "description": "Access key is valid till date",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "Publisher key which is emailed to publisher at the time of signup or when reset is requested. Used for authentication of the publisher",
                    "default": ""
                },
                {
                    "name": "channelAccessKey",
                    "type": "STRING",
                    "description": "New key that publisher wishes to create for the channel. A channel can have multiple access keys with different validities",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SetChannelAccessKey\"\nquerystring = {\"validFrom\": \"\", \"channelName\": \"\", \"publisherEmailAddress\": \"\", \"publisherToken\": \"\", \"validTill\": \"\", \"publisherKey\": \"\", \"channelAccessKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SetChannelAccessKey\"\nquerystring = {\"validFrom\": \"\", \"channelName\": \"\", \"publisherEmailAddress\": \"\", \"publisherToken\": \"\", \"validTill\": \"\", \"publisherKey\": \"\", \"channelAccessKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/VerifyPublisher",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/VerifyPublisher",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "emailAddress",
                    "type": "STRING",
                    "description": "Email address of the publisher that needs to be verifed",
                    "default": ""
                },
                {
                    "name": "verificationToken",
                    "type": "STRING",
                    "description": "Verification token received through email when signed up",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/VerifyPublisher\"\nquerystring = {\"emailAddress\": \"\", \"verificationToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/VerifyPublisher\"\nquerystring = {\"emailAddress\": \"\", \"verificationToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/Management/EmailMyChannelList",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelList",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelList\"\nquerystring = {\"publisherToken\": \"\", \"publisherKey\": \"\", \"publisherEmail\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelList\"\nquerystring = {\"publisherToken\": \"\", \"publisherKey\": \"\", \"publisherEmail\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/PublisherSignup",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/PublisherSignup",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/PublisherSignup\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/PublisherSignup\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "/api/Management/SendNewKeyGenerationRequestToken",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/SendNewKeyGenerationRequestToken",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Email address of the publisher where this request token will be sent",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SendNewKeyGenerationRequestToken\"\nquerystring = {\"publisherEmail\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/SendNewKeyGenerationRequestToken\"\nquerystring = {\"publisherEmail\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "get": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array"
                    },
                    "errors": {
                        "type": "array"
                    },
                    "results": {
                        "type": "integer"
                    },
                    "response": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "/api/Management/ SendVerificationToken",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/ SendVerificationToken",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Email address of the publisher used for signing up",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ SendVerificationToken\"\nquerystring = {\"publisherEmail\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/ SendVerificationToken\"\nquerystring = {\"publisherEmail\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "boolean"
            }
        },
        {
            "name": "/api/Management/CreateChannel",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/CreateChannel",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/CreateChannel\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/CreateChannel\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/EmailMyChannelAccessCodes",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelAccessCodes",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherKey",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "channelName",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "publisherToken",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelAccessCodes\"\nquerystring = {\"publisherEmail\": \"\", \"publisherKey\": \"\", \"channelName\": \"\", \"publisherToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/EmailMyChannelAccessCodes\"\nquerystring = {\"publisherEmail\": \"\", \"publisherKey\": \"\", \"channelName\": \"\", \"publisherToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "name": "/api/Management/GenerateNewKeyAndTokenPair",
            "url": "https://trade-share-api.p.rapidapi.com/api/Management/GenerateNewKeyAndTokenPair",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "publisherEmail",
                    "type": "STRING",
                    "description": "Publisher's email address",
                    "default": ""
                },
                {
                    "name": "requestToken",
                    "type": "STRING",
                    "description": "Request token received through email",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GenerateNewKeyAndTokenPair\"\nquerystring = {\"publisherEmail\": \"\", \"requestToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://trade-share-api.p.rapidapi.com/api/Management/GenerateNewKeyAndTokenPair\"\nquerystring = {\"publisherEmail\": \"\", \"requestToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"trade-share-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "boolean"
            }
        }
    ]
}