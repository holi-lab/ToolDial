{
    "product_id": "api_fecd2438-8469-4d33-b9d2-911466bfae16",
    "tool_description": "Smile provides user-authorized access to valuable employment and income data from HR, payroll, commerce, and marketplace platforms through a single API!",
    "home_url": "https://rapidapi.com/smile-api-smile-api-default/api/smile2/",
    "name": "Smile",
    "title": "Smile",
    "pricing": "FREE",
    "tool_name": "Smile",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 319,
        "avgSuccessRate": 0,
        "popularityScore": 0.3,
        "__typename": "Score"
    },
    "host": "smile2.p.rapidapi.com",
    "api_list": [
        {
            "name": "list-identities",
            "url": "https://smile2.p.rapidapi.com/identities",
            "description": "Get a user's identity profiles from employment data sources.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "sourceId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular source ID.",
                    "default": ""
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "accountId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular account ID.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/identities\"\nquerystring = {\"userId\": \"\", \"sourceId\": \"\", \"cursor\": \"\", \"size\": 10, \"accountId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/identities\"\nquerystring = {\"userId\": \"\", \"sourceId\": \"\", \"cursor\": \"\", \"size\": 10, \"accountId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "04a3f763-170e-49ad-8cac-7637c5091709",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-invites",
            "url": "https://smile2.p.rapidapi.com/invites",
            "description": "Get the list of invites sent out to users.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/invites\"\nquerystring = {\"cursor\": \"\", \"size\": 10}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/invites\"\nquerystring = {\"cursor\": \"\", \"size\": 10}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "12a51bd4-c533-42c4-bf4d-a8b69f5f822e",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-incomes",
            "url": "https://smile2.p.rapidapi.com/incomes",
            "description": "Get the user's incomes from employment data sources.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by income date, end of date range (YYYY-MM-DD)",
                    "default": ""
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "sourceId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular source ID.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by income date, start of date range (YYYY-MM-DD)",
                    "default": ""
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "accountId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular account ID.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/incomes\"\nquerystring = {\"endDate\": \"\", \"userId\": \"\", \"sourceId\": \"\", \"size\": 10, \"startDate\": \"\", \"cursor\": \"\", \"accountId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/incomes\"\nquerystring = {\"endDate\": \"\", \"userId\": \"\", \"sourceId\": \"\", \"size\": 10, \"startDate\": \"\", \"cursor\": \"\", \"accountId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "ff603c01-35cc-452e-addc-bb9e7115d2fe",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-user",
            "url": "https://smile2.p.rapidapi.com/users/{id}",
            "description": "Get a particular user profile.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/users/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/users/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "03d20454-4759-4bbb-97b5-ce2340832d85",
                "data": null
            },
            "statuscode": 200,
            "schema": {
                "title": "User Get Response",
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-API-Code",
                        "description": "Request status code",
                        "enum": [
                            "OK",
                            "CREATED",
                            "INVALID_CREDENTIALS",
                            "INVALID_PARAMETERS",
                            "INVALID_TOKEN",
                            "UNAUTHORIZED_ACCESS",
                            "MISSING_RESOURCE",
                            "REQUEST_LIMIT_EXCEEDED",
                            "SERVER_ERROR",
                            "UNSUPPORTED_METHOD",
                            "SERVER_UNAVAILABLE",
                            "TIME_LIMIT_EXCEEDED"
                        ],
                        "x-internal": false
                    },
                    "message": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-Message",
                        "description": "Message response to the request",
                        "x-internal": false
                    },
                    "requestId": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-RequestID",
                        "description": "Unique ID that is added to the body of every response for easy traceability of the request in our logs.",
                        "x-internal": false
                    },
                    "data": {
                        "title": "User",
                        "type": "object",
                        "description": "A user is someone who is authorizing Smile to retrieve and share their employment and income data on their behalf.",
                        "x-tags": [
                            "Users"
                        ],
                        "x-examples": {
                            "Example": {
                                "id": "17bbf36498de4d68a0d4f86c7b62f69f",
                                "externalMetadata": {
                                    "property1": "string",
                                    "property2": "string"
                                },
                                "createdAt": "2021-04-14T09:30:24Z",
                                "providers": [
                                    "upwork"
                                ]
                            }
                        },
                        "properties": {
                            "id": {
                                "type": "string",
                                "title": "Object ID",
                                "description": "Unique ID of this object",
                                "x-internal": true
                            },
                            "externalMetadata": {
                                "title": "Object-ExternalMetadata",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "maxProperties": 5,
                                "description": "The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:\n- The JSON values must be Strings (no nested JSON objects allowed)\n- Only ASCII characters can be used\n- Maximum of 5 key/value pairs\n- Maximum key length of 50 characters\n- Maximum value length of 500 characters",
                                "x-internal": true
                            },
                            "createdAt": {
                                "type": "string",
                                "title": "Date and Time string",
                                "format": "date-time",
                                "description": "Date and time",
                                "x-internal": true
                            },
                            "providers": {
                                "description": "Array of providers connected to this user (listed by provider ID)",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "id",
                            "externalMetadata",
                            "createdAt",
                            "providers"
                        ]
                    }
                },
                "x-internal": true,
                "x-examples": {}
            }
        },
        {
            "name": "get-invite",
            "url": "https://smile2.p.rapidapi.com/invites/{id}",
            "description": "Get invite sent to users by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/invites/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/invites/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "00b54061-d7a6-4950-898d-30ca7b20de22",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-identity",
            "url": "https://smile2.p.rapidapi.com/identities/{id}",
            "description": "Get the user's identity profile by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/identities/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/identities/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "81c8ffaa-a7df-470b-817c-71b36ff2e738",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-providers",
            "url": "https://smile2.p.rapidapi.com/providers",
            "description": "Get a list of employment data providers from the Smile Network.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "enabled",
                    "type": "BOOLEAN",
                    "description": "Filter results to enabled or disabled providers.",
                    "default": true
                },
                {
                    "name": "type",
                    "type": "STRING",
                    "description": "Filter results to certain type of providers.",
                    "default": ""
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "active",
                    "type": "BOOLEAN",
                    "description": "Filter results to active or inactive providers.",
                    "default": true
                },
                {
                    "name": "accountConnection",
                    "type": "BOOLEAN",
                    "description": "Filter results to providers with real-time account connections.",
                    "default": true
                },
                {
                    "name": "subType",
                    "type": "STRING",
                    "description": "Filter results to certain subset of a certain subtype of providers",
                    "default": ""
                },
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Filter results by provider name",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/providers\"\nquerystring = {\"enabled\": true, \"type\": \"\", \"cursor\": \"\", \"size\": 10, \"active\": true, \"accountConnection\": true, \"subType\": \"\", \"name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/providers\"\nquerystring = {\"enabled\": true, \"type\": \"\", \"cursor\": \"\", \"size\": 10, \"active\": true, \"accountConnection\": true, \"subType\": \"\", \"name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-employments",
            "url": "https://smile2.p.rapidapi.com/employments",
            "description": "Get the user's previous employments.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "sourceId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular source ID.",
                    "default": ""
                },
                {
                    "name": "accountId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular account ID.",
                    "default": ""
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by employment date, end of date range (YYYY-MM-DD)",
                    "default": ""
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by employment date, start of date range (YYYY-MM-DD)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/employments\"\nquerystring = {\"sourceId\": \"\", \"accountId\": \"\", \"cursor\": \"\", \"size\": 10, \"endDate\": \"\", \"userId\": \"\", \"startDate\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/employments\"\nquerystring = {\"sourceId\": \"\", \"accountId\": \"\", \"cursor\": \"\", \"size\": 10, \"endDate\": \"\", \"userId\": \"\", \"startDate\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "19e70dd7-d6aa-4328-b8da-66ecf414f461",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-webhooks",
            "url": "https://smile2.p.rapidapi.com/webhooks",
            "description": "List all webhook endpoints.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/webhooks\"\nquerystring = {\"cursor\": \"\", \"size\": 10}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/webhooks\"\nquerystring = {\"cursor\": \"\", \"size\": 10}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "397b8ada-83a8-44b5-8d94-6138f65fe5e2",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-ratings",
            "url": "https://smile2.p.rapidapi.com/ratings",
            "description": "Get the user's ratings from employment data sources.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "sourceId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular source ID.",
                    "default": ""
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "accountId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular account ID.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/ratings\"\nquerystring = {\"cursor\": \"\", \"size\": 10, \"sourceId\": \"\", \"userId\": \"\", \"accountId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/ratings\"\nquerystring = {\"cursor\": \"\", \"size\": 10, \"sourceId\": \"\", \"userId\": \"\", \"accountId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "6c077e6c-c4c4-4790-a3af-54e1ab25a1fa",
                "data": null
            },
            "statuscode": 200,
            "schema": {
                "title": "Rating List Response",
                "type": "object",
                "x-internal": true,
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-API-Code",
                        "description": "Request status code",
                        "enum": [
                            "OK",
                            "CREATED",
                            "INVALID_CREDENTIALS",
                            "INVALID_PARAMETERS",
                            "INVALID_TOKEN",
                            "UNAUTHORIZED_ACCESS",
                            "MISSING_RESOURCE",
                            "REQUEST_LIMIT_EXCEEDED",
                            "SERVER_ERROR",
                            "UNSUPPORTED_METHOD",
                            "SERVER_UNAVAILABLE",
                            "TIME_LIMIT_EXCEEDED"
                        ],
                        "x-internal": false
                    },
                    "message": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-Message",
                        "description": "Message response to the request",
                        "x-internal": false
                    },
                    "requestId": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-RequestID",
                        "description": "Unique ID that is added to the body of every response for easy traceability of the request in our logs.",
                        "x-internal": false
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "nextCursor": {
                                "title": "Object-Next-Cursor",
                                "type": "string",
                                "description": "The next cursor value that can be used in the following query.",
                                "x-internal": false
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "title": "Rating",
                                    "type": "object",
                                    "description": "The stored performance ratings of the user in the employment data provider.",
                                    "x-internal": false,
                                    "x-examples": {
                                        "Example": {
                                            "id": "r-17bbf36498de4d68a0d4f86c7b62f69f",
                                            "currentRating": 90,
                                            "maxRating": 100,
                                            "calculatedPercentage": 90,
                                            "reviewsReceived": 12,
                                            "likesReceived": 8,
                                            "jobsCompleted": 12,
                                            "metadata": {
                                                "createdAt": "2021-04-14T09:30:24Z",
                                                "sourceId": "17bbf36498de4d68a0d4f86c7b62f69f",
                                                "sourceType": "ACCOUNT",
                                                "userId": "tenant-5c1a2e8678e3494eba303ad1afa54ee8",
                                                "providerId": "upwork"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "Ratings"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "title": "Object ID",
                                            "description": "Unique ID of this object",
                                            "x-internal": true
                                        },
                                        "currentRating": {
                                            "type": [
                                                "number",
                                                "null"
                                            ],
                                            "description": "Current rating"
                                        },
                                        "maxRating": {
                                            "type": [
                                                "number",
                                                "null"
                                            ],
                                            "description": "Maximum possible rating"
                                        },
                                        "calculatedPercentage": {
                                            "type": [
                                                "number",
                                                "null"
                                            ],
                                            "description": "Current rating expressed as percentage, calculated by currentRating/maxRating x 100"
                                        },
                                        "reviewsReceived": {
                                            "type": [
                                                "number",
                                                "null"
                                            ],
                                            "description": "Number of reviews the employee received, which is the basis for the current rating"
                                        },
                                        "likesReceived": {
                                            "type": [
                                                "number",
                                                "null"
                                            ],
                                            "description": "Recommendations or kudos received"
                                        },
                                        "jobsCompleted": {
                                            "type": [
                                                "number",
                                                "null"
                                            ],
                                            "description": "Jobs actually completed in the employment platform"
                                        },
                                        "metadata": {
                                            "title": "Reference Metadata",
                                            "type": "object",
                                            "description": "Metadata related to account-specific data",
                                            "x-internal": true,
                                            "properties": {
                                                "createdAt": {
                                                    "type": "string",
                                                    "title": "Date and Time string",
                                                    "format": "date-time",
                                                    "description": "Date and time",
                                                    "x-internal": true
                                                },
                                                "accountId": {
                                                    "type": "string",
                                                    "description": "The accountId of this object"
                                                },
                                                "sourceId": {
                                                    "type": "string",
                                                    "description": "The ACCOUNT or ARCHIVE ID associated with this object"
                                                },
                                                "sourceType": {
                                                    "type": "string",
                                                    "enum": [
                                                        "ACCOUNT",
                                                        "UPLOAD",
                                                        "ARCHIVE"
                                                    ],
                                                    "description": "Indicates whether the source associated with this object is either ACCOUNT or ARCHIVE type"
                                                },
                                                "userId": {
                                                    "type": "string",
                                                    "description": "The user ID associated with this object"
                                                },
                                                "providerId": {
                                                    "type": "string",
                                                    "description": "The provider ID associated with this object"
                                                }
                                            },
                                            "required": [
                                                "createdAt",
                                                "sourceId",
                                                "sourceType",
                                                "userId",
                                                "providerId"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "metadata"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "get-rating",
            "url": "https://smile2.p.rapidapi.com/ratings/{id}",
            "description": "Get a user's ratings by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/ratings/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/ratings/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "98268350-4718-4292-b88c-c2a7a171b716",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-provider",
            "url": "https://smile2.p.rapidapi.com/providers/{id}",
            "description": "Get a data provider from the Smile Network.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/providers/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/providers/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "44106cd8-d41c-4df2-ab2d-ae036d5f4d24",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-users",
            "url": "https://smile2.p.rapidapi.com/users",
            "description": "List users from the Smile Network.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by user creation date, end of date range (YYYY-MM-DD)",
                    "default": "2021-04-21"
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by user creation date, start of date range (YYYY-MM-DD)",
                    "default": "2021-04-01"
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/users\"\nquerystring = {\"endDate\": \"2021-04-21\", \"size\": 10, \"startDate\": \"2021-04-01\", \"cursor\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/users\"\nquerystring = {\"endDate\": \"2021-04-21\", \"size\": 10, \"startDate\": \"2021-04-01\", \"cursor\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "723629e6-1bf2-425f-bf2c-8f1b43022620",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-invite-template",
            "url": "https://smile2.p.rapidapi.com/inviteTemplates/{id}",
            "description": "Get invite template.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/inviteTemplates/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/inviteTemplates/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "73eb6d35-6a35-47b2-ab78-1360c5c329ed",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-contributions",
            "url": "https://smile2.p.rapidapi.com/contributions",
            "description": "Get the user's social security contributions from employment data sources.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "accountId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular account ID.",
                    "default": ""
                },
                {
                    "name": "sourceId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular source ID.",
                    "default": ""
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by contribution date, start of date range (YYYY-MM-DD)",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by contribution date, end of date range (YYYY-MM-DD)",
                    "default": ""
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/contributions\"\nquerystring = {\"cursor\": \"\", \"accountId\": \"\", \"sourceId\": \"\", \"startDate\": \"\", \"size\": 10, \"endDate\": \"\", \"userId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/contributions\"\nquerystring = {\"cursor\": \"\", \"accountId\": \"\", \"sourceId\": \"\", \"startDate\": \"\", \"size\": 10, \"endDate\": \"\", \"userId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "169406d7-c207-4ec9-8229-fdedcf868ab2",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-upload",
            "url": "https://smile2.p.rapidapi.com/uploads/{id}",
            "description": "Get a user's upload by ID (deprecated).",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/uploads/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/uploads/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "d3b1ffc2-023d-49ed-b3b4-ff3ad02d648b",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-income",
            "url": "https://smile2.p.rapidapi.com/incomes/{id}",
            "description": "Get the user's income by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/incomes/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/incomes/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "8f69fa13-9c50-4943-bee8-0baecc609e16",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-contribution",
            "url": "https://smile2.p.rapidapi.com/contributions/{id}",
            "description": "Get the user's contribution by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/contributions/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/contributions/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "0bad3863-cd97-4f71-a717-ffebcf39a4fa",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-webhook",
            "url": "https://smile2.p.rapidapi.com/webhooks/{id}",
            "description": "Get a webhook endpoint.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/webhooks/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/webhooks/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "a303f87e-1c18-4eef-b4b2-0ef5d6211eff",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-uploads",
            "url": "https://smile2.p.rapidapi.com/uploads",
            "description": "Get the user's uploads (deprecated).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by upload date, start of date range (YYYY-MM-DD)",
                    "default": "2021-04-01"
                },
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by upload date, end of date range (YYYY-MM-DD)",
                    "default": "2021-04-21"
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/uploads\"\nquerystring = {\"size\": 10, \"userId\": \"\", \"startDate\": \"2021-04-01\", \"endDate\": \"2021-04-21\", \"cursor\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/uploads\"\nquerystring = {\"size\": 10, \"userId\": \"\", \"startDate\": \"2021-04-01\", \"endDate\": \"2021-04-21\", \"cursor\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "c0042363-4a19-491e-967f-48f5ae8648d8",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-invite-templates",
            "url": "https://smile2.p.rapidapi.com/inviteTemplates",
            "description": "Get the list of invite templates.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/inviteTemplates\"\nquerystring = {\"size\": 10, \"cursor\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/inviteTemplates\"\nquerystring = {\"size\": 10, \"cursor\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "44b1de1b-aef2-408e-a708-05047ad338d3",
                "data": null
            },
            "statuscode": 200,
            "schema": {
                "title": "InviteTemplateListResponse",
                "type": "object",
                "x-internal": true,
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-API-Code",
                        "description": "Request status code",
                        "enum": [
                            "OK",
                            "CREATED",
                            "INVALID_CREDENTIALS",
                            "INVALID_PARAMETERS",
                            "INVALID_TOKEN",
                            "UNAUTHORIZED_ACCESS",
                            "MISSING_RESOURCE",
                            "REQUEST_LIMIT_EXCEEDED",
                            "SERVER_ERROR",
                            "UNSUPPORTED_METHOD",
                            "SERVER_UNAVAILABLE",
                            "TIME_LIMIT_EXCEEDED"
                        ],
                        "x-internal": false
                    },
                    "message": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-Message",
                        "description": "Message response to the request",
                        "x-internal": false
                    },
                    "requestId": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-RequestID",
                        "description": "Unique ID that is added to the body of every response for easy traceability of the request in our logs.",
                        "x-internal": false
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "nextCursor": {
                                "title": "Object-Next-Cursor",
                                "type": "string",
                                "description": "The next cursor value that can be used in the following query.",
                                "x-internal": false
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "title": "InviteTemplate",
                                    "x-tags": [
                                        "Invite Templates"
                                    ],
                                    "type": "object",
                                    "description": "Template to be used for sending invites.",
                                    "x-examples": {
                                        "Example": {
                                            "id": "17bbf36498de4d68a0d4f86c7b62f69f",
                                            "name": "Email Template v1",
                                            "company": {
                                                "name": "XYZ Bank",
                                                "logoUrl": "https://xyzbank.co/logo.png"
                                            },
                                            "email": {
                                                "sendEmail": true,
                                                "senderName": "XYZ Bank",
                                                "replyAddress": "replies@xyz.co",
                                                "subject": "Please connect your work account to share your data with us",
                                                "body": "Hello ${firstName}! We are working with our partner, Smile API, so you can easily share your employment and income data to us as a requirement for providing you service. It will be a quick process and should take no more than a few seconds of your time."
                                            },
                                            "landingPage": {
                                                "header": "Share your employment and income data with us at ${companyName}",
                                                "description": "We are working with our partner, Smile API, so you can easily share your employment and income data to us as a requirement for providing you service. It will be a quick process and should take no more than a few seconds of your time.",
                                                "button": "START NOW"
                                            },
                                            "successPage": {
                                                "header": "Thank you for sharing your employment and income data with us at ${companyName}",
                                                "description": "The process was successful! Please wait for us to get in touch!",
                                                "button": "Connect another account"
                                            }
                                        }
                                    },
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "title": "Object ID",
                                            "description": "Unique ID of this object",
                                            "x-internal": true
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Template name"
                                        },
                                        "company": {
                                            "type": "object",
                                            "required": [
                                                "name",
                                                "logoUrl"
                                            ],
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Company name that it will appear in the invite landing page and any invitation message"
                                                },
                                                "logoUrl": {
                                                    "type": "string",
                                                    "description": "Company logo that will appear in the invite email and landing page"
                                                }
                                            }
                                        },
                                        "email": {
                                            "type": "object",
                                            "required": [
                                                "sendEmail",
                                                "senderName",
                                                "replyAddress",
                                                "subject",
                                                "body"
                                            ],
                                            "properties": {
                                                "sendEmail": {
                                                    "type": "boolean",
                                                    "description": "Send email using this template (boolean value: true/false)"
                                                },
                                                "senderName": {
                                                    "type": "string",
                                                    "description": "Sender name that it will appear in the email message"
                                                },
                                                "replyAddress": {
                                                    "type": "string",
                                                    "description": "Reply-to address that will be shown when replying to an invite email",
                                                    "format": "email"
                                                },
                                                "subject": {
                                                    "type": "string",
                                                    "description": "Subject that it will appear in the email message"
                                                },
                                                "body": {
                                                    "type": "string",
                                                    "description": "Text that it will appear in email message"
                                                }
                                            }
                                        },
                                        "landingPage": {
                                            "type": "object",
                                            "required": [
                                                "header",
                                                "description",
                                                "button"
                                            ],
                                            "properties": {
                                                "header": {
                                                    "type": "string",
                                                    "description": "Header text that will appear in the landing page"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "description": "Description of the landing page"
                                                },
                                                "button": {
                                                    "type": "string",
                                                    "description": "Text that it will appear in the landing page"
                                                }
                                            }
                                        },
                                        "successPage": {
                                            "type": "object",
                                            "required": [
                                                "header",
                                                "description",
                                                "button"
                                            ],
                                            "properties": {
                                                "header": {
                                                    "type": "string",
                                                    "description": "Header text that will appear in the success page"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "description": "Description of the success page after an account has been linked or data has been uploaded"
                                                },
                                                "button": {
                                                    "type": "string",
                                                    "description": "Text that it will appear in the landing page"
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "name",
                                        "company",
                                        "email",
                                        "landingPage",
                                        "successPage"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "get-employment",
            "url": "https://smile2.p.rapidapi.com/employments/{id}",
            "description": "Get a user's employment by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/employments/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/employments/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "22fc23f7-a95d-4a74-b27d-dc30270c920c",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-transaction",
            "url": "https://smile2.p.rapidapi.com/transactions/{id}",
            "description": "Get a user's transaction by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/transactions/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/transactions/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "4b03681c-67e5-4bbc-8eb8-a6392a67a4a1",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-transactions",
            "url": "https://smile2.p.rapidapi.com/transactions",
            "description": "Get the user's transactions from employment data sources.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "accountId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular account ID.",
                    "default": ""
                },
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by transaction date, end of date range (YYYY-MM-DD)",
                    "default": "2021-04-21"
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by transaction date, start of date range (YYYY-MM-DD)",
                    "default": "2021-04-01"
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "sourceId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular source ID.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/transactions\"\nquerystring = {\"cursor\": \"\", \"size\": 10, \"accountId\": \"\", \"endDate\": \"2021-04-21\", \"startDate\": \"2021-04-01\", \"userId\": \"\", \"sourceId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/transactions\"\nquerystring = {\"cursor\": \"\", \"size\": 10, \"accountId\": \"\", \"endDate\": \"2021-04-21\", \"startDate\": \"2021-04-01\", \"userId\": \"\", \"sourceId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "a755dd63-b317-4773-8b50-a2db28852168",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-archives",
            "url": "https://smile2.p.rapidapi.com/archives",
            "description": "Get the user's archives.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by archive date, end of date range (YYYY-MM-DD)",
                    "default": "2021-04-21"
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by archive date, start of date range (YYYY-MM-DD)",
                    "default": "2021-04-01"
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/archives\"\nquerystring = {\"cursor\": \"\", \"endDate\": \"2021-04-21\", \"userId\": \"\", \"size\": 10, \"startDate\": \"2021-04-01\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/archives\"\nquerystring = {\"cursor\": \"\", \"endDate\": \"2021-04-21\", \"userId\": \"\", \"size\": 10, \"startDate\": \"2021-04-01\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "f6a9c5be-2236-4686-bd1e-0620c573d65b",
                "data": null
            },
            "statuscode": 200,
            "schema": {
                "title": "Archive List Response",
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-API-Code",
                        "description": "Request status code",
                        "enum": [
                            "OK",
                            "CREATED",
                            "INVALID_CREDENTIALS",
                            "INVALID_PARAMETERS",
                            "INVALID_TOKEN",
                            "UNAUTHORIZED_ACCESS",
                            "MISSING_RESOURCE",
                            "REQUEST_LIMIT_EXCEEDED",
                            "SERVER_ERROR",
                            "UNSUPPORTED_METHOD",
                            "SERVER_UNAVAILABLE",
                            "TIME_LIMIT_EXCEEDED"
                        ],
                        "x-internal": false
                    },
                    "message": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-Message",
                        "description": "Message response to the request",
                        "x-internal": false
                    },
                    "requestId": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-RequestID",
                        "description": "Unique ID that is added to the body of every response for easy traceability of the request in our logs.",
                        "x-internal": false
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "nextCursor": {
                                "title": "Object-Next-Cursor",
                                "type": "string",
                                "description": "The next cursor value that can be used in the following query.",
                                "x-internal": false
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "title": "Archive",
                                    "type": "object",
                                    "description": "Collection of files.",
                                    "x-internal": true,
                                    "x-examples": {
                                        "Example": {
                                            "id": "u-17bbf36498de4d68a0d4f86c7b62f69f",
                                            "createdAt": "2021-04-14T09:30:24Z",
                                            "providerId": "user-provided",
                                            "userId": "tenant-5c1a2e8678e3494eba303ad1afa54ee8",
                                            "type": "PAYSLIP",
                                            "state": {
                                                "status": "STARTED",
                                                "errorCode": null,
                                                "errorMessage": null,
                                                "updatedAt": "2021-04-14T09:30:24Z"
                                            },
                                            "rawFiles": [
                                                {
                                                    "id": "f-17bbf36498de4d68a0d4f86c7b62f69f",
                                                    "createdAt": "2021-04-14T09:30:24Z",
                                                    "name": "Screen Shot 2021-04-14 at 5.30.24 PM",
                                                    "subType": "PERSONAL_INFORMATION",
                                                    "size": 3048,
                                                    "format": "PNG",
                                                    "url": "https://file.smileapi.io/tenants/smileapi/user/smileapi-17bbf36498de4d68a0d4f86c7b62f69f/files/file-17bbf36498de4d68a0d4f86c7b62f69f.jpeg"
                                                }
                                            ]
                                        }
                                    },
                                    "x-tags": [
                                        "Archives"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "title": "Object ID",
                                            "description": "Unique ID of this object",
                                            "x-internal": true
                                        },
                                        "createdAt": {
                                            "type": "string",
                                            "title": "Date and Time string",
                                            "format": "date-time",
                                            "description": "Date and time",
                                            "x-internal": true
                                        },
                                        "providerId": {
                                            "type": "string",
                                            "description": "ID of the data provider"
                                        },
                                        "userId": {
                                            "type": "string",
                                            "description": "User ID associated with this account"
                                        },
                                        "type": {
                                            "type": "string",
                                            "enum": [
                                                "PAYSLIP",
                                                "TAX_DOCUMENT",
                                                "COMPANY_ID",
                                                "SOCIAL_SECURITY"
                                            ],
                                            "description": "Type of document uploaded"
                                        },
                                        "state": {
                                            "type": "object",
                                            "required": [
                                                "status",
                                                "errorCode",
                                                "errorMessage",
                                                "updatedAt"
                                            ],
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "STARTED",
                                                        "ANALYZED",
                                                        "UNSUPPORTED",
                                                        "ERROR",
                                                        "REVOKED"
                                                    ],
                                                    "description": "Archive status"
                                                },
                                                "errorCode": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Error code",
                                                    "enum": [
                                                        "MISSING_MANDATARY_FIELD",
                                                        "INVALID_FIELD_FORMAT",
                                                        "SYSTEM_ERROR",
                                                        null,
                                                        null
                                                    ]
                                                },
                                                "errorMessage": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Error message"
                                                },
                                                "updatedAt": {
                                                    "type": "string",
                                                    "title": "Date and Time string",
                                                    "format": "date-time",
                                                    "description": "Date and time",
                                                    "x-internal": true
                                                }
                                            }
                                        },
                                        "rawFiles": {
                                            "description": "Collection of files",
                                            "type": "array",
                                            "items": {
                                                "title": "RawFile",
                                                "type": "object",
                                                "description": "Scanned or photographed document or form uploaded by the user to be able to share hardcopy employment and income information. File size limit is 15 MB.",
                                                "x-examples": {},
                                                "x-internal": false,
                                                "x-tags": [
                                                    "Uploads"
                                                ],
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "title": "Object ID",
                                                        "description": "Unique ID of this object",
                                                        "x-internal": true
                                                    },
                                                    "createdAt": {
                                                        "type": "string",
                                                        "title": "Date and Time string",
                                                        "format": "date-time",
                                                        "description": "Date and time",
                                                        "x-internal": true
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "description": "File name"
                                                    },
                                                    "subType": {
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ],
                                                        "description": "Type of document uploaded"
                                                    },
                                                    "size": {
                                                        "type": "integer",
                                                        "description": "File size in kilobytes"
                                                    },
                                                    "format": {
                                                        "type": "string",
                                                        "enum": [
                                                            "PDF",
                                                            "PNG",
                                                            "TIFF",
                                                            "JPEG"
                                                        ],
                                                        "description": "File type (only JPEG, PNG, PDF, or TIFF formats are supported)"
                                                    },
                                                    "url": {
                                                        "type": "string",
                                                        "description": "URL to access the file. URL will expire after 7 days"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "createdAt",
                                                    "name",
                                                    "subType",
                                                    "size",
                                                    "format",
                                                    "url"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "createdAt",
                                        "providerId",
                                        "userId",
                                        "type",
                                        "state",
                                        "rawFiles"
                                    ]
                                }
                            }
                        }
                    }
                },
                "x-internal": true
            }
        },
        {
            "name": "get-account",
            "url": "https://smile2.p.rapidapi.com/accounts/{id}",
            "description": "Get a user's particular account information.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/accounts/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/accounts/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "d4ce2329-34fc-43d4-b087-7591977183b5",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "get-archive",
            "url": "https://smile2.p.rapidapi.com/archives/{id}",
            "description": "Get a user's archive by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/archives/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/archives/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "5acd2084-ebcc-4bf2-99ab-d3512e13b252",
                "data": null
            },
            "statuscode": 200,
            "schema": {
                "title": "Archive Get Response",
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-API-Code",
                        "description": "Request status code",
                        "enum": [
                            "OK",
                            "CREATED",
                            "INVALID_CREDENTIALS",
                            "INVALID_PARAMETERS",
                            "INVALID_TOKEN",
                            "UNAUTHORIZED_ACCESS",
                            "MISSING_RESOURCE",
                            "REQUEST_LIMIT_EXCEEDED",
                            "SERVER_ERROR",
                            "UNSUPPORTED_METHOD",
                            "SERVER_UNAVAILABLE",
                            "TIME_LIMIT_EXCEEDED"
                        ],
                        "x-internal": false
                    },
                    "message": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-Message",
                        "description": "Message response to the request",
                        "x-internal": false
                    },
                    "requestId": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-RequestID",
                        "description": "Unique ID that is added to the body of every response for easy traceability of the request in our logs.",
                        "x-internal": false
                    },
                    "data": {
                        "title": "Archive",
                        "type": "object",
                        "description": "Collection of files.",
                        "x-internal": true,
                        "x-examples": {
                            "Example": {
                                "id": "u-17bbf36498de4d68a0d4f86c7b62f69f",
                                "createdAt": "2021-04-14T09:30:24Z",
                                "providerId": "user-provided",
                                "userId": "tenant-5c1a2e8678e3494eba303ad1afa54ee8",
                                "type": "PAYSLIP",
                                "state": {
                                    "status": "STARTED",
                                    "errorCode": null,
                                    "errorMessage": null,
                                    "updatedAt": "2021-04-14T09:30:24Z"
                                },
                                "rawFiles": [
                                    {
                                        "id": "f-17bbf36498de4d68a0d4f86c7b62f69f",
                                        "createdAt": "2021-04-14T09:30:24Z",
                                        "name": "Screen Shot 2021-04-14 at 5.30.24 PM",
                                        "subType": "PERSONAL_INFORMATION",
                                        "size": 3048,
                                        "format": "PNG",
                                        "url": "https://file.smileapi.io/tenants/smileapi/user/smileapi-17bbf36498de4d68a0d4f86c7b62f69f/files/file-17bbf36498de4d68a0d4f86c7b62f69f.jpeg"
                                    }
                                ]
                            }
                        },
                        "x-tags": [
                            "Archives"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "title": "Object ID",
                                "description": "Unique ID of this object",
                                "x-internal": true
                            },
                            "createdAt": {
                                "type": "string",
                                "title": "Date and Time string",
                                "format": "date-time",
                                "description": "Date and time",
                                "x-internal": true
                            },
                            "providerId": {
                                "type": "string",
                                "description": "ID of the data provider"
                            },
                            "userId": {
                                "type": "string",
                                "description": "User ID associated with this account"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "PAYSLIP",
                                    "TAX_DOCUMENT",
                                    "COMPANY_ID",
                                    "SOCIAL_SECURITY"
                                ],
                                "description": "Type of document uploaded"
                            },
                            "state": {
                                "type": "object",
                                "required": [
                                    "status",
                                    "errorCode",
                                    "errorMessage",
                                    "updatedAt"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "STARTED",
                                            "ANALYZED",
                                            "UNSUPPORTED",
                                            "ERROR",
                                            "REVOKED"
                                        ],
                                        "description": "Archive status"
                                    },
                                    "errorCode": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "Error code",
                                        "enum": [
                                            "MISSING_MANDATARY_FIELD",
                                            "INVALID_FIELD_FORMAT",
                                            "SYSTEM_ERROR",
                                            null,
                                            null
                                        ]
                                    },
                                    "errorMessage": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "Error message"
                                    },
                                    "updatedAt": {
                                        "type": "string",
                                        "title": "Date and Time string",
                                        "format": "date-time",
                                        "description": "Date and time",
                                        "x-internal": true
                                    }
                                }
                            },
                            "rawFiles": {
                                "description": "Collection of files",
                                "type": "array",
                                "items": {
                                    "title": "RawFile",
                                    "type": "object",
                                    "description": "Scanned or photographed document or form uploaded by the user to be able to share hardcopy employment and income information. File size limit is 15 MB.",
                                    "x-examples": {},
                                    "x-internal": false,
                                    "x-tags": [
                                        "Uploads"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "title": "Object ID",
                                            "description": "Unique ID of this object",
                                            "x-internal": true
                                        },
                                        "createdAt": {
                                            "type": "string",
                                            "title": "Date and Time string",
                                            "format": "date-time",
                                            "description": "Date and time",
                                            "x-internal": true
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "File name"
                                        },
                                        "subType": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "Type of document uploaded"
                                        },
                                        "size": {
                                            "type": "integer",
                                            "description": "File size in kilobytes"
                                        },
                                        "format": {
                                            "type": "string",
                                            "enum": [
                                                "PDF",
                                                "PNG",
                                                "TIFF",
                                                "JPEG"
                                            ],
                                            "description": "File type (only JPEG, PNG, PDF, or TIFF formats are supported)"
                                        },
                                        "url": {
                                            "type": "string",
                                            "description": "URL to access the file. URL will expire after 7 days"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "createdAt",
                                        "name",
                                        "subType",
                                        "size",
                                        "format",
                                        "url"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "id",
                            "createdAt",
                            "providerId",
                            "userId",
                            "type",
                            "state",
                            "rawFiles"
                        ]
                    }
                },
                "description": "",
                "x-internal": true
            }
        },
        {
            "name": "list-file-types",
            "url": "https://smile2.p.rapidapi.com/fileTypes",
            "description": "Get the available file types for uploads.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "enabled",
                    "type": "BOOLEAN",
                    "description": "Filter results to enabled or disabled file types.",
                    "default": true
                },
                {
                    "name": "ocr",
                    "type": "BOOLEAN",
                    "description": "Filter results to file types that support OCR.",
                    "default": true
                },
                {
                    "name": "active",
                    "type": "BOOLEAN",
                    "description": "Filter results to active or inactive file types.",
                    "default": true
                },
                {
                    "name": "type",
                    "type": "STRING",
                    "description": "Filter results to certain type of file types.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/fileTypes\"\nquerystring = {\"cursor\": \"\", \"size\": 10, \"enabled\": true, \"ocr\": true, \"active\": true, \"type\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/fileTypes\"\nquerystring = {\"cursor\": \"\", \"size\": 10, \"enabled\": true, \"ocr\": true, \"active\": true, \"type\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-accounts",
            "url": "https://smile2.p.rapidapi.com/accounts",
            "description": "Get a list of user accounts.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Filter by account linking date, end of date range (YYYY-MM-DD)",
                    "default": "2021-04-21"
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Filter by account linking date, start of date range (YYYY-MM-DD)",
                    "default": "2021-04-01"
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/accounts\"\nquerystring = {\"endDate\": \"2021-04-21\", \"cursor\": \"\", \"startDate\": \"2021-04-01\", \"userId\": \"\", \"size\": 10}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/accounts\"\nquerystring = {\"endDate\": \"2021-04-21\", \"cursor\": \"\", \"startDate\": \"2021-04-01\", \"userId\": \"\", \"size\": 10}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "c829b729-31fa-4c9a-95b3-654f3723f5ec",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "list-documents",
            "url": "https://smile2.p.rapidapi.com/documents",
            "description": "Get the user's documents from employment data sources.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "size",
                    "type": "NUMBER",
                    "description": "The number of objects you want returned in a collection.",
                    "default": 10
                },
                {
                    "name": "cursor",
                    "type": "STRING",
                    "description": "Uses the filter values of the previous page to determine the next set of items.",
                    "default": ""
                },
                {
                    "name": "accountId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular account ID.",
                    "default": ""
                },
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular user ID.",
                    "default": ""
                },
                {
                    "name": "sourceId",
                    "type": "STRING",
                    "description": "Filter to those associated with a particular source ID.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/documents\"\nquerystring = {\"size\": 10, \"cursor\": \"\", \"accountId\": \"\", \"userId\": \"\", \"sourceId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/documents\"\nquerystring = {\"size\": 10, \"cursor\": \"\", \"accountId\": \"\", \"userId\": \"\", \"sourceId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "c8553777-80f2-41be-ba2e-0b3769e8d161",
                "data": null
            },
            "statuscode": 200,
            "schema": {
                "title": "Document List Response",
                "type": "object",
                "x-internal": true,
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-API-Code",
                        "description": "Request status code",
                        "enum": [
                            "OK",
                            "CREATED",
                            "INVALID_CREDENTIALS",
                            "INVALID_PARAMETERS",
                            "INVALID_TOKEN",
                            "UNAUTHORIZED_ACCESS",
                            "MISSING_RESOURCE",
                            "REQUEST_LIMIT_EXCEEDED",
                            "SERVER_ERROR",
                            "UNSUPPORTED_METHOD",
                            "SERVER_UNAVAILABLE",
                            "TIME_LIMIT_EXCEEDED"
                        ],
                        "x-internal": false
                    },
                    "message": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-Message",
                        "description": "Message response to the request",
                        "x-internal": false
                    },
                    "requestId": {
                        "type": "string",
                        "title": "Object-Metadata-Ref-RequestID",
                        "description": "Unique ID that is added to the body of every response for easy traceability of the request in our logs.",
                        "x-internal": false
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "nextCursor": {
                                "title": "Object-Next-Cursor",
                                "type": "string",
                                "description": "The next cursor value that can be used in the following query.",
                                "x-internal": false
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "title": "Document",
                                    "type": "object",
                                    "x-internal": false,
                                    "description": "The stored document-related information of the user from an employment data provider.",
                                    "x-examples": {
                                        "Example": {
                                            "id": "d-17bbf36498de4d68a0d4f86c7b62f69f",
                                            "name": "Facebook Social Media Marketing Professional Certificate",
                                            "docId": "ABCD123456",
                                            "issueDate": "2007-08-24",
                                            "expiryDate": "2010-08-24",
                                            "fileUrl": "https://images.credly.com/size/680x680/images/c4a900b7-8d1b-4e8f-a572-347985eeaa5c/Coursera_Badge__1_.png",
                                            "metadata": {
                                                "createdAt": "2021-04-14T09:30:24Z",
                                                "sourceId": "17bbf36498de4d68a0d4f86c7b62f69f",
                                                "sourceType": "ACCOUNT",
                                                "userId": "tenant-5c1a2e8678e3494eba303ad1afa54ee8",
                                                "providerId": "upwork"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "Documents"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "title": "Object ID",
                                            "description": "Unique ID of this object",
                                            "x-internal": true
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Document name"
                                        },
                                        "docId": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "Document number"
                                        },
                                        "issueDate": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "Issue date",
                                            "format": "date"
                                        },
                                        "expiryDate": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "Expiry date",
                                            "format": "date"
                                        },
                                        "fileUrl": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "Publicly available URL reference for the document"
                                        },
                                        "metadata": {
                                            "title": "Reference Metadata",
                                            "type": "object",
                                            "description": "Metadata related to account-specific data",
                                            "x-internal": true,
                                            "properties": {
                                                "createdAt": {
                                                    "type": "string",
                                                    "title": "Date and Time string",
                                                    "format": "date-time",
                                                    "description": "Date and time",
                                                    "x-internal": true
                                                },
                                                "accountId": {
                                                    "type": "string",
                                                    "description": "The accountId of this object"
                                                },
                                                "sourceId": {
                                                    "type": "string",
                                                    "description": "The ACCOUNT or ARCHIVE ID associated with this object"
                                                },
                                                "sourceType": {
                                                    "type": "string",
                                                    "enum": [
                                                        "ACCOUNT",
                                                        "UPLOAD",
                                                        "ARCHIVE"
                                                    ],
                                                    "description": "Indicates whether the source associated with this object is either ACCOUNT or ARCHIVE type"
                                                },
                                                "userId": {
                                                    "type": "string",
                                                    "description": "The user ID associated with this object"
                                                },
                                                "providerId": {
                                                    "type": "string",
                                                    "description": "The provider ID associated with this object"
                                                }
                                            },
                                            "required": [
                                                "createdAt",
                                                "sourceId",
                                                "sourceType",
                                                "userId",
                                                "providerId"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "name",
                                        "metadata"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "get-document",
            "url": "https://smile2.p.rapidapi.com/documents/{id}",
            "description": "Get a user's document by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "ID of the specific object in the collection.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/documents/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/documents/{id}\"\nquerystring = {\"id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "code": "INVALID_TOKEN",
                "message": "Missing or invalid credentials were sent in your request.",
                "requestId": "8b766916-a362-4af7-b571-7a3c7a8a950e",
                "data": null
            },
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "create-webhook",
            "url": "https://smile2.p.rapidapi.com/webhooks",
            "description": "Create a webhook endpoint.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/webhooks\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/webhooks\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "create-invite",
            "url": "https://smile2.p.rapidapi.com/invites",
            "description": "Create and send an invite to a user",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/invites\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/invites\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "create-user",
            "url": "https://smile2.p.rapidapi.com/users",
            "description": "Create a user in the Smile Network.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/users\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/users\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "create-token",
            "url": "https://smile2.p.rapidapi.com/tokens",
            "description": "Refresh a token for a user",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "the user whom to create token for.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/tokens\"\nquerystring = {\"userId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/tokens\"\nquerystring = {\"userId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "create-invite-template",
            "url": "https://smile2.p.rapidapi.com/inviteTemplates",
            "description": "Create an invite template.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/inviteTemplates\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://smile2.p.rapidapi.com/inviteTemplates\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"smile2.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ],
    "standardized_name": "smile"
}