{
    "tool_name": "Corrently",
    "tool_description": "Corrently - from italian corrente, which is energy",
    "title": "Corrently",
    "pricing": "FREEMIUM",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 94,
        "avgSuccessRate": 0,
        "popularityScore": 0,
        "__typename": "Score"
    },
    "home_url": "https://rapidapi.com/stromdao-stromdao-default/api/corrently/",
    "host": "corrently.p.rapidapi.com",
    "api_list": [
        {
            "name": "quittungTSEData",
            "url": "https://corrently.p.rapidapi.com/quittung/tsedata",
            "description": "Allows to retrieve input string for a signing process.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Quittung Identifier  (serialnumber generated during receipt generation process)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tsedata\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "omReadings",
            "url": "https://corrently.p.rapidapi.com/alternative/openmeter/readings",
            "description": "Provides a list of available meterrs in the OpenMETER project ( https://www.openmeter.de/ ) which grants access for analytics as data discovery.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/alternative/openmeter/readings\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "meterId": "gAAAAABgsYVSfcCjJZV5w2wGBTzOXCihY7dMaDyypwcbJzAELvxeCDaXiy65H2QwtY-7usSOfoqEIomTJjQb1yyIXZfFnTY2pmLgIu_DVw1rjppFte56yWBD5Fgrmbh2KyOkMNUr8zxO",
                "manufacturerId": "",
                "location": "",
                "type": "",
                "measurementType": "",
                "loadProfileType": "",
                "scalingFactor": 0,
                "currentScalingFactor": 0,
                "voltageScalingFactor": 0,
                "meta": ""
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "meterId": {
                            "description": "identifier to be used in other methods like readings or activities.",
                            "type": "string"
                        },
                        "manufacturerId": {
                            "description": "DLMS manufacturerId",
                            "type": "string"
                        },
                        "location": {
                            "description": "Basic address information for geo coding",
                            "type": "string"
                        },
                        "type": {
                            "description": "Device type of the meter",
                            "type": "string"
                        },
                        "measurementType": {
                            "description": "Physical quantity being measured by the meter",
                            "type": "string"
                        },
                        "loadProfileType": {
                            "description": "Metering load profile type associated with the meter",
                            "type": "string"
                        },
                        "scalingFactor": {
                            "description": "Factor imposed on metered current AND voltage by a transducer",
                            "type": "integer"
                        },
                        "currentScalingFactor": {
                            "description": "Factor imposed on metered current by a transducer",
                            "type": "integer"
                        },
                        "voltageScalingFactor": {
                            "description": "Factor imposed on metered voltage by a transducer",
                            "type": "integer"
                        },
                        "meta": {
                            "description": "Statistical metadata for this household",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "name": "gsiDispatch",
            "url": "https://corrently.p.rapidapi.com/gsi/dispatch",
            "description": "Dispatch of green energy has two aspects to consider:\n  - Availability of gerneration facility (depends on weather and installed capacity)\n  - Demand of energy\nUsing the green power index (Gr\u00fcnstromIndex) we have received a tool to automate distribution of energy in order to prevent redispatch situations. Doing this alows to opimize resource usage (tactical) and leverage data for investment planning (strategic).\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "key",
                    "type": "STRING",
                    "description": "Any valid Stromkonto account (address).",
                    "default": ""
                },
                {
                    "name": "zip",
                    "type": "STRING",
                    "description": "Zipcode (Postleitzahl) of a city in Germany.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/gsi/dispatch\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "premix": {},
                "postmix": {},
                "dispatch_from": [
                    {
                        "energy": 0.2345677,
                        "location": {}
                    }
                ],
                "dispatch_target": [
                    {
                        "energy": 0.2345677,
                        "location": {}
                    }
                ],
                "timeframe": {
                    "start": 0,
                    "end": 0
                },
                "avg_distance_km": 0
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "premix": {
                        "description": "Green Energy Mix prior to dispatch of given city",
                        "type": "object"
                    },
                    "postmix": {
                        "description": "Green Energy Mix after dispatch of given city",
                        "type": "object"
                    },
                    "dispatch_from": {
                        "description": "List of current sources of green energy (into requested location)",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "energy": {
                                    "description": "Percentage of energy",
                                    "type": "number"
                                },
                                "location": {
                                    "description": "GeoJSON encoded location of target or source of green energy.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "dispatch_target": {
                        "description": "List of current targets of green energy (out of requested location)",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "energy": {
                                    "description": "Percentage of energy",
                                    "type": "number"
                                },
                                "location": {
                                    "description": "GeoJSON encoded location of target or source of green energy.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "timeframe": {
                        "type": "object",
                        "description": "Evaluated timeframe for this request",
                        "properties": {
                            "start": {
                                "type": "integer",
                                "description": "Starting time of window evaluated in order to get dispatches"
                            },
                            "end": {
                                "type": "integer",
                                "description": "Ending time of window evaluated for this request/dispatches."
                            }
                        }
                    },
                    "avg_distance_km": {
                        "type": "number",
                        "description": "Averaged geospatial distance in kilometers between energy generation and usage at requested location."
                    }
                }
            }
        },
        {
            "name": "stromkontoLogin",
            "url": "https://corrently.p.rapidapi.com/stromkonto/login",
            "description": "Sends a mail to a given email address to login this user. This function makes life a bit easier in order to not having to deal with private key protection on the user side as a shared key is used to sign transactions onbehalf of a particular account.  However viewing consensus information (balances) are public and *might move* from account to account without prior notification. Best practice for third party uses is to always start a session with the login RESP call and only create a user in case the response indicates an `unregistered` status.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/login\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "status": "registered"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Registration status of a user. In case unregistered gets returned use the `register` endpoint to (re-)register.",
                        "type": "string",
                        "enum": [
                            "registered",
                            "unregistered"
                        ]
                    }
                }
            }
        },
        {
            "name": "ocppSessions",
            "url": "https://corrently.p.rapidapi.com/alternative/ocpp/lastSessions",
            "description": "Returns lastSession info of OCCP Cloud service for clearing in corrently ecosystem. Might be tested via [OCPP cloud simulator](https://ocpp.corrently.cloud).\nLast session Info of managed EV charging stations connected to the correnty ecosystem.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/alternative/ocpp/lastSessions\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "EH780684",
                "name": "",
                "lastSession": ""
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "description": "Given ID by easee api",
                            "type": "string"
                        },
                        "name": {
                            "description": "Name set for charger",
                            "type": "string"
                        },
                        "lastSession": {
                            "description": "lastSession Info as given by easee API",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "name": "meteringGet",
            "url": "https://corrently.p.rapidapi.com/metering/reading",
            "description": "Retrieves a metered reading using account (Stromkonto).\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Account/Address (Stromkonto) to retrieve reading for.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/metering/reading\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "account": "",
                "1.8.0": 0,
                "1.8.1": 0,
                "1.8.2": 0,
                "timeStamp": 0,
                "_processingTime": 0,
                "co2_g_standard": 0,
                "co2_g_oekostrom": 0,
                "ttl": 0
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "account": {
                        "description": "Stromkonto/Metering address allocated (this is not the MELOID!)",
                        "type": "string"
                    },
                    "1.8.0": {
                        "description": "Reading as provided as input in Wh",
                        "type": "integer"
                    },
                    "1.8.1": {
                        "description": "Green energy calculated using Green Power Index (Gr\u00fcnstromIndex) in Wh",
                        "type": "integer"
                    },
                    "1.8.2": {
                        "description": "Grey energy calculated using Green Power Index (Gr\u00fcnstromIndex) in Wh",
                        "type": "integer"
                    },
                    "timeStamp": {
                        "description": "API Consensus time this reading was fully received",
                        "type": "integer"
                    },
                    "_processingTime": {
                        "description": "Time this reading got imported into consensus (e.q. signed timestamp).",
                        "type": "integer"
                    },
                    "co2_g_standard": {
                        "description": "CO2 Emission of metered energy in a standard mix",
                        "type": "integer"
                    },
                    "co2_g_oekostrom": {
                        "description": "CO2 Emission of metered energy in a green energy mix (e.q. \u00d6kostromtarif)",
                        "type": "integer"
                    },
                    "ttl": {
                        "description": "Time to Live for this reader. If no update is provided it gets decommissioned.",
                        "type": "integer"
                    },
                    "credits": {
                        "description": "Update credits this meter has. Gets refilled automtically to prevent too frequent updates"
                    }
                }
            }
        },
        {
            "name": "tariffSLPH0",
            "url": "https://corrently.p.rapidapi.com/tariff/slph0",
            "description": "Provides pricing data for private households with standard load profiles (Standardlastprofil H0).\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "zipcode",
                    "type": "STRING",
                    "description": "Zipcode (Postzleitzahl) of a city in Germany.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/tariff/slph0\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "ap": 22.12,
                "gp": 7.5
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "ap": {
                            "description": "Energy price in cent per kwh. (Arbeitspreis) including all taxes and fees.",
                            "type": "integer"
                        },
                        "gp": {
                            "description": "Base price in euro per montah (Grundpreis) including all taxes and fees.",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        {
            "name": "co2compensate",
            "url": "https://corrently.p.rapidapi.com/co2/compensate",
            "description": "You might call the /price API endpoint prior to a checkout to get latest pricing information. This method returns a URL for direct checkout using Stripe. All CO2 offset prices are based on VCS Verified CO2 Emission Reduction In accordance with the requirements of ISO 14064-1. CO2 prices are actual market prices and may change every hour.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "kwh",
                    "type": "NUMBER",
                    "description": "Kilo Watt hours of electricity to co2 offset.",
                    "default": "30"
                },
                {
                    "name": "liter",
                    "type": "NUMBER",
                    "description": "Liter of fuel to compensate.",
                    "default": "30"
                },
                {
                    "name": "co2",
                    "type": "NUMBER",
                    "description": "CO2 equivalence in gram to compensate",
                    "default": "12345"
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/co2/compensate\"\nquerystring = {\"kwh\": kwh, \"liter\": liter, \"co2\": co2}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": "https://checkout.stripe.com/pay/cs_live_a1kuMslQRjSlHnYF1BuKQSXbEl6BfduHOGG30dgavjRDy1fjUnC4UllAUd#fidkdWxOYHwnPyd1blppbHNgWndSa21yQmNOa3JoN2RIXHxUMDVWZ193aScpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl",
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "description": "URL for interactive checkout and payment of CO2 offset for a co2 certificate.",
                    "type": "string"
                }
            }
        },
        {
            "name": "stromkontoBalances",
            "url": "https://corrently.p.rapidapi.com/stromkonto/balances",
            "description": "Stromkonto represents a core component of the Corrently Ecosystem. It is a ledger for green energy related transactions and gets heavily used by the public Web-UI on www.stromkonto.net . Beside of some decoration and reformating operations all data is backed by the [Energychain blockchain](https://github.com/energychain/) to provide consensus of balances and transactions. Use this API Endppoint if you prefere not to work with low level Distributed Ledger Technology (Blockchain).\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Ethereum style address referencing a valid account (AKA Stromkonto).",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/balances\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "soll": 20,
                "haben": 20,
                "balance": 20,
                "txs": [
                    {
                        "timeStamp": 1606777200000,
                        "txid": "722d30b2-b46f-4ed4-a8cd-16d262180d37",
                        "cashier": "Miller",
                        "txtype": "bank.incGSB",
                        "value": 1337
                    }
                ],
                "variation": "gsb"
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "soll": {
                            "description": "Sum due by account",
                            "type": "integer"
                        },
                        "haben": {
                            "description": "Sum owned by account",
                            "type": "integer"
                        },
                        "balance": {
                            "description": "Sum owned - sum due by account",
                            "type": "integer"
                        },
                        "txs": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "timeStamp": {
                                        "description": "Cross signed timestamp of transaction",
                                        "type": "integer"
                                    },
                                    "txid": {
                                        "description": "Unique hash of this transaction as provided by counter signing party",
                                        "type": "string"
                                    },
                                    "cashier": {
                                        "description": "Pretty print of counter signing party",
                                        "type": "string"
                                    },
                                    "txtype": {
                                        "description": "Type of transaction per cashier implementation and schema",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Amount covered by transaction",
                                        "type": "integer"
                                    }
                                }
                            }
                        },
                        "variation": {
                            "description": "Type of subbalance (sub account)",
                            "type": "string",
                            "enum": [
                                "gsb",
                                "erzeugung",
                                "eigenstrom",
                                "co2",
                                "baeume"
                            ]
                        }
                    }
                }
            }
        },
        {
            "name": "gsiBesthour",
            "url": "https://corrently.p.rapidapi.com/gsi/bestHour",
            "description": "Simple Wrapper around the GreenPowerIndex for easy integration into almost any SmartHome system that allows access to a JSON/REST Service This endpoint is designed to indicate if a device should be turned on or off. (Switch state).\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "zip",
                    "type": "STRING",
                    "description": "Zipcode (Postleitzahl) of a city in Germany.",
                    "default": ""
                },
                {
                    "name": "timeframe",
                    "type": "NUMBER",
                    "description": "Number of hours to check (default 24 hours from now).",
                    "default": ""
                },
                {
                    "name": "key",
                    "type": "STRING",
                    "description": "Any valid Stromkonto account (address).",
                    "default": ""
                },
                {
                    "name": "hours",
                    "type": "NUMBER",
                    "description": "How many hours in row do you need the device turned on?",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/gsi/bestHour\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": true,
            "headers": {},
            "schema": {
                "type": "boolean",
                "description": "true if device should be turned on now. false if not."
            }
        },
        {
            "name": "quittungTSEsignature",
            "url": "https://corrently.p.rapidapi.com/quittung/tsesignature",
            "description": "Allows to retrieve digital signature for a given receipt.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Quittung Identifier  (serialnumber generated during receipt generation process)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tsesignature\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "gsiMarketdata",
            "url": "https://corrently.p.rapidapi.com/gsi/marketdata",
            "description": "Compatible to awattar (https://api.awattar.de/v1/marketdata) API interface but data comes from GreenPowerIndex instead of EPEXSpot.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "zip",
                    "type": "STRING",
                    "description": "Zipcode (Postleitzahl) of a city in Germany.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/gsi/marketdata\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "data": [
                    {
                        "start_timestamp": 1609293600000,
                        "end_timestamp": 1609293600000,
                        "marketprice": 43
                    }
                ]
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "Energyprice for the upcomming hours",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "start_timestamp": {
                                    "description": "Timestamp in Standard Milliseconds",
                                    "type": "integer"
                                },
                                "end_timestamp": {
                                    "description": "Timestamp in Standard Milliseconds",
                                    "type": "integer"
                                },
                                "marketprice": {
                                    "description": "Actual Marketprice for regional green power in EUR per MWh",
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "quittungZugferd",
            "url": "https://corrently.p.rapidapi.com/quittung/zugferd",
            "description": "Allows to retrieve XML of the zugferd invoice.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Quittung Identifier  (serialnumber generated during receipt generation process)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/zugferd\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "quittungCreate",
            "url": "https://corrently.p.rapidapi.com/quittung/create",
            "description": "Creates a full featured receipt (Quittung) for an energy delivery as it appears on a charging session or similar events. Allows to embed receipt generation directly into external services.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/create\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "string",
                "description": "Token for this receipt. It might be extended as 'token' parameter to retrieve actual receipt [sample](https://corrently.de/service/quittung.html?token=0x3C4750bf93aa96e55A0d60be334B6b6E14DCe5bc)"
            }
        },
        {
            "name": "omActivities",
            "url": "https://corrently.p.rapidapi.com/alternative/openmeter/activities",
            "description": "Provides a list of available meterrs in the OpenMETER project ( https://www.openmeter.de/ ) which grants access for analytics as data discovery.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/alternative/openmeter/activities\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "meterId": "gAAAAABgsYVSfcCjJZV5w2wGBTzOXCihY7dMaDyypwcbJzAELvxeCDaXiy65H2QwtY-7usSOfoqEIomTJjQb1yyIXZfFnTY2pmLgIu_DVw1rjppFte56yWBD5Fgrmbh2KyOkMNUr8zxO",
                "manufacturerId": "",
                "location": "",
                "type": "",
                "measurementType": "",
                "loadProfileType": "",
                "scalingFactor": 0,
                "currentScalingFactor": 0,
                "voltageScalingFactor": 0,
                "meta": ""
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "meterId": {
                            "description": "identifier to be used in other methods like readings or activities.",
                            "type": "string"
                        },
                        "manufacturerId": {
                            "description": "DLMS manufacturerId",
                            "type": "string"
                        },
                        "location": {
                            "description": "Basic address information for geo coding",
                            "type": "string"
                        },
                        "type": {
                            "description": "Device type of the meter",
                            "type": "string"
                        },
                        "measurementType": {
                            "description": "Physical quantity being measured by the meter",
                            "type": "string"
                        },
                        "loadProfileType": {
                            "description": "Metering load profile type associated with the meter",
                            "type": "string"
                        },
                        "scalingFactor": {
                            "description": "Factor imposed on metered current AND voltage by a transducer",
                            "type": "integer"
                        },
                        "currentScalingFactor": {
                            "description": "Factor imposed on metered current by a transducer",
                            "type": "integer"
                        },
                        "voltageScalingFactor": {
                            "description": "Factor imposed on metered voltage by a transducer",
                            "type": "integer"
                        },
                        "meta": {
                            "description": "Statistical metadata for this household",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "name": "easeeSessions",
            "url": "https://corrently.p.rapidapi.com/alternative/easee/lastSessions",
            "description": "Refer to easee.cloud API for details.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "username",
                    "type": "STRING",
                    "description": "Username as used on easy.cloud",
                    "default": ""
                },
                {
                    "name": "password",
                    "type": "STRING",
                    "description": "Password as used on easy.cloud",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/alternative/easee/lastSessions\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "EH780684",
                "name": "",
                "lastSession": ""
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "description": "Given ID by easee api",
                            "type": "string"
                        },
                        "name": {
                            "description": "Name set for charger",
                            "type": "string"
                        },
                        "lastSession": {
                            "description": "lastSession Info as given by easee API",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "name": "wimstatus",
            "url": "https://corrently.p.rapidapi.com/wim/status",
            "description": "Access to status information of an existing metering change and allocation process.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "vid",
                    "type": "STRING",
                    "description": "VID key of the process.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/wim/status\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "wim_status": "Erfolgreiche Pr\u00fcfung",
                "wim_started": 1615914297977
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "wim_status": {
                        "description": "Latest Status",
                        "type": "string"
                    },
                    "wim_started": {
                        "description": "Starting time of process",
                        "type": "integer"
                    }
                }
            }
        },
        {
            "name": "quittungTSE",
            "url": "https://corrently.p.rapidapi.com/quittung/tse",
            "description": "Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Quittung Identifier  (serialnumber generated during receipt generation process)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tse\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "raw": "",
                "signature": "",
                "publickey": ""
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "JSON object that got signed by TSE."
                    },
                    "raw": {
                        "description": "Datastring of JSON Object as it got used to create signature.",
                        "type": "string"
                    },
                    "signature": {
                        "description": "Resulting signature by signing raw datastring using private key of TSE.",
                        "type": "string"
                    },
                    "publickey": {
                        "description": "Public Key of TSE",
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "co2sources",
            "url": "https://corrently.p.rapidapi.com/co2/sources",
            "description": "Valid and certified sources of co2 compensation.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/co2/sources\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "meteringPost",
            "url": "https://corrently.p.rapidapi.com/metering/reading",
            "description": "Post meter reading and get it decorated. Best practice is to first create a new Stromkonto with the register method and choose a nice secret to protect updates. Now regularly send updates to get readings (consumption) split into green power (1.8.1) and grey power (1.8.2).\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/metering/reading\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "account": "",
                "1.8.0": 0,
                "1.8.1": 0,
                "1.8.2": 0,
                "timeStamp": 0,
                "_processingTime": 0,
                "co2_g_standard": 0,
                "co2_g_oekostrom": 0
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "account": {
                        "description": "Stromkonto/Metering address allocated (this is not the MELOID!)",
                        "type": "string"
                    },
                    "1.8.0": {
                        "description": "Reading as provided as input in Wh",
                        "type": "integer"
                    },
                    "1.8.1": {
                        "description": "Green energy calculated using Green Power Index (Gr\u00fcnstromIndex) in Wh",
                        "type": "integer"
                    },
                    "1.8.2": {
                        "description": "Grey energy calculated using Green Power Index (Gr\u00fcnstromIndex) in Wh",
                        "type": "integer"
                    },
                    "timeStamp": {
                        "description": "API Consensus time this reading was fully received",
                        "type": "integer"
                    },
                    "_processingTime": {
                        "description": "Time this reading got imported into consensus (e.q. signed timestamp).",
                        "type": "integer"
                    },
                    "co2_g_standard": {
                        "description": "CO2 Emission of metered energy in a standard mix",
                        "type": "integer"
                    },
                    "co2_g_oekostrom": {
                        "description": "CO2 Emission of metered energy in a green energy mix (e.q. \u00d6kostromtarif)",
                        "type": "integer"
                    }
                }
            }
        },
        {
            "name": "stromkontoChoices",
            "url": "https://corrently.p.rapidapi.com/stromkonto/choices",
            "description": "Signable choices (contract changes) for customer.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Ethereum style address referencing a valid account alias (never use Stromkonto directly!).",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/choices\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "soll": 20,
                "haben": 20,
                "balance": 20,
                "txs": [
                    {
                        "timeStamp": 1606777200000,
                        "txid": "722d30b2-b46f-4ed4-a8cd-16d262180d37",
                        "cashier": "Miller",
                        "txtype": "bank.incGSB",
                        "value": 1337
                    }
                ],
                "variation": "gsb"
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "soll": {
                            "description": "Sum due by account",
                            "type": "integer"
                        },
                        "haben": {
                            "description": "Sum owned by account",
                            "type": "integer"
                        },
                        "balance": {
                            "description": "Sum owned - sum due by account",
                            "type": "integer"
                        },
                        "txs": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "timeStamp": {
                                        "description": "Cross signed timestamp of transaction",
                                        "type": "integer"
                                    },
                                    "txid": {
                                        "description": "Unique hash of this transaction as provided by counter signing party",
                                        "type": "string"
                                    },
                                    "cashier": {
                                        "description": "Pretty print of counter signing party",
                                        "type": "string"
                                    },
                                    "txtype": {
                                        "description": "Type of transaction per cashier implementation and schema",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "Amount covered by transaction",
                                        "type": "integer"
                                    }
                                }
                            }
                        },
                        "variation": {
                            "description": "Type of subbalance (sub account)",
                            "type": "string",
                            "enum": [
                                "gsb",
                                "erzeugung",
                                "eigenstrom",
                                "co2",
                                "baeume"
                            ]
                        }
                    }
                }
            }
        },
        {
            "name": "co2price",
            "url": "https://corrently.p.rapidapi.com/co2/price",
            "description": "All CO2 offset prices are based on VCS Verified CO2 Emission Reduction In accordance with the requirements of ISO 14064-1. CO2 prices are actual market prices and may change every hour.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "kwh",
                    "type": "NUMBER",
                    "description": "Kilo Watt hours of electricity to co2 offset.",
                    "default": "30"
                },
                {
                    "name": "co2",
                    "type": "NUMBER",
                    "description": "CO2 equivalence in gram to compensate",
                    "default": "12345"
                },
                {
                    "name": "liter",
                    "type": "NUMBER",
                    "description": "Liter of fuel to compensate.",
                    "default": "30"
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/co2/price\"\nquerystring = {\"kwh\": kwh, \"co2\": co2, \"liter\": liter}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "priceCent": 371,
                "priceEUR": "3.71",
                "reqCO2": 0,
                "getCO2": 0,
                "remainCO2": 0
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "priceCent": {
                        "description": "EUR Cent price of co2 offset certificate",
                        "type": "integer"
                    },
                    "priceEUR": {
                        "description": "EUR price of co2 offset certificate",
                        "type": "string"
                    },
                    "reqCO2": {
                        "description": "Requested CO2 to offset",
                        "type": "number"
                    },
                    "getCO2": {
                        "description": "CO2 offset you receive. Might be more than requested, due to minimum requirements on the market.",
                        "type": "number"
                    },
                    "remainCO2": {
                        "description": "Remaining CO2 (getCO2-reqCO2)",
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "prepareTransaction",
            "url": "https://corrently.p.rapidapi.com/stromkonto/prepareTransaction",
            "description": "Prepares and inques a transaction (transfer) between two accounts (Stromkonten). This might be used to send any balanced entity. Using this endpoint will only prepare the transaction and enques it for signing and countersigning. This is done from within the user UI using validation process. Note: This API method does not validate any transations. In other words authentication, authorization, validation and actual transfer of value is done using a smart contract during processing in the energy blockchain.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/prepareTransaction\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "quittungComit",
            "url": "https://corrently.p.rapidapi.com/quittung/commit",
            "description": "Uses collected fields or provided fields to create a final receipt (Strom-Quittung).\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/commit\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "string",
                "description": "Unique ID of a receipt. It might be used via https://api.corrently.io/v2.0/quittung/pdf?token= to retrieve a PDF version of receipt or via   https://corrently.de/service/quittung.html?token= to get online version."
            }
        },
        {
            "name": "quittungPrepare",
            "url": "https://corrently.p.rapidapi.com/quittung/prepare",
            "description": "During the first call an account parameter will be returned within the result object. Any other parameter will be set inside the preperation. If account is put into body/request in following requests, the existing collection will be extended/updated with the provided body parameters/values.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/prepare\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {
                "type": "string",
                "description": "All collected values for an account (eq. session)."
            }
        },
        {
            "name": "tariffcomponents",
            "url": "https://corrently.p.rapidapi.com/tariff/components",
            "description": "Provides insides into the different cost components of energy for a private household.\nSample Request: https://api.corrently.io/v2.0/tariff/components?email=demo%40corrently.io&zip=69168&kwha=3300\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "email",
                    "type": "STRING",
                    "description": "Valid email address to assign request to (pre offer generation). Ensure GDPR (DSGVO) at any time",
                    "default": ""
                },
                {
                    "name": "wh",
                    "type": "NUMBER",
                    "description": "If provided together with milliseconds, a cost component stament for a particular event (like charging a car) will be created.",
                    "default": ""
                },
                {
                    "name": "zipcode",
                    "type": "STRING",
                    "description": "Zipcode (Postzleitzahl) of a city in Germany.",
                    "default": ""
                },
                {
                    "name": "milliseconds",
                    "type": "NUMBER",
                    "description": "If provided all results will be scaled to this timeframe",
                    "default": ""
                },
                {
                    "name": "kwha",
                    "type": "NUMBER",
                    "description": "Total amount of energy in kilo-watt-hours per year. (sample 2100)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/tariff/components\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "sum": 22.12,
                "describtion": "Grundgeb\u00fchr",
                "mutlityplier": "month",
                "per": 0.012,
                "components": []
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "sum": {
                        "description": "Total sum in Euro for this price component.",
                        "type": "number"
                    },
                    "describtion": {
                        "description": "What is this price component about",
                        "type": "string"
                    },
                    "mutlityplier": {
                        "description": "Frequency/dependency of component",
                        "type": "string"
                    },
                    "per": {
                        "description": "Single unit price multiyplier is based on",
                        "type": "number"
                    },
                    "components": {
                        "description": "Sub components of this price",
                        "type": "array"
                    }
                }
            }
        },
        {
            "name": "stromkontoRegister",
            "url": "https://corrently.p.rapidapi.com/stromkonto/register",
            "description": "Calling this method with an unregistered (new) email will create a new account (Stromkonto) with all balances having a value of `0` and no transaction history. In addition some basic properties like region and zipcode are set to allow further operation of account.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/register\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "gsiPrediction",
            "url": "https://corrently.p.rapidapi.com/gsi/prediction",
            "description": "Retrieval the GreenPowerIndex (Gr\u00fcnstromIndex) for a given city (by zipcode) in Germany.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "zip",
                    "type": "STRING",
                    "description": "Zipcode (Postleitzahl) of a city in Germany.",
                    "default": ""
                },
                {
                    "name": "key",
                    "type": "STRING",
                    "description": "Any valid Stromkonto account (address).",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/gsi/prediction\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "forecast": [
                    {
                        "epochtime": 1609293600,
                        "timeStamp": 1609293600000,
                        "gsi": 43,
                        "scaled": true,
                        "sci": 43,
                        "energyprice": -0.219,
                        "co2_g_oekostrom": 23
                    }
                ],
                "location": {
                    "zip": "",
                    "city": ""
                },
                "matrix": {
                    "h0": {
                        "avg_1": "",
                        "avg_2": "",
                        "avg_3": ""
                    }
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "forecast": {
                        "description": "Prediction for the upcomming hours",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "epochtime": {
                                    "description": "Timestamps in Seconds",
                                    "type": "integer"
                                },
                                "timeStamp": {
                                    "description": "Timestamp in Standard Milliseconds",
                                    "type": "integer"
                                },
                                "gsi": {
                                    "description": "Actual GreenPowerIndex for given Timestamp (between 0-100)",
                                    "type": "integer"
                                },
                                "scaled": {
                                    "description": "Indicates if scaling is in operation to predict values",
                                    "type": "boolean"
                                },
                                "sci": {
                                    "description": "Subindex just for Solar Energy",
                                    "type": "integer"
                                },
                                "energyprice": {
                                    "description": "Local/regional energyprice modification (cent per kWh or euro per MWh).",
                                    "type": "number"
                                },
                                "co2_g_oekostrom": {
                                    "description": "CO2 footprint in Gramm per kwh (only Green Power)",
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "location": {
                        "description": "Standarized location info sourced for prediction",
                        "type": "object",
                        "properties": {
                            "zip": {
                                "type": "string",
                                "description": "Zipcode (Postleitzahl)"
                            },
                            "city": {
                                "type": "string",
                                "description": "Pretty Print city name"
                            }
                        }
                    },
                    "matrix": {
                        "description": "Device switching recommendation.",
                        "type": "object",
                        "properties": {
                            "h0": {
                                "type": "object",
                                "description": "Indicates number of hours a device should run",
                                "properties": {
                                    "avg_1": {
                                        "type": "string",
                                        "description": "device should run in 1 hour"
                                    },
                                    "avg_2": {
                                        "type": "string",
                                        "description": "device should run in 2 hours"
                                    },
                                    "avg_3": {
                                        "type": "string",
                                        "description": "device should run in 3 hour"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "omMeters",
            "url": "https://corrently.p.rapidapi.com/alternative/openmeter/meters",
            "description": "Provides a list of available meterrs in the OpenMETER project ( https://www.openmeter.de/ ) which grants access for analytics as data discovery.\n",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/alternative/openmeter/meters\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "meterId": "gAAAAABgsYVSfcCjJZV5w2wGBTzOXCihY7dMaDyypwcbJzAELvxeCDaXiy65H2QwtY-7usSOfoqEIomTJjQb1yyIXZfFnTY2pmLgIu_DVw1rjppFte56yWBD5Fgrmbh2KyOkMNUr8zxO",
                "manufacturerId": "",
                "location": "",
                "type": "",
                "measurementType": "",
                "loadProfileType": "",
                "scalingFactor": 0,
                "currentScalingFactor": 0,
                "voltageScalingFactor": 0,
                "meta": ""
            },
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "meterId": {
                            "description": "identifier to be used in other methods like readings or activities.",
                            "type": "string"
                        },
                        "manufacturerId": {
                            "description": "DLMS manufacturerId",
                            "type": "string"
                        },
                        "location": {
                            "description": "Basic address information for geo coding",
                            "type": "string"
                        },
                        "type": {
                            "description": "Device type of the meter",
                            "type": "string"
                        },
                        "measurementType": {
                            "description": "Physical quantity being measured by the meter",
                            "type": "string"
                        },
                        "loadProfileType": {
                            "description": "Metering load profile type associated with the meter",
                            "type": "string"
                        },
                        "scalingFactor": {
                            "description": "Factor imposed on metered current AND voltage by a transducer",
                            "type": "integer"
                        },
                        "currentScalingFactor": {
                            "description": "Factor imposed on metered current by a transducer",
                            "type": "integer"
                        },
                        "voltageScalingFactor": {
                            "description": "Factor imposed on metered voltage by a transducer",
                            "type": "integer"
                        },
                        "meta": {
                            "description": "Statistical metadata for this household",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "name": "quittungTSEData",
            "url": "https://corrently.p.rapidapi.com/quittung/tsedata",
            "description": "Allows to retrieve input string for a signing process.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Quittung Identifier  (serialnumber generated during receipt generation process)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tsedata\"\nquerystring = {\"account\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tsedata\"\nquerystring = {\"account\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "stromkontoLogin",
            "url": "https://corrently.p.rapidapi.com/stromkonto/login",
            "description": "Sends a mail to a given email address to login this user. This function makes life a bit easier in order to not having to deal with private key protection on the user side as a shared key is used to sign transactions onbehalf of a particular account.  However viewing consensus information (balances) are public and *might move* from account to account without prior notification. Best practice for third party uses is to always start a session with the login RESP call and only create a user in case the response indicates an `unregistered` status.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/login\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/login\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Registration status of a user. In case unregistered gets returned use the `register` endpoint to (re-)register.",
                        "type": "string",
                        "enum": [
                            "registered",
                            "unregistered"
                        ]
                    }
                }
            }
        },
        {
            "name": "quittungTSEsignature",
            "url": "https://corrently.p.rapidapi.com/quittung/tsesignature",
            "description": "Allows to retrieve digital signature for a given receipt.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Quittung Identifier  (serialnumber generated during receipt generation process)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tsesignature\"\nquerystring = {\"account\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tsesignature\"\nquerystring = {\"account\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "quittungCreate",
            "url": "https://corrently.p.rapidapi.com/quittung/create",
            "description": "Creates a full featured receipt (Quittung) for an energy delivery as it appears on a charging session or similar events. Allows to embed receipt generation directly into external services.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/create\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/create\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "string",
                "description": "Token for this receipt. It might be extended as 'token' parameter to retrieve actual receipt [sample](https://corrently.de/service/quittung.html?token=0x3C4750bf93aa96e55A0d60be334B6b6E14DCe5bc)"
            }
        },
        {
            "name": "quittungTSE",
            "url": "https://corrently.p.rapidapi.com/quittung/tse",
            "description": "Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "account",
                    "type": "STRING",
                    "description": "Quittung Identifier  (serialnumber generated during receipt generation process)",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tse\"\nquerystring = {\"account\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/tse\"\nquerystring = {\"account\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "JSON object that got signed by TSE."
                    },
                    "raw": {
                        "description": "Datastring of JSON Object as it got used to create signature.",
                        "type": "string"
                    },
                    "signature": {
                        "description": "Resulting signature by signing raw datastring using private key of TSE.",
                        "type": "string"
                    },
                    "publickey": {
                        "description": "Public Key of TSE",
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "meteringPost",
            "url": "https://corrently.p.rapidapi.com/metering/reading",
            "description": "Post meter reading and get it decorated. Best practice is to first create a new Stromkonto with the register method and choose a nice secret to protect updates. Now regularly send updates to get readings (consumption) split into green power (1.8.1) and grey power (1.8.2).\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/metering/reading\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/metering/reading\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "account": {
                        "description": "Stromkonto/Metering address allocated (this is not the MELOID!)",
                        "type": "string"
                    },
                    "1.8.0": {
                        "description": "Reading as provided as input in Wh",
                        "type": "integer"
                    },
                    "1.8.1": {
                        "description": "Green energy calculated using Green Power Index (Gr\u00fcnstromIndex) in Wh",
                        "type": "integer"
                    },
                    "1.8.2": {
                        "description": "Grey energy calculated using Green Power Index (Gr\u00fcnstromIndex) in Wh",
                        "type": "integer"
                    },
                    "timeStamp": {
                        "description": "API Consensus time this reading was fully received",
                        "type": "integer"
                    },
                    "_processingTime": {
                        "description": "Time this reading got imported into consensus (e.q. signed timestamp).",
                        "type": "integer"
                    },
                    "co2_g_standard": {
                        "description": "CO2 Emission of metered energy in a standard mix",
                        "type": "integer"
                    },
                    "co2_g_oekostrom": {
                        "description": "CO2 Emission of metered energy in a green energy mix (e.q. \u00d6kostromtarif)",
                        "type": "integer"
                    }
                }
            }
        },
        {
            "name": "prepareTransaction",
            "url": "https://corrently.p.rapidapi.com/stromkonto/prepareTransaction",
            "description": "Prepares and inques a transaction (transfer) between two accounts (Stromkonten). This might be used to send any balanced entity. Using this endpoint will only prepare the transaction and enques it for signing and countersigning. This is done from within the user UI using validation process. Note: This API method does not validate any transations. In other words authentication, authorization, validation and actual transfer of value is done using a smart contract during processing in the energy blockchain.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/prepareTransaction\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/prepareTransaction\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "quittungComit",
            "url": "https://corrently.p.rapidapi.com/quittung/commit",
            "description": "Uses collected fields or provided fields to create a final receipt (Strom-Quittung).\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/commit\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/commit\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "string",
                "description": "Unique ID of a receipt. It might be used via https://api.corrently.io/v2.0/quittung/pdf?token= to retrieve a PDF version of receipt or via   https://corrently.de/service/quittung.html?token= to get online version."
            }
        },
        {
            "name": "quittungPrepare",
            "url": "https://corrently.p.rapidapi.com/quittung/prepare",
            "description": "During the first call an account parameter will be returned within the result object. Any other parameter will be set inside the preperation. If account is put into body/request in following requests, the existing collection will be extended/updated with the provided body parameters/values.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/prepare\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/quittung/prepare\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "string",
                "description": "All collected values for an account (eq. session)."
            }
        },
        {
            "name": "stromkontoRegister",
            "url": "https://corrently.p.rapidapi.com/stromkonto/register",
            "description": "Calling this method with an unregistered (new) email will create a new account (Stromkonto) with all balances having a value of `0` and no transaction history. In addition some basic properties like region and zipcode are set to allow further operation of account.\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/register\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://corrently.p.rapidapi.com/stromkonto/register\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"corrently.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        }
    ]
}