{
    "tool_name": "Enode API",
    "tool_description": "A single API for hundreds of green energy devices. Easily connect to and control your customers\u2019 electric vehicles, thermostats, solar panels, batteries and more.",
    "title": "Enode API",
    "pricing": "FREE",
    "score": null,
    "home_url": "https://rapidapi.com/enode-enode-default/api/enode-api/",
    "host": "enode-api.p.rapidapi.com",
    "api_list": [
        {
            "name": "listHVACs",
            "url": "https://enode-api.p.rapidapi.com/hvacs",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "string",
                    "description": "HVAC IDs"
                },
                "maxItems": 2
            }
        },
        {
            "name": "getHealthChargerVendors",
            "url": "https://enode-api.p.rapidapi.com/health/chargers",
            "description": "Lists the available charger vendors. If you authenticate with a client or link token we also show the vendors that your client has beta access to.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/health/chargers\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "vendor": "EASEE",
                    "displayName": "Easee",
                    "status": "READY"
                },
                {
                    "vendor": "WALLBOX",
                    "displayName": "Wallbox",
                    "status": "READY"
                },
                {
                    "vendor": "ZAPTEC",
                    "displayName": "Zaptec",
                    "status": "READY"
                },
                {
                    "vendor": "EO",
                    "displayName": "EO",
                    "status": "READY"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "vendor": {
                            "type": "string",
                            "title": "Charger Vendor",
                            "description": "Charger Vendor",
                            "enum": [
                                "ZAPTEC",
                                "EASEE",
                                "WALLBOX",
                                "EO",
                                "CHARGEAMPS",
                                "EVBOX"
                            ]
                        },
                        "displayName": {
                            "type": "string",
                            "description": "A formatted and properly cased vendor brand name, suitable for reading by humans."
                        },
                        "portalName": {
                            "type": "string",
                            "description": "The name of the first party service or app that the user normally logs into."
                        },
                        "status": {
                            "type": "string",
                            "description": "Ready-state of the Vendor. Currently always `READY`.",
                            "enum": [
                                "READY",
                                "ELEVATED_ERROR_RATE",
                                "OUTAGE"
                            ]
                        }
                    }
                },
                "maxItems": 2
            }
        },
        {
            "name": "getVehiclesAction",
            "url": "https://enode-api.p.rapidapi.com/vehicles/actions/{actionid}",
            "description": "Returns the current state of the requested action.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "actionId",
                    "type": "STRING",
                    "description": "ID of the Action",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/actions/{actionid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "vehicle",
                "kind": "START",
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of action",
                        "enum": [
                            "START",
                            "STOP"
                        ],
                        "default": "<string>"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "getVehiclesVehicleidSmartchargingpolicy",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-policy",
            "description": "Get a vehicle's [Smart Charging](/docs/smart-charging/introduction) policy",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-policy\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "isEnabled": "<boolean>",
                "deadline": "08:00"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "description": "[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via the [Update Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy) endpoint.",
                "properties": {
                    "isEnabled": {
                        "type": "boolean",
                        "description": "When enabled, this vehicle's charging status may be controlled by [Smart Charging](/docs/smart-charging/introduction)",
                        "default": "<boolean>"
                    },
                    "deadline": {
                        "type": "string",
                        "description": "The deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. The deadline is expressed as a time on a 24h clock in UTC",
                        "pattern": "\\d{2}:\\d{2}",
                        "default": "<string>"
                    }
                }
            }
        },
        {
            "name": "postSetHvacFollowSchedule",
            "url": "https://enode-api.p.rapidapi.com/hvacs/{hvacid}/follow-schedule",
            "description": "Tell an HVAC unit to follow the schedule set on the device. Only available if `SCHEDULED` is present in the target's `capabilities.capableHoldType`. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit's fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}/follow-schedule\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "hvac",
                "targetTemperature": {
                    "temperature": 22,
                    "deadband": 4
                },
                "target": {
                    "mode": {
                        "0": "H",
                        "1": "E",
                        "2": "A",
                        "3": "T"
                    },
                    "heatSetpoint": 22,
                    "coolSetpoint": 24,
                    "holdType": "PERMANENT"
                },
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the entity asset (HVAC) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "hvac"
                        ]
                    },
                    "targetTemperature": {
                        "type": "object",
                        "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                        "required": [
                            "temperature"
                        ],
                        "properties": {
                            "temperature": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Desired temperature",
                                "default": "<number>"
                            },
                            "deadband": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                "default": "<number>"
                            }
                        }
                    },
                    "target": {
                        "type": "object",
                        "description": "Target mode for an HVAC device",
                        "required": [
                            "mode",
                            "holdType"
                        ],
                        "properties": {
                            "mode": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "HEAT",
                                            "COOL",
                                            "AUTO",
                                            "OFF"
                                        ],
                                        "description": "HVAC Mode"
                                    },
                                    {
                                        "type": "string",
                                        "description": "The HVAC's mode."
                                    }
                                ]
                            },
                            "heatSetpoint": {
                                "type": "number",
                                "description": "If mode allows, heat when `currentTemperature` falls below this point."
                            },
                            "coolSetpoint": {
                                "type": "number",
                                "description": "If mode allows, cool when `currentTemperature` rises above this point."
                            },
                            "holdType": {
                                "type": "string",
                                "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                "enum": [
                                    "PERMANENT",
                                    "SCHEDULED"
                                ]
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the HVAC device."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the HVAC action",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the HVAC device for changes in `targetTemperature`."
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The HVAC device has confirmed that the requested `targetTemperature` has been applied."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The HVAC device failed to respond to our attempts to set the `targetTemperature` within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another HVAC action was sent to the same device, canceling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "getStatisticsProduction",
            "url": "https://enode-api.p.rapidapi.com/statistics/production",
            "description": "Returns a normalized time series of statistics about power production and price for the User.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Earliest date to include in the response. Cannot be greater than endDate.",
                    "default": "<date>"
                }
            ],
            "optional_parameters": [
                {
                    "name": "type",
                    "type": "STRING",
                    "description": "Get statistics for this hardware type.",
                    "default": "<string>"
                },
                {
                    "name": "chargingLocationId",
                    "type": "STRING",
                    "description": "Filter statistics to only include this charging location.",
                    "default": "<string>"
                },
                {
                    "name": "utcOffset",
                    "type": "NUMBER",
                    "description": "Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing `utcOffset` instead aligns these to the viewer's timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid.",
                    "default": "-8"
                },
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Latest date to include in the response (defaults to current date/time).",
                    "default": "<date>"
                },
                {
                    "name": "resolution",
                    "type": "STRING",
                    "description": "The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified.",
                    "default": "DAY"
                },
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "Filter statistics to only include a specific entity. Hardware category of the entity must match the `type` parameter.",
                    "default": "<string>"
                }
            ],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/statistics/production\"\nquerystring = {\"type\": type, \"chargingLocationId\": charginglocationid, \"utcOffset\": utcoffset, \"endDate\": enddate, \"startDate\": startdate, \"resolution\": resolution, \"id\": id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "kw": {
                        "min": 0,
                        "max": 78,
                        "mean": 61
                    },
                    "kwhSum": 120,
                    "price": {
                        "min": 13.8,
                        "max": 14.4,
                        "mean": 14.1
                    },
                    "earningsSum": 3.14,
                    "date": "2021-01-19T09:37:36.845Z"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "kw": {
                            "type": "object",
                            "description": "Aggregate statistics for charge rate in kW",
                            "properties": {
                                "min": {
                                    "type": "number"
                                },
                                "max": {
                                    "type": "number"
                                },
                                "mean": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "min",
                                "max",
                                "mean"
                            ]
                        },
                        "kwhSum": {
                            "type": "number",
                            "description": "Total power consumption in kWh"
                        },
                        "price": {
                            "type": "object",
                            "description": "Aggregate statistics for power price (<CURRENCY> per kWh)",
                            "properties": {
                                "min": {
                                    "type": "number"
                                },
                                "max": {
                                    "type": "number"
                                },
                                "mean": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "min",
                                "max",
                                "mean"
                            ]
                        },
                        "earningsSum": {
                            "type": "number",
                            "description": "Total earnings in <CURRENCY>"
                        },
                        "date": {
                            "type": "string",
                            "format": "date",
                            "description": "The start date of this sample within the timeseries"
                        }
                    },
                    "required": [
                        "kw",
                        "kwhSum",
                        "price",
                        "earningsSum",
                        "date"
                    ]
                },
                "maxItems": 2
            }
        },
        {
            "name": "postWebhooksFirehoseTest",
            "url": "https://enode-api.p.rapidapi.com/webhooks/firehose/test",
            "description": "Trigger a  \"enode:firehose:test\" payload to be sent to your configured Firehose Webhook URL. This will reset your webhook to a healthy state on success.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/webhooks/firehose/test\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "getCharginglocations",
            "url": "https://enode-api.p.rapidapi.com/charging-locations",
            "description": "Returns a list of Charging Locations registered to the User",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/charging-locations\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                    "name": "Home",
                    "longitude": 10.757933,
                    "latitude": 59.911491,
                    "timezoneName": "Europe/Copenhagen"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "id",
                        "name",
                        "longitude",
                        "latitude"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Charging Location ID"
                        },
                        "name": {
                            "type": "string",
                            "description": "User-supplied name for the Charging Location",
                            "default": "<string>"
                        },
                        "longitude": {
                            "type": "number",
                            "description": "Longitude in degrees",
                            "default": "<number>"
                        },
                        "latitude": {
                            "type": "number",
                            "description": "Latitude in degrees",
                            "default": "<number>"
                        },
                        "timezoneName": {
                            "type": "string",
                            "description": "An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to 'UTC'.",
                            "default": "<string>"
                        }
                    }
                },
                "maxItems": 2
            }
        },
        {
            "name": "getVehiclesVehicleid",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}",
            "description": " ",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [
                {
                    "name": "field[]",
                    "type": "ARRAY",
                    "description": "If you specify any fields here, we make a request to the Vehicle's OEM APIs and return the updated data.\n\n This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the `lastSeen` & `isReachable` fields on the vehicle).\n\nBy default, no fields are included, and the latest cached full Vehicle object will be returned.",
                    "default": "[\n  \"chargeState\"\n]"
                }
            ],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}\"\nquerystring = {\"field[]\": field}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "",
                "vendor": "TESLA",
                "lastSeen": "",
                "isReachable": true,
                "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "information": {
                    "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                    "vin": "5YJYGDEF2LFR00942",
                    "brand": "Tesla",
                    "model": "Model S P85",
                    "year": 2020
                },
                "chargeState": {
                    "batteryLevel": 38,
                    "range": 127.5,
                    "isPluggedIn": true,
                    "isCharging": true,
                    "isFullyCharged": true,
                    "batteryCapacity": 73.21,
                    "chargeLimit": 80,
                    "chargeRate": 40.1,
                    "chargeTimeRemaining": 319,
                    "lastUpdated": "2020-01-07T16:21:76Z"
                },
                "smartChargingPolicy": {
                    "isEnabled": "<boolean>",
                    "deadline": "08:00"
                },
                "location": {
                    "longitude": 10.757933,
                    "latitude": 59.911491,
                    "lastUpdated": "2020-04-07T17:04:26Z"
                },
                "odometer": {
                    "distance": 24650,
                    "lastUpdated": "2020-01-07T16:21:76Z"
                },
                "capabilities": {
                    "chargeState": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "location": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "information": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "odometer": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "startCharging": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "stopCharging": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "smartCharging": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    }
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Vehicle ID"
                    },
                    "vendor": {
                        "type": "string",
                        "title": "Vehicle Vendor",
                        "description": "Vehicle Vendor",
                        "enum": [
                            "AUDI",
                            "BMW",
                            "HONDA",
                            "HYUNDAI",
                            "JAGUAR",
                            "KIA",
                            "MERCEDES",
                            "MINI",
                            "NISSAN",
                            "PEUGEOT",
                            "PORSCHE",
                            "RENAULT",
                            "SEAT",
                            "SKODA",
                            "TESLA",
                            "VOLKSWAGEN",
                            "VOLVO",
                            "FORD",
                            "OPEL",
                            "DS",
                            "TOYOTA",
                            "CITROEN",
                            "CUPRA",
                            "VAUXHALL"
                        ]
                    },
                    "lastSeen": {
                        "type": "string",
                        "format": "date",
                        "description": "ISO8601 UTC timestamp at which live data was last available from Enode's perspective."
                    },
                    "isReachable": {
                        "type": "boolean",
                        "description": "Whether live data from the vehicle is currently available from Enode's perspective. This 'reachability' may refer to reading from a cache operated by the vehicle's cloud service if that service has determined that its cache is valid."
                    },
                    "chargingLocationId": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "ID of the charging location the vehicle is currently positioned at (if any).",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "information": {
                        "type": "object",
                        "description": "Descriptive information about the Vehicle.",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The vendor's vehicle ID. Sometimes the same as the VIN. This value is deprecated because it changes over time. Do not use this value to refer to vehicles."
                            },
                            "vin": {
                                "type": "string",
                                "description": "Vehicle VIN"
                            },
                            "brand": {
                                "type": "string",
                                "description": "Vehicle brand"
                            },
                            "model": {
                                "type": "string",
                                "description": "Vehicle model"
                            },
                            "year": {
                                "type": "integer",
                                "description": "Vehicle production year"
                            }
                        }
                    },
                    "chargeState": {
                        "type": "object",
                        "description": "Information about the electric or hybrid battery.",
                        "properties": {
                            "batteryLevel": {
                                "type": "number",
                                "description": "Remaining battery in percent",
                                "minimum": 0,
                                "maximum": 100
                            },
                            "range": {
                                "type": "number",
                                "description": "Estimated remaining kilometers",
                                "minimum": 0
                            },
                            "isPluggedIn": {
                                "type": "boolean",
                                "description": "Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)"
                            },
                            "isCharging": {
                                "type": "boolean",
                                "description": "Current charging status of the vehicle"
                            },
                            "isFullyCharged": {
                                "type": "boolean",
                                "description": "Indicates whether the vehicle is fully charged. 'Fully charged' may be a `batteryLevel` of less than 100 if a maximum charge ceiling has been configured in the vehicle."
                            },
                            "batteryCapacity": {
                                "type": "number",
                                "description": "Vehicle's maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.",
                                "minimum": 0
                            },
                            "chargeLimit": {
                                "type": "number",
                                "description": "Charge limit, as a percent of `batteryCapacity`.",
                                "minimum": 0,
                                "maximum": 100
                            },
                            "chargeRate": {
                                "type": "number",
                                "description": "The current charge rate in kW.\n\nThis property is only available when the vehicle is charging, and is `null` any other time.",
                                "minimum": 0
                            },
                            "chargeTimeRemaining": {
                                "type": "number",
                                "description": "Estimated time until the current charging intent is completed, in minutes.\n\nThis property is only available when the vehicle is charging, and is `null` any other time."
                            },
                            "lastUpdated": {
                                "type": "string",
                                "format": "date",
                                "description": "ISO8601 UTC timestamp of last received charge state update"
                            }
                        }
                    },
                    "smartChargingPolicy": {
                        "type": "object",
                        "description": "[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via the [Update Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy) endpoint.",
                        "properties": {
                            "isEnabled": {
                                "type": "boolean",
                                "description": "When enabled, this vehicle's charging status may be controlled by [Smart Charging](/docs/smart-charging/introduction)",
                                "default": "<boolean>"
                            },
                            "deadline": {
                                "type": "string",
                                "description": "The deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. The deadline is expressed as a time on a 24h clock in UTC",
                                "pattern": "\\d{2}:\\d{2}",
                                "default": "<string>"
                            }
                        }
                    },
                    "location": {
                        "type": "object",
                        "description": "Vehicle's GPS coordinates with timestamp",
                        "properties": {
                            "longitude": {
                                "type": "number",
                                "description": "Longitude in degrees"
                            },
                            "latitude": {
                                "type": "number",
                                "description": "Latitude in degrees"
                            },
                            "lastUpdated": {
                                "type": "string",
                                "format": "date",
                                "description": "ISO8601 UTC timestamp of last received location"
                            }
                        }
                    },
                    "odometer": {
                        "type": "object",
                        "description": "Vehicle's odometer with timestamp",
                        "properties": {
                            "distance": {
                                "type": "number",
                                "description": "Odometer in kilometers"
                            },
                            "lastUpdated": {
                                "type": "string",
                                "format": "date",
                                "description": "ISO8601 UTC timestamp of last received odometer update"
                            }
                        }
                    },
                    "capabilities": {
                        "type": "object",
                        "description": "A collection of descriptors that describe the capabilities of this specific vehicle",
                        "properties": {
                            "chargeState": {
                                "allOf": [
                                    {
                                        "description": "Full availability of chargeState data."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "location": {
                                "allOf": [
                                    {
                                        "description": "Full availability of location data."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "information": {
                                "allOf": [
                                    {
                                        "description": "Full availability of information data."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "odometer": {
                                "allOf": [
                                    {
                                        "description": "Full availability of odometer data."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "startCharging": {
                                "allOf": [
                                    {
                                        "description": "Support for START charging command"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "stopCharging": {
                                "allOf": [
                                    {
                                        "description": "Support for STOP charging command"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "smartCharging": {
                                "allOf": [
                                    {
                                        "description": "Support for smartCharging. This value is dynamic and may change over time."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "putCharginglocationsCharginglocationid",
            "url": "https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}",
            "description": "Updates a charging location with new configuration.",
            "method": "PUT",
            "required_parameters": [
                {
                    "name": "chargingLocationId",
                    "type": "STRING",
                    "description": "ID of the Charging Location",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "name": "Home",
                "longitude": 10.757933,
                "latitude": 59.911491,
                "timezoneName": "Europe/Copenhagen"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "longitude",
                    "latitude"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Charging Location ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name for the Charging Location",
                        "default": "<string>"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude in degrees",
                        "default": "<number>"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude in degrees",
                        "default": "<number>"
                    },
                    "timezoneName": {
                        "type": "string",
                        "description": "An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to 'UTC'.",
                        "default": "<string>"
                    }
                }
            }
        },
        {
            "name": "updateHVAC",
            "url": "https://enode-api.p.rapidapi.com/hvacs/{hvacid}",
            "description": "Update the `chargingLocationId` field on an HVAC device.",
            "method": "PUT",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "mode": {
                    "0": "H",
                    "1": "E",
                    "2": "A",
                    "3": "T"
                },
                "heatSetpoint": 22,
                "coolSetpoint": 24,
                "holdType": "PERMANENT",
                "id": "8f39fa8d-8f10-4984-a319-741dc23848c0",
                "vendor": {
                    "0": "A",
                    "1": "D",
                    "2": "A",
                    "3": "X"
                },
                "lastSeen": "2020-04-07T17:04:26Z",
                "isReachable": true,
                "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "isActive": true,
                "currentTemperature": 20.8,
                "targetTemperature": {
                    "temperature": 22,
                    "deadband": 4
                },
                "consumptionRate": 1.8,
                "information": {
                    "brand": "ADAX",
                    "model": "Neo Wi-Fi Skirting",
                    "displayName": "Bedroom Panel Heater",
                    "groupName": "Bedroom",
                    "category": "HEATING"
                },
                "capabilities": {
                    "capableModes": [
                        "HEAT"
                    ],
                    "capableHoldTypes": [
                        "PERMANENT"
                    ],
                    "coolSetpointRange": {
                        "min": 15,
                        "max": 25
                    },
                    "heatSetpointRange": {
                        "min": 15,
                        "max": 25
                    },
                    "setpointDifferenceRange": {
                        "min": 0,
                        "max": 0
                    }
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "required": [
                    "id",
                    "lastSeen",
                    "isReachable"
                ],
                "allOf": [
                    {
                        "type": "object",
                        "description": "Target mode for an HVAC device",
                        "required": [
                            "mode",
                            "holdType"
                        ],
                        "properties": {
                            "mode": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "HEAT",
                                            "COOL",
                                            "AUTO",
                                            "OFF"
                                        ],
                                        "description": "HVAC Mode"
                                    },
                                    {
                                        "type": "string",
                                        "description": "The HVAC's mode."
                                    }
                                ]
                            },
                            "heatSetpoint": {
                                "type": "number",
                                "description": "If mode allows, heat when `currentTemperature` falls below this point."
                            },
                            "coolSetpoint": {
                                "type": "number",
                                "description": "If mode allows, cool when `currentTemperature` rises above this point."
                            },
                            "holdType": {
                                "type": "string",
                                "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                "enum": [
                                    "PERMANENT",
                                    "SCHEDULED"
                                ]
                            }
                        }
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "HVAC device ID"
                            },
                            "vendor": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "title": "HVAC Vendor",
                                        "description": "HVAC Vendor",
                                        "enum": [
                                            "TADO",
                                            "MILL",
                                            "ADAX",
                                            "ECOBEE",
                                            "SENSIBO",
                                            "HONEYWELL",
                                            "MITSUBISHI"
                                        ]
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "lastSeen": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The last time the HVAC unit was successfully communicated with"
                            },
                            "isReachable": {
                                "type": "boolean",
                                "description": "Whether live data from the HVAC unit is currently fetchable from Enode's perspective. It can happen that this 'reachability' refers to reading from a cache operated by the vendor's cloud service, if that service has determined that its cache is valid."
                            },
                            "chargingLocationId": {
                                "type": "string",
                                "description": "ID of the charging location the HVAC unit is housed at (if any)",
                                "default": "null"
                            },
                            "isActive": {
                                "type": "boolean",
                                "description": "Whether the HVAC unit is actively heating or cooling."
                            },
                            "currentTemperature": {
                                "type": "number",
                                "description": "Current air temperature reported by device in degrees Celsius."
                            },
                            "targetTemperature": {
                                "type": "object",
                                "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                "required": [
                                    "temperature"
                                ],
                                "properties": {
                                    "temperature": {
                                        "type": [
                                            "number",
                                            "null"
                                        ],
                                        "description": "Desired temperature",
                                        "default": "<number>"
                                    },
                                    "deadband": {
                                        "type": [
                                            "number",
                                            "null"
                                        ],
                                        "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                        "default": "<number>"
                                    }
                                }
                            },
                            "consumptionRate": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "The current rate of energy consumption in kW. An inactive HVAC will have a consumption rate of 0. This value is currently experimental and is typically estimated with a large margin of error.",
                                "minimum": 0
                            },
                            "information": {
                                "allOf": [
                                    {
                                        "type": "object",
                                        "description": "Descriptive information about the HVAC unit",
                                        "properties": {
                                            "brand": {
                                                "type": "string",
                                                "description": "Display name of OEM/vendor"
                                            },
                                            "model": {
                                                "type": "string",
                                                "description": "Device model name"
                                            },
                                            "displayName": {
                                                "type": "string",
                                                "description": "Name of the device, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names."
                                            },
                                            "groupName": {
                                                "type": "string",
                                                "description": "Name of the group the device belongs to, as set by the user on the device/vendor. Groups are typically presented as \"rooms\" or \"zones\"."
                                            },
                                            "category": {
                                                "type": "string",
                                                "enum": [
                                                    "HEATING",
                                                    "COOLING",
                                                    "HEAT_PUMP",
                                                    "AGGREGATOR"
                                                ],
                                                "description": "HVAC category"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object"
                                    }
                                ]
                            },
                            "capabilities": {
                                "type": "object",
                                "description": "An object describing valid states for this HVAC device.",
                                "properties": {
                                    "capableModes": {
                                        "type": [
                                            "array",
                                            "null"
                                        ],
                                        "description": "A list of valid modes for this HVAC device.",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "HEAT",
                                                "COOL",
                                                "AUTO",
                                                "OFF"
                                            ],
                                            "description": "HVAC Mode"
                                        },
                                        "maxItems": 2,
                                        "minItems": 2
                                    },
                                    "capableHoldTypes": {
                                        "type": [
                                            "array",
                                            "null"
                                        ],
                                        "description": "A list of valid hold types for this HVAC device.",
                                        "items": {
                                            "type": "string",
                                            "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                            "enum": [
                                                "PERMANENT",
                                                "SCHEDULED"
                                            ]
                                        },
                                        "maxItems": 2,
                                        "minItems": 2
                                    },
                                    "coolSetpointRange": {
                                        "allOf": [
                                            {
                                                "description": "The range of allowable values for `coolSetpoint`."
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "min": {
                                                        "type": "number",
                                                        "description": "The minimum allowable temperature, inclusive."
                                                    },
                                                    "max": {
                                                        "type": "number",
                                                        "description": "The maximum allowable temperature, inclusive."
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "heatSetpointRange": {
                                        "allOf": [
                                            {
                                                "description": "The range of allowable values for `heatSetpoint`."
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "min": {
                                                        "type": "number",
                                                        "description": "The minimum allowable temperature, inclusive."
                                                    },
                                                    "max": {
                                                        "type": "number",
                                                        "description": "The maximum allowable temperature, inclusive."
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "setpointDifferenceRange": {
                                        "allOf": [
                                            {
                                                "description": "A range describing how close `heatSetpoint` and `coolSetpoint` can be. Only relevant in `AUTO` mode."
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "min": {
                                                        "type": "number",
                                                        "description": "The minimum allowable temperature, inclusive."
                                                    },
                                                    "max": {
                                                        "type": "number",
                                                        "description": "The maximum allowable temperature, inclusive."
                                                    }
                                                }
                                            },
                                            {
                                                "properties": {
                                                    "min": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ]
                                                    },
                                                    "max": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            }
        },
        {
            "name": "postSetHvacTargetTemperature",
            "url": "https://enode-api.p.rapidapi.com/hvacs/{hvacid}/temperature",
            "description": "This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.\n\nRegister a request for a change of the `targetTemperature` field on an HVAC unit. We retry sending the command until the HVAC unit's `targetTemperature` field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).\n\nThis endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}/temperature\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "hvac",
                "targetTemperature": {
                    "temperature": 22,
                    "deadband": 4
                },
                "target": {
                    "mode": {
                        "0": "H",
                        "1": "E",
                        "2": "A",
                        "3": "T"
                    },
                    "heatSetpoint": 22,
                    "coolSetpoint": 24,
                    "holdType": "PERMANENT"
                },
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the entity asset (HVAC) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "hvac"
                        ]
                    },
                    "targetTemperature": {
                        "type": "object",
                        "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                        "required": [
                            "temperature"
                        ],
                        "properties": {
                            "temperature": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Desired temperature",
                                "default": "<number>"
                            },
                            "deadband": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                "default": "<number>"
                            }
                        }
                    },
                    "target": {
                        "type": "object",
                        "description": "Target mode for an HVAC device",
                        "required": [
                            "mode",
                            "holdType"
                        ],
                        "properties": {
                            "mode": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "HEAT",
                                            "COOL",
                                            "AUTO",
                                            "OFF"
                                        ],
                                        "description": "HVAC Mode"
                                    },
                                    {
                                        "type": "string",
                                        "description": "The HVAC's mode."
                                    }
                                ]
                            },
                            "heatSetpoint": {
                                "type": "number",
                                "description": "If mode allows, heat when `currentTemperature` falls below this point."
                            },
                            "coolSetpoint": {
                                "type": "number",
                                "description": "If mode allows, cool when `currentTemperature` rises above this point."
                            },
                            "holdType": {
                                "type": "string",
                                "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                "enum": [
                                    "PERMANENT",
                                    "SCHEDULED"
                                ]
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the HVAC device."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the HVAC action",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the HVAC device for changes in `targetTemperature`."
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The HVAC device has confirmed that the requested `targetTemperature` has been applied."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The HVAC device failed to respond to our attempts to set the `targetTemperature` within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another HVAC action was sent to the same device, canceling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "getHVAC",
            "url": "https://enode-api.p.rapidapi.com/hvacs/{hvacid}",
            "description": " ",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "mode": {
                    "0": "H",
                    "1": "E",
                    "2": "A",
                    "3": "T"
                },
                "heatSetpoint": 22,
                "coolSetpoint": 24,
                "holdType": "PERMANENT",
                "id": "8f39fa8d-8f10-4984-a319-741dc23848c0",
                "vendor": {
                    "0": "A",
                    "1": "D",
                    "2": "A",
                    "3": "X"
                },
                "lastSeen": "2020-04-07T17:04:26Z",
                "isReachable": true,
                "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "isActive": true,
                "currentTemperature": 20.8,
                "targetTemperature": {
                    "temperature": 22,
                    "deadband": 4
                },
                "consumptionRate": 1.8,
                "information": {
                    "brand": "ADAX",
                    "model": "Neo Wi-Fi Skirting",
                    "displayName": "Bedroom Panel Heater",
                    "groupName": "Bedroom",
                    "category": "HEATING"
                },
                "capabilities": {
                    "capableModes": [
                        "HEAT"
                    ],
                    "capableHoldTypes": [
                        "PERMANENT"
                    ],
                    "coolSetpointRange": {
                        "min": 15,
                        "max": 25
                    },
                    "heatSetpointRange": {
                        "min": 15,
                        "max": 25
                    },
                    "setpointDifferenceRange": {
                        "min": 0,
                        "max": 0
                    }
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "required": [
                    "id",
                    "lastSeen",
                    "isReachable"
                ],
                "allOf": [
                    {
                        "type": "object",
                        "description": "Target mode for an HVAC device",
                        "required": [
                            "mode",
                            "holdType"
                        ],
                        "properties": {
                            "mode": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "HEAT",
                                            "COOL",
                                            "AUTO",
                                            "OFF"
                                        ],
                                        "description": "HVAC Mode"
                                    },
                                    {
                                        "type": "string",
                                        "description": "The HVAC's mode."
                                    }
                                ]
                            },
                            "heatSetpoint": {
                                "type": "number",
                                "description": "If mode allows, heat when `currentTemperature` falls below this point."
                            },
                            "coolSetpoint": {
                                "type": "number",
                                "description": "If mode allows, cool when `currentTemperature` rises above this point."
                            },
                            "holdType": {
                                "type": "string",
                                "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                "enum": [
                                    "PERMANENT",
                                    "SCHEDULED"
                                ]
                            }
                        }
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "HVAC device ID"
                            },
                            "vendor": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "title": "HVAC Vendor",
                                        "description": "HVAC Vendor",
                                        "enum": [
                                            "TADO",
                                            "MILL",
                                            "ADAX",
                                            "ECOBEE",
                                            "SENSIBO",
                                            "HONEYWELL",
                                            "MITSUBISHI"
                                        ]
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "lastSeen": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The last time the HVAC unit was successfully communicated with"
                            },
                            "isReachable": {
                                "type": "boolean",
                                "description": "Whether live data from the HVAC unit is currently fetchable from Enode's perspective. It can happen that this 'reachability' refers to reading from a cache operated by the vendor's cloud service, if that service has determined that its cache is valid."
                            },
                            "chargingLocationId": {
                                "type": "string",
                                "description": "ID of the charging location the HVAC unit is housed at (if any)",
                                "default": "null"
                            },
                            "isActive": {
                                "type": "boolean",
                                "description": "Whether the HVAC unit is actively heating or cooling."
                            },
                            "currentTemperature": {
                                "type": "number",
                                "description": "Current air temperature reported by device in degrees Celsius."
                            },
                            "targetTemperature": {
                                "type": "object",
                                "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                "required": [
                                    "temperature"
                                ],
                                "properties": {
                                    "temperature": {
                                        "type": [
                                            "number",
                                            "null"
                                        ],
                                        "description": "Desired temperature",
                                        "default": "<number>"
                                    },
                                    "deadband": {
                                        "type": [
                                            "number",
                                            "null"
                                        ],
                                        "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                        "default": "<number>"
                                    }
                                }
                            },
                            "consumptionRate": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "The current rate of energy consumption in kW. An inactive HVAC will have a consumption rate of 0. This value is currently experimental and is typically estimated with a large margin of error.",
                                "minimum": 0
                            },
                            "information": {
                                "allOf": [
                                    {
                                        "type": "object",
                                        "description": "Descriptive information about the HVAC unit",
                                        "properties": {
                                            "brand": {
                                                "type": "string",
                                                "description": "Display name of OEM/vendor"
                                            },
                                            "model": {
                                                "type": "string",
                                                "description": "Device model name"
                                            },
                                            "displayName": {
                                                "type": "string",
                                                "description": "Name of the device, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names."
                                            },
                                            "groupName": {
                                                "type": "string",
                                                "description": "Name of the group the device belongs to, as set by the user on the device/vendor. Groups are typically presented as \"rooms\" or \"zones\"."
                                            },
                                            "category": {
                                                "type": "string",
                                                "enum": [
                                                    "HEATING",
                                                    "COOLING",
                                                    "HEAT_PUMP",
                                                    "AGGREGATOR"
                                                ],
                                                "description": "HVAC category"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object"
                                    }
                                ]
                            },
                            "capabilities": {
                                "type": "object",
                                "description": "An object describing valid states for this HVAC device.",
                                "properties": {
                                    "capableModes": {
                                        "type": [
                                            "array",
                                            "null"
                                        ],
                                        "description": "A list of valid modes for this HVAC device.",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "HEAT",
                                                "COOL",
                                                "AUTO",
                                                "OFF"
                                            ],
                                            "description": "HVAC Mode"
                                        },
                                        "maxItems": 2,
                                        "minItems": 2
                                    },
                                    "capableHoldTypes": {
                                        "type": [
                                            "array",
                                            "null"
                                        ],
                                        "description": "A list of valid hold types for this HVAC device.",
                                        "items": {
                                            "type": "string",
                                            "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                            "enum": [
                                                "PERMANENT",
                                                "SCHEDULED"
                                            ]
                                        },
                                        "maxItems": 2,
                                        "minItems": 2
                                    },
                                    "coolSetpointRange": {
                                        "allOf": [
                                            {
                                                "description": "The range of allowable values for `coolSetpoint`."
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "min": {
                                                        "type": "number",
                                                        "description": "The minimum allowable temperature, inclusive."
                                                    },
                                                    "max": {
                                                        "type": "number",
                                                        "description": "The maximum allowable temperature, inclusive."
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "heatSetpointRange": {
                                        "allOf": [
                                            {
                                                "description": "The range of allowable values for `heatSetpoint`."
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "min": {
                                                        "type": "number",
                                                        "description": "The minimum allowable temperature, inclusive."
                                                    },
                                                    "max": {
                                                        "type": "number",
                                                        "description": "The maximum allowable temperature, inclusive."
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "setpointDifferenceRange": {
                                        "allOf": [
                                            {
                                                "description": "A range describing how close `heatSetpoint` and `coolSetpoint` can be. Only relevant in `AUTO` mode."
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "min": {
                                                        "type": "number",
                                                        "description": "The minimum allowable temperature, inclusive."
                                                    },
                                                    "max": {
                                                        "type": "number",
                                                        "description": "The maximum allowable temperature, inclusive."
                                                    }
                                                }
                                            },
                                            {
                                                "properties": {
                                                    "min": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ]
                                                    },
                                                    "max": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            }
        },
        {
            "name": "postSetHvacPermanentHold",
            "url": "https://enode-api.p.rapidapi.com/hvacs/{hvacid}/permanent-hold",
            "description": "Tell an HVAC unit to enter a permanent hold. Only available if `PERMANENT` is present in the target's `capabilities.capableHoldType`. We retry sending the command until the HVAC unit's `target` field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}/permanent-hold\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "hvac",
                "targetTemperature": {
                    "temperature": 22,
                    "deadband": 4
                },
                "target": {
                    "mode": {
                        "0": "H",
                        "1": "E",
                        "2": "A",
                        "3": "T"
                    },
                    "heatSetpoint": 22,
                    "coolSetpoint": 24,
                    "holdType": "PERMANENT"
                },
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the entity asset (HVAC) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "hvac"
                        ]
                    },
                    "targetTemperature": {
                        "type": "object",
                        "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                        "required": [
                            "temperature"
                        ],
                        "properties": {
                            "temperature": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Desired temperature",
                                "default": "<number>"
                            },
                            "deadband": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                "default": "<number>"
                            }
                        }
                    },
                    "target": {
                        "type": "object",
                        "description": "Target mode for an HVAC device",
                        "required": [
                            "mode",
                            "holdType"
                        ],
                        "properties": {
                            "mode": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "HEAT",
                                            "COOL",
                                            "AUTO",
                                            "OFF"
                                        ],
                                        "description": "HVAC Mode"
                                    },
                                    {
                                        "type": "string",
                                        "description": "The HVAC's mode."
                                    }
                                ]
                            },
                            "heatSetpoint": {
                                "type": "number",
                                "description": "If mode allows, heat when `currentTemperature` falls below this point."
                            },
                            "coolSetpoint": {
                                "type": "number",
                                "description": "If mode allows, cool when `currentTemperature` rises above this point."
                            },
                            "holdType": {
                                "type": "string",
                                "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                "enum": [
                                    "PERMANENT",
                                    "SCHEDULED"
                                ]
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the HVAC device."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the HVAC action",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the HVAC device for changes in `targetTemperature`."
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The HVAC device has confirmed that the requested `targetTemperature` has been applied."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The HVAC device failed to respond to our attempts to set the `targetTemperature` within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another HVAC action was sent to the same device, canceling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "getHvacsAction",
            "url": "https://enode-api.p.rapidapi.com/hvacs/actions/{actionid}",
            "description": "Returns the current state of the requested action.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "actionId",
                    "type": "STRING",
                    "description": "ID of the Action",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/actions/{actionid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "hvac",
                "targetTemperature": {
                    "temperature": 22,
                    "deadband": 4
                },
                "target": {
                    "mode": {
                        "0": "H",
                        "1": "E",
                        "2": "A",
                        "3": "T"
                    },
                    "heatSetpoint": 22,
                    "coolSetpoint": 24,
                    "holdType": "PERMANENT"
                },
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the entity asset (HVAC) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "hvac"
                        ]
                    },
                    "targetTemperature": {
                        "type": "object",
                        "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                        "required": [
                            "temperature"
                        ],
                        "properties": {
                            "temperature": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Desired temperature",
                                "default": "<number>"
                            },
                            "deadband": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                "default": "<number>"
                            }
                        }
                    },
                    "target": {
                        "type": "object",
                        "description": "Target mode for an HVAC device",
                        "required": [
                            "mode",
                            "holdType"
                        ],
                        "properties": {
                            "mode": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "HEAT",
                                            "COOL",
                                            "AUTO",
                                            "OFF"
                                        ],
                                        "description": "HVAC Mode"
                                    },
                                    {
                                        "type": "string",
                                        "description": "The HVAC's mode."
                                    }
                                ]
                            },
                            "heatSetpoint": {
                                "type": "number",
                                "description": "If mode allows, heat when `currentTemperature` falls below this point."
                            },
                            "coolSetpoint": {
                                "type": "number",
                                "description": "If mode allows, cool when `currentTemperature` rises above this point."
                            },
                            "holdType": {
                                "type": "string",
                                "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                "enum": [
                                    "PERMANENT",
                                    "SCHEDULED"
                                ]
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the HVAC device."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the HVAC action",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the HVAC device for changes in `targetTemperature`."
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The HVAC device has confirmed that the requested `targetTemperature` has been applied."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The HVAC device failed to respond to our attempts to set the `targetTemperature` within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another HVAC action was sent to the same device, canceling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "getHealthInverterVendors",
            "url": "https://enode-api.p.rapidapi.com/health/inverters",
            "description": "Lists the available inverter vendors. If you authenticate with a client or link token we also show the vendors that your client has beta access to.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/health/inverters\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "vendor": "SOLAREDGE",
                    "displayName": "Solar Edge",
                    "status": "READY"
                },
                {
                    "vendor": "SMA",
                    "displayName": "SMA",
                    "status": "READY"
                },
                {
                    "vendor": "SOLIS",
                    "displayName": "Solis",
                    "status": "READY"
                },
                {
                    "vendor": "FRONIUS",
                    "displayName": "Fronius",
                    "status": "READY"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "vendor": {
                            "type": "string",
                            "title": "Inverter Vendor",
                            "description": "Inverter Vendor",
                            "enum": [
                                "FRONIUS",
                                "GROWATT",
                                "SOLAREDGE",
                                "SOLIS"
                            ]
                        },
                        "displayName": {
                            "type": "string",
                            "description": "A formatted and properly cased vendor brand name, suitable for reading by humans."
                        },
                        "portalName": {
                            "type": "string",
                            "description": "The name of the first party service or app that the user normally logs into."
                        },
                        "status": {
                            "type": "string",
                            "description": "Ready-state of the Vendor. Currently always `READY`.",
                            "enum": [
                                "READY",
                                "ELEVATED_ERROR_RATE",
                                "OUTAGE"
                            ]
                        }
                    }
                },
                "maxItems": 2
            }
        },
        {
            "name": "getHealthHvacVendors",
            "url": "https://enode-api.p.rapidapi.com/health/hvacs",
            "description": "Lists the available HVAC vendors. If you authenticate with a client token we also show the vendors that your client has beta access to.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/health/hvacs\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "vendor": "MILL",
                    "displayName": "Mill",
                    "portalName": "Mill",
                    "status": "READY"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "vendor": {
                            "type": "string",
                            "title": "HVAC Vendor",
                            "description": "HVAC Vendor",
                            "enum": [
                                "TADO",
                                "MILL",
                                "ADAX",
                                "ECOBEE",
                                "SENSIBO",
                                "HONEYWELL",
                                "MITSUBISHI"
                            ]
                        },
                        "displayName": {
                            "type": "string",
                            "description": "A formatted and properly cased vendor brand name, suitable for reading by humans."
                        },
                        "portalName": {
                            "type": "string",
                            "description": "The name of the first party service or app that the user normally logs into."
                        },
                        "status": {
                            "type": "string",
                            "description": "Ready-state of the Vendor. Currently always `READY`.",
                            "enum": [
                                "READY",
                                "ELEVATED_ERROR_RATE",
                                "OUTAGE"
                            ]
                        }
                    }
                },
                "maxItems": 2
            }
        },
        {
            "name": "getCharginglocationsCharginglocationid",
            "url": "https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}",
            "description": " ",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "chargingLocationId",
                    "type": "STRING",
                    "description": "ID of the Charging Location.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "name": "Home",
                "longitude": 10.757933,
                "latitude": 59.911491,
                "timezoneName": "Europe/Copenhagen"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "longitude",
                    "latitude"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Charging Location ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name for the Charging Location",
                        "default": "<string>"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude in degrees",
                        "default": "<number>"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude in degrees",
                        "default": "<number>"
                    },
                    "timezoneName": {
                        "type": "string",
                        "description": "An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to 'UTC'.",
                        "default": "<string>"
                    }
                }
            }
        },
        {
            "name": "getHealthVehicleVendors",
            "url": "https://enode-api.p.rapidapi.com/health/vehicles",
            "description": "Lists the available vehicle vendors. If you authenticate with a client or link token we also include the vendors that your client has beta access to.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/health/vehicles\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "vendor": "TESLA",
                    "displayName": "Tesla",
                    "status": "READY"
                },
                {
                    "vendor": "BMW",
                    "displayName": "BMW",
                    "status": "READY"
                },
                {
                    "vendor": "AUDI",
                    "displayName": "Audi",
                    "status": "READY"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "vendor": {
                            "type": "string",
                            "title": "Vehicle Vendor",
                            "description": "Vehicle Vendor",
                            "enum": [
                                "AUDI",
                                "BMW",
                                "HONDA",
                                "HYUNDAI",
                                "JAGUAR",
                                "KIA",
                                "MERCEDES",
                                "MINI",
                                "NISSAN",
                                "PEUGEOT",
                                "PORSCHE",
                                "RENAULT",
                                "SEAT",
                                "SKODA",
                                "TESLA",
                                "VOLKSWAGEN",
                                "VOLVO",
                                "FORD",
                                "OPEL",
                                "DS",
                                "TOYOTA",
                                "CITROEN",
                                "CUPRA",
                                "VAUXHALL"
                            ]
                        },
                        "displayName": {
                            "type": "string",
                            "description": "A formatted and properly cased vendor brand name, suitable for reading by humans."
                        },
                        "portalName": {
                            "type": "string",
                            "description": "The name of the first party service or app that the user normally logs into."
                        },
                        "status": {
                            "type": "string",
                            "description": "Ready-state of the Vendor. Currently always `READY`.",
                            "enum": [
                                "READY",
                                "ELEVATED_ERROR_RATE",
                                "OUTAGE"
                            ]
                        }
                    }
                },
                "maxItems": 2
            }
        },
        {
            "name": "updateVehicleSmartChargingPolicy",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-policy",
            "description": "Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle",
            "method": "PUT",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-policy\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "isEnabled": "<boolean>",
                "deadline": "08:00"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "description": "[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via the [Update Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy) endpoint.",
                "properties": {
                    "isEnabled": {
                        "type": "boolean",
                        "description": "When enabled, this vehicle's charging status may be controlled by [Smart Charging](/docs/smart-charging/introduction)",
                        "default": "<boolean>"
                    },
                    "deadline": {
                        "type": "string",
                        "description": "The deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. The deadline is expressed as a time on a 24h clock in UTC",
                        "pattern": "\\d{2}:\\d{2}",
                        "default": "<string>"
                    }
                }
            }
        },
        {
            "name": "getVehicles",
            "url": "https://enode-api.p.rapidapi.com/vehicles",
            "description": "List all available Vehicles for the User.\n\nIf you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "field[]",
                    "type": "ARRAY",
                    "description": "If you specify any fields here, we make a request to the Vehicle's OEM APIs and return the updated data.\n\n This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the `lastSeen` & `isReachable` fields on the vehicle).\n\nBy default, no fields are included, and the latest cached full Vehicle object will be returned.",
                    "default": "[\n  \"chargeState\"\n]"
                }
            ],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles\"\nquerystring = {\"field[]\": field}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "id": "",
                    "vendor": "TESLA",
                    "lastSeen": "",
                    "isReachable": true,
                    "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                    "information": {
                        "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                        "vin": "5YJYGDEF2LFR00942",
                        "brand": "Tesla",
                        "model": "Model S P85",
                        "year": 2020
                    },
                    "chargeState": {
                        "batteryLevel": 38,
                        "range": 127.5,
                        "isPluggedIn": true,
                        "isCharging": true,
                        "isFullyCharged": true,
                        "batteryCapacity": 73.21,
                        "chargeLimit": 80,
                        "chargeRate": 40.1,
                        "chargeTimeRemaining": 319,
                        "lastUpdated": "2020-01-07T16:21:76Z"
                    },
                    "smartChargingPolicy": {
                        "isEnabled": "<boolean>",
                        "deadline": "08:00"
                    },
                    "location": {
                        "longitude": 10.757933,
                        "latitude": 59.911491,
                        "lastUpdated": "2020-04-07T17:04:26Z"
                    },
                    "odometer": {
                        "distance": 24650,
                        "lastUpdated": "2020-01-07T16:21:76Z"
                    },
                    "capabilities": {
                        "chargeState": {
                            "isCapable": true,
                            "interventionIds": [
                                "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                            ]
                        },
                        "location": {
                            "isCapable": true,
                            "interventionIds": [
                                "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                            ]
                        },
                        "information": {
                            "isCapable": true,
                            "interventionIds": [
                                "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                            ]
                        },
                        "odometer": {
                            "isCapable": true,
                            "interventionIds": [
                                "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                            ]
                        },
                        "startCharging": {
                            "isCapable": true,
                            "interventionIds": [
                                "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                            ]
                        },
                        "stopCharging": {
                            "isCapable": true,
                            "interventionIds": [
                                "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                            ]
                        },
                        "smartCharging": {
                            "isCapable": true,
                            "interventionIds": [
                                "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                            ]
                        }
                    }
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "Vehicle ID"
                        },
                        "vendor": {
                            "type": "string",
                            "title": "Vehicle Vendor",
                            "description": "Vehicle Vendor",
                            "enum": [
                                "AUDI",
                                "BMW",
                                "HONDA",
                                "HYUNDAI",
                                "JAGUAR",
                                "KIA",
                                "MERCEDES",
                                "MINI",
                                "NISSAN",
                                "PEUGEOT",
                                "PORSCHE",
                                "RENAULT",
                                "SEAT",
                                "SKODA",
                                "TESLA",
                                "VOLKSWAGEN",
                                "VOLVO",
                                "FORD",
                                "OPEL",
                                "DS",
                                "TOYOTA",
                                "CITROEN",
                                "CUPRA",
                                "VAUXHALL"
                            ]
                        },
                        "lastSeen": {
                            "type": "string",
                            "format": "date",
                            "description": "ISO8601 UTC timestamp at which live data was last available from Enode's perspective."
                        },
                        "isReachable": {
                            "type": "boolean",
                            "description": "Whether live data from the vehicle is currently available from Enode's perspective. This 'reachability' may refer to reading from a cache operated by the vehicle's cloud service if that service has determined that its cache is valid."
                        },
                        "chargingLocationId": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "ID of the charging location the vehicle is currently positioned at (if any).",
                            "x-format": {
                                "guid": true
                            }
                        },
                        "information": {
                            "type": "object",
                            "description": "Descriptive information about the Vehicle.",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "The vendor's vehicle ID. Sometimes the same as the VIN. This value is deprecated because it changes over time. Do not use this value to refer to vehicles."
                                },
                                "vin": {
                                    "type": "string",
                                    "description": "Vehicle VIN"
                                },
                                "brand": {
                                    "type": "string",
                                    "description": "Vehicle brand"
                                },
                                "model": {
                                    "type": "string",
                                    "description": "Vehicle model"
                                },
                                "year": {
                                    "type": "integer",
                                    "description": "Vehicle production year"
                                }
                            }
                        },
                        "chargeState": {
                            "type": "object",
                            "description": "Information about the electric or hybrid battery.",
                            "properties": {
                                "batteryLevel": {
                                    "type": "number",
                                    "description": "Remaining battery in percent",
                                    "minimum": 0,
                                    "maximum": 100
                                },
                                "range": {
                                    "type": "number",
                                    "description": "Estimated remaining kilometers",
                                    "minimum": 0
                                },
                                "isPluggedIn": {
                                    "type": "boolean",
                                    "description": "Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)"
                                },
                                "isCharging": {
                                    "type": "boolean",
                                    "description": "Current charging status of the vehicle"
                                },
                                "isFullyCharged": {
                                    "type": "boolean",
                                    "description": "Indicates whether the vehicle is fully charged. 'Fully charged' may be a `batteryLevel` of less than 100 if a maximum charge ceiling has been configured in the vehicle."
                                },
                                "batteryCapacity": {
                                    "type": "number",
                                    "description": "Vehicle's maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.",
                                    "minimum": 0
                                },
                                "chargeLimit": {
                                    "type": "number",
                                    "description": "Charge limit, as a percent of `batteryCapacity`.",
                                    "minimum": 0,
                                    "maximum": 100
                                },
                                "chargeRate": {
                                    "type": "number",
                                    "description": "The current charge rate in kW.\n\nThis property is only available when the vehicle is charging, and is `null` any other time.",
                                    "minimum": 0
                                },
                                "chargeTimeRemaining": {
                                    "type": "number",
                                    "description": "Estimated time until the current charging intent is completed, in minutes.\n\nThis property is only available when the vehicle is charging, and is `null` any other time."
                                },
                                "lastUpdated": {
                                    "type": "string",
                                    "format": "date",
                                    "description": "ISO8601 UTC timestamp of last received charge state update"
                                }
                            }
                        },
                        "smartChargingPolicy": {
                            "type": "object",
                            "description": "[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via the [Update Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy) endpoint.",
                            "properties": {
                                "isEnabled": {
                                    "type": "boolean",
                                    "description": "When enabled, this vehicle's charging status may be controlled by [Smart Charging](/docs/smart-charging/introduction)",
                                    "default": "<boolean>"
                                },
                                "deadline": {
                                    "type": "string",
                                    "description": "The deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. The deadline is expressed as a time on a 24h clock in UTC",
                                    "pattern": "\\d{2}:\\d{2}",
                                    "default": "<string>"
                                }
                            }
                        },
                        "location": {
                            "type": "object",
                            "description": "Vehicle's GPS coordinates with timestamp",
                            "properties": {
                                "longitude": {
                                    "type": "number",
                                    "description": "Longitude in degrees"
                                },
                                "latitude": {
                                    "type": "number",
                                    "description": "Latitude in degrees"
                                },
                                "lastUpdated": {
                                    "type": "string",
                                    "format": "date",
                                    "description": "ISO8601 UTC timestamp of last received location"
                                }
                            }
                        },
                        "odometer": {
                            "type": "object",
                            "description": "Vehicle's odometer with timestamp",
                            "properties": {
                                "distance": {
                                    "type": "number",
                                    "description": "Odometer in kilometers"
                                },
                                "lastUpdated": {
                                    "type": "string",
                                    "format": "date",
                                    "description": "ISO8601 UTC timestamp of last received odometer update"
                                }
                            }
                        },
                        "capabilities": {
                            "type": "object",
                            "description": "A collection of descriptors that describe the capabilities of this specific vehicle",
                            "properties": {
                                "chargeState": {
                                    "allOf": [
                                        {
                                            "description": "Full availability of chargeState data."
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "isCapable": {
                                                    "type": "boolean",
                                                    "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                                },
                                                "interventionIds": {
                                                    "type": "array",
                                                    "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "maxItems": 2
                                                }
                                            }
                                        }
                                    ]
                                },
                                "location": {
                                    "allOf": [
                                        {
                                            "description": "Full availability of location data."
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "isCapable": {
                                                    "type": "boolean",
                                                    "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                                },
                                                "interventionIds": {
                                                    "type": "array",
                                                    "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "maxItems": 2
                                                }
                                            }
                                        }
                                    ]
                                },
                                "information": {
                                    "allOf": [
                                        {
                                            "description": "Full availability of information data."
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "isCapable": {
                                                    "type": "boolean",
                                                    "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                                },
                                                "interventionIds": {
                                                    "type": "array",
                                                    "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "maxItems": 2
                                                }
                                            }
                                        }
                                    ]
                                },
                                "odometer": {
                                    "allOf": [
                                        {
                                            "description": "Full availability of odometer data."
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "isCapable": {
                                                    "type": "boolean",
                                                    "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                                },
                                                "interventionIds": {
                                                    "type": "array",
                                                    "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "maxItems": 2
                                                }
                                            }
                                        }
                                    ]
                                },
                                "startCharging": {
                                    "allOf": [
                                        {
                                            "description": "Support for START charging command"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "isCapable": {
                                                    "type": "boolean",
                                                    "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                                },
                                                "interventionIds": {
                                                    "type": "array",
                                                    "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "maxItems": 2
                                                }
                                            }
                                        }
                                    ]
                                },
                                "stopCharging": {
                                    "allOf": [
                                        {
                                            "description": "Support for STOP charging command"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "isCapable": {
                                                    "type": "boolean",
                                                    "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                                },
                                                "interventionIds": {
                                                    "type": "array",
                                                    "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "maxItems": 2
                                                }
                                            }
                                        }
                                    ]
                                },
                                "smartCharging": {
                                    "allOf": [
                                        {
                                            "description": "Support for smartCharging. This value is dynamic and may change over time."
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "isCapable": {
                                                    "type": "boolean",
                                                    "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                                },
                                                "interventionIds": {
                                                    "type": "array",
                                                    "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "maxItems": 2
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "maxItems": 2
            }
        },
        {
            "name": "postSetChargerMaxCurrent",
            "url": "https://enode-api.p.rapidapi.com/chargers/{chargerid}/max-current",
            "description": "Register a request for a change of the `maxCurrent` field on a charger. We retry sending the command until the charger's `maxCurrent` field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling [Charger Get Action](/api/reference#getChargersAction).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}/max-current\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetState": {
                    "maxCurrent": 20
                },
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the entity asset (Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetState": {
                        "type": "object",
                        "description": "Target maximum current for charger",
                        "required": [
                            "maxCurrent"
                        ],
                        "properties": {
                            "maxCurrent": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Desired max current in ampere",
                                "default": "<number>"
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the charger."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "deleteCharginglocationsCharginglocationid",
            "url": "https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}",
            "description": "Delete a Charging Location.",
            "method": "DELETE",
            "required_parameters": [
                {
                    "name": "chargingLocationId",
                    "type": "STRING",
                    "description": "ID of the Charging Location.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "postVehiclesVehicleidCharging",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/charging",
            "description": "Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle's `chargeStateIsCharging` field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).\n\n This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [External Start API](/api/reference#vehicleCreateExternalStart) to temporarily enable charging. \n\nA previous version of this endpoint sent a single command directly to the vehicle and returned a 204 on success. The newer version documented here requires a feature flag. Contact us if you would like access to the newer API.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/charging\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "vehicle",
                "kind": "START",
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of action",
                        "enum": [
                            "START",
                            "STOP"
                        ],
                        "default": "<string>"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "getInverter",
            "url": "https://enode-api.p.rapidapi.com/inverters/{inverterid}",
            "description": " ",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "inverterId",
                    "type": "STRING",
                    "description": "ID of the solar inverter",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [
                {
                    "name": "field[]",
                    "type": "ARRAY",
                    "description": "If you specify any fields here, we make a request to the Solar inverter's OEM APIs and return the updated data.\n\n This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the `lastSeen` & `isReachable` fields on the solar inverter).\n\nBy default, no fields are included, and the latest cached full solar inverter object will be returned.",
                    "default": "[\n  \"information\"\n]"
                }
            ],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/inverters/{inverterid}\"\nquerystring = {\"field[]\": field}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "",
                "vendor": {
                    "0": "S",
                    "1": "O",
                    "2": "L",
                    "3": "I",
                    "4": "S"
                },
                "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "lastSeen": "2022-04-07T17:04:26Z",
                "isReachable": true,
                "productionState": {
                    "productionRate": 1.8,
                    "isProducing": true,
                    "lastUpdated": "2022-04-07T16:21:76Z"
                },
                "information": {
                    "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                    "brand": "SMA",
                    "model": "Sunny Boy",
                    "siteName": "Sunny plant",
                    "installationDate": "2020-04-05"
                },
                "location": {
                    "longitude": 10.757933,
                    "latitude": 59.911491
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Solar inverter ID"
                    },
                    "vendor": {
                        "allOf": [
                            {
                                "type": "string",
                                "title": "Inverter Vendor",
                                "description": "Inverter Vendor",
                                "enum": [
                                    "FRONIUS",
                                    "GROWATT",
                                    "SOLAREDGE",
                                    "SOLIS"
                                ]
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "chargingLocationId": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "ID of the charging location the solar inverter is currently positioned at (if any).",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "lastSeen": {
                        "type": "string",
                        "format": "date",
                        "description": "The last time the solar inverter was successfully communicated with"
                    },
                    "isReachable": {
                        "type": "boolean",
                        "description": "Whether live data from the solar inverter is currently fetchable from Enode's perspective. This 'reachability' may refer to reading from a cache operated by the solar inverter's cloud service if that service has determined that its cache is valid."
                    },
                    "productionState": {
                        "type": "object",
                        "properties": {
                            "productionRate": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "The current production rate in kW.",
                                "minimum": 0
                            },
                            "isProducing": {
                                "type": "boolean",
                                "description": "Whether the solar inverter is actively producing energy or not."
                            },
                            "lastUpdated": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date",
                                "description": "ISO8601 UTC timestamp of last received production state update"
                            }
                        }
                    },
                    "information": {
                        "type": "object",
                        "description": "Descriptive information about the solar inverter",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Solar inverter vendor ID"
                            },
                            "brand": {
                                "type": "string",
                                "description": "Solar inverter brand"
                            },
                            "model": {
                                "type": "string",
                                "description": "Solar inverter model"
                            },
                            "siteName": {
                                "type": "string",
                                "description": "Name of the site, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names."
                            },
                            "installationDate": {
                                "type": "string",
                                "format": "date",
                                "description": "Solar inverter installation date"
                            }
                        }
                    },
                    "location": {
                        "type": "object",
                        "description": "Solar inverter's GPS coordinates with timestamp",
                        "properties": {
                            "longitude": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Longitude in degrees"
                            },
                            "latitude": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Latitude in degrees"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "controlChargerCharging",
            "url": "https://enode-api.p.rapidapi.com/chargers/{chargerid}/charging",
            "description": "Register a request for a charger to start or stop charging. We retry sending the command until the charger's `chargeStateIsCharging` field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).\n\n This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [External Start API](/api/reference#chargerCreateExternalStart) to temporarily enable charging. \n\nA previous version of this endpoint sent a single command directly to the charger and returned a 204 on success. The newer version documented here requires a feature flag. Contact us if you would like access to the newer API.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}/charging\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "vehicle",
                "kind": "START",
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of action",
                        "enum": [
                            "START",
                            "STOP"
                        ],
                        "default": "<string>"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "postUsersUseridLink",
            "url": "https://enode-api.p.rapidapi.com/users/{userid}/link",
            "description": "Creates an Enode Link session attached to the provided User ID. If this User does not exist, it will be created. The returned `linkState` gives the User short-lived (24hs) access to Enode Link. A URL for Enode Link for the user to initiate asset linking is also returned.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "ID of the User",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/users/{userid}/link\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "linkState": "ZjE2MzMxMGFiYmU4MzcxOTU1ZmRjMTU5NGU2ZmE4YTU3NjViMzIwY2YzNG",
                "linkUrl": "https://link.production.enode.io?link_state=YzIwZThhYjYtMjMzMi00ZTAyLTg0OTYtYzdjOTlhZTY3Zjc3QDI2YzI1MDExLTdhYTctNGE2NS1iNjBmLTZmMzc5NmRhODUyMDowNDViYjFiYmE0M2Y5NDU5YTc5OTgxZmEyYTg1NmI4YzhkOGU4YjgyNmNmMzQzZmFmMGNhZTlmNDBjMmZmOTgy&requested_scope=vehicle%3Alocation%20vehicle%3Aodometer&redirect_uri=myapp%3A%2F%2Fintegrations%2Fenode"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "linkState": {
                        "type": "string"
                    },
                    "linkUrl": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "getVehiclesVehicleidSmartchargingstatus",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-status",
            "description": "Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-status\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "updatedAt": "",
                "vehicleId": "",
                "userId": "",
                "vendor": "",
                "state": "DISABLED",
                "stateChangedAt": "",
                "consideration": {
                    "isSmartChargeCapable": true,
                    "isPluggedIn": true,
                    "isCharging": true,
                    "recentlyAtChargingLocation": true,
                    "hasTimeEstimate": true,
                    "confidentTimeEstimate": true,
                    "needsSignificantCharge": true,
                    "hasChargeAboveThreshold": true,
                    "singleUser": true,
                    "wontStopExistingChargingSession": true,
                    "atChargingLocation": true,
                    "locationIsFresh": true,
                    "confidentBatteryCapacity": true,
                    "needsCharge": true,
                    "priceDataAvailable": true,
                    "minimumSavings": true,
                    "minimumDelay": true,
                    "isNormalSchedule": true
                },
                "plan": {
                    "id": "",
                    "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                    "vehicleId": "",
                    "userId": "",
                    "vendor": "",
                    "currency": "NOK",
                    "nonSmartCost": {},
                    "smartCost": {},
                    "stopAt": "",
                    "startAt": "",
                    "estimatedFinishAt": "",
                    "stopConfirmedAt": "",
                    "startConfirmedAt": "",
                    "endedAt": "",
                    "finalState": "PLAN:ENDED:FINISHED",
                    "failureCondition": "STOP_FAILED"
                },
                "externalStart": {
                    "createdAt": "2020-04-07T17:04:26Z",
                    "endedAt": "2020-04-07T17:04:26Z",
                    "targetType": "vehicle",
                    "targetId": {
                        "0": "8",
                        "1": "d",
                        "2": "9",
                        "3": "0",
                        "4": "1",
                        "5": "0",
                        "6": "1",
                        "7": "b",
                        "8": "3",
                        "9": "f",
                        "10": "2",
                        "11": "f"
                    },
                    "vendorActionId": ""
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the SmartChargingStatus object was recalculated, whether or not any values actually changed"
                    },
                    "vehicleId": {
                        "type": "string",
                        "description": "Vehicle ID"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Vendor of the Vehicle"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "DISABLED",
                            "CONSIDERING",
                            "PLAN:EXECUTING:STOPPING",
                            "PLAN:EXECUTING:STOP_FAILED",
                            "PLAN:EXECUTING:STOPPED",
                            "PLAN:EXECUTING:STARTING",
                            "PLAN:EXECUTING:START_FAILED",
                            "PLAN:EXECUTING:STARTED",
                            "PLAN:EXECUTING:CHARGE_INTERRUPTED",
                            "PLAN:EXECUTING:OVERRIDDEN",
                            "PLAN:ENDED:FINISHED",
                            "PLAN:ENDED:UNPLUGGED",
                            "PLAN:ENDED:FAILED",
                            "PLAN:ENDED:DISABLED",
                            "PLAN:ENDED:DEADLINE_CHANGED"
                        ],
                        "description": "An enum value that describes the current SmartCharging state of the vehicle. Every vehicle is in exactly one state, at all times"
                    },
                    "stateChangedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the the 'state' property transitioned to its current value"
                    },
                    "consideration": {
                        "type": "object",
                        "description": "`null` by default, but during the `CONSIDERING` state, the value is populated with a list of all the requirements that must be true before a plan will be created",
                        "properties": {
                            "isSmartChargeCapable": {
                                "type": "boolean",
                                "description": "Vehicle has the capability 'smartCharging'"
                            },
                            "isPluggedIn": {
                                "type": "boolean",
                                "description": "The vehicle is plugged in"
                            },
                            "isCharging": {
                                "type": "boolean",
                                "description": "The vehicle is charging"
                            },
                            "recentlyAtChargingLocation": {
                                "type": "boolean",
                                "description": "The vehicle is located at a configured Charging Location"
                            },
                            "hasTimeEstimate": {
                                "type": "boolean",
                                "description": "A good estimate is available of how much time it will take to charge."
                            },
                            "confidentTimeEstimate": {
                                "type": "boolean",
                                "description": "To be removed soon. Use hasTimeEstimate instead."
                            },
                            "needsSignificantCharge": {
                                "type": "boolean",
                                "description": "The charge needed is greater than 60 minutes and greater than 5% of total battery capacity"
                            },
                            "hasChargeAboveThreshold": {
                                "type": "boolean",
                                "description": "The battery is already at least 20% charged"
                            },
                            "singleUser": {
                                "type": "boolean",
                                "description": "Only 1 User has this vehicle actively connected to Enode. Nearly always true in real use cases, but can be an issue for vehicles used in testing/development/integration."
                            },
                            "wontStopExistingChargingSession": {
                                "type": "boolean",
                                "description": "If charging started before the previous deadline, we assume vehicle should be left charging, and we will not create a charge plan. For example, if you start charging a vehicle at 03:00 with a deadline of 06:00 and 6 hours remaining, `wontStopExistingChargingSession` will be false once the deadline is passed. It resets to true the next time you plug in your car."
                            },
                            "atChargingLocation": {
                                "type": "boolean",
                                "description": "The vehicle is located at a configured Charging Location"
                            },
                            "locationIsFresh": {
                                "type": "boolean",
                                "description": "The GPS location of the vehicle is recently updated and trustworthy"
                            },
                            "confidentBatteryCapacity": {
                                "type": "boolean",
                                "description": "The calculated battery capacity is confidently known or estimated"
                            },
                            "needsCharge": {
                                "type": "boolean",
                                "description": "The vehicle's battery is not fully charged"
                            },
                            "priceDataAvailable": {
                                "type": "boolean",
                                "description": "Price data is available for the current charging location"
                            },
                            "minimumSavings": {
                                "type": "boolean",
                                "description": "The savings of a possible plan are above a configurable threshold"
                            },
                            "minimumDelay": {
                                "type": "boolean",
                                "description": "The resulting delay of a possible plan is above 30 minutes"
                            },
                            "isNormalSchedule": {
                                "type": "boolean",
                                "description": "If charging started before the previous deadline, we assume vehicle should be left charging, and we will not create a charge plan. For example, if you start charging a vehicle at 03:00 with a deadline of 06:00 and 6 hours remaining, isNormalSchedule will be false once the deadline is passed. It resets to true the next time you plug in your car."
                            }
                        }
                    },
                    "plan": {
                        "allOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "ID of the Plan"
                                    },
                                    "chargingLocationId": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "ID of the charging location at which the plan is being executed. Null for plans started before March 2022.",
                                        "x-format": {
                                            "guid": true
                                        }
                                    },
                                    "vehicleId": {
                                        "type": "string",
                                        "description": "ID of the Vehicle to which the Plan belongs"
                                    },
                                    "userId": {
                                        "type": "string",
                                        "description": "ID of the User to which the Plan belongs"
                                    },
                                    "vendor": {
                                        "type": "string",
                                        "description": "Vendor of the Vehicle to which the Plan belongs"
                                    },
                                    "currency": {
                                        "type": "string",
                                        "description": "Currency in which monetary amounts are denominated (ISO 4217 3-character Alpha code)"
                                    },
                                    "nonSmartCost": {
                                        "allOf": [
                                            {
                                                "type": "number"
                                            },
                                            {
                                                "type": "number",
                                                "description": "Estimated cost of default charging behavior"
                                            }
                                        ]
                                    },
                                    "smartCost": {
                                        "allOf": [
                                            {
                                                "type": "number"
                                            },
                                            {
                                                "type": "number",
                                                "description": "Estimated cost achieved by this Smart Charge plan"
                                            }
                                        ]
                                    },
                                    "stopAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Time at which the vehicle will stop charging"
                                    },
                                    "startAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Time at which the vehicle will start charging"
                                    },
                                    "estimatedFinishAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Time at which charging is estimated to be complete"
                                    },
                                    "stopConfirmedAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Time at which the vehicle's charging was confirmed as stopped."
                                    },
                                    "startConfirmedAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Time at which the vehicle's charging was confirmed as started."
                                    },
                                    "endedAt": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The actual time at which the plan ended"
                                    },
                                    "finalState": {
                                        "type": "string",
                                        "enum": [
                                            "PLAN:ENDED:FINISHED",
                                            "PLAN:ENDED:UNPLUGGED",
                                            "PLAN:ENDED:FAILED",
                                            "PLAN:ENDED:DISABLED",
                                            "PLAN:ENDED:DEADLINE_CHANGED"
                                        ],
                                        "description": "The final state of the plan when it ended"
                                    },
                                    "failureCondition": {
                                        "type": "string",
                                        "enum": [
                                            "STOP_FAILED",
                                            "START_FAILED",
                                            "FINISHED_LATE"
                                        ],
                                        "description": "If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed."
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "description": "`null` by default, but during all of the `PLAN:*` states,  the value is populated with a description of the active plan"
                            }
                        ]
                    },
                    "externalStart": {
                        "type": [
                            "object",
                            "null"
                        ],
                        "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                        "properties": {
                            "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "ISO8601 UTC timestamp at which the external start was created."
                            },
                            "endedAt": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time",
                                "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                            },
                            "targetType": {
                                "type": "string",
                                "enum": [
                                    "vehicle",
                                    "charger"
                                ],
                                "description": "The Vendor Type of the target entity this External Start is referencing."
                            },
                            "targetId": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    {
                                        "type": "string",
                                        "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                                    }
                                ]
                            },
                            "vendorActionId": {
                                "type": "string",
                                "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "getChargingLocationTariff",
            "url": "https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}/tariff",
            "description": "Get Tariff intervals for a given charging location.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "chargingLocationId",
                    "type": "STRING",
                    "description": "ID of the Charging Location",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/charging-locations/{charginglocationid}/tariff\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "weekday": 0,
                    "fromHourMinute": "00:00",
                    "toHourMinute": "06:00",
                    "tariffId": "testing-tariff-a",
                    "tariffName": "OFF-PEAK"
                },
                {
                    "weekday": 0,
                    "fromHourMinute": "06:00",
                    "toHourMinute": "18:00",
                    "tariffId": "testing-tariff-a",
                    "tariffName": "PEAK"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "description": "",
                "items": {
                    "type": "object",
                    "properties": {
                        "weekday": {
                            "type": "number"
                        },
                        "fromHourMinute": {
                            "type": "string"
                        },
                        "toHourMinute": {
                            "type": "string"
                        },
                        "tariffId": {
                            "type": "string"
                        },
                        "tariffName": {
                            "type": "string"
                        }
                    }
                },
                "maxItems": 2
            }
        },
        {
            "name": "vehicleCreateExternalStart",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/external-start",
            "description": "Forces a vehicle to start charging. Any active Schedules or Smart Charging plans will transition to an overridden state and will cease dispatching Vendor Actions to the vehicle. An External Start does not cancel a Smart Charging Plan - it only enables charging. This endpoint allows the user to enable charging immediately, without worrying about disabling Schedules or Smart Charging. The override remains active until the vehicle stops charging, or until the [Delete External Start](/api/reference#vehicleEndExternalStart) endpoint is called.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/external-start\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "createdAt": "2020-04-07T17:04:26Z",
                "endedAt": "2020-04-07T17:04:26Z",
                "targetType": "vehicle",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "vendorActionId": ""
            },
            "headers": {},
            "schema": {
                "type": [
                    "object",
                    "null"
                ],
                "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was created."
                    },
                    "endedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ],
                        "description": "The Vendor Type of the target entity this External Start is referencing."
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                            }
                        ]
                    },
                    "vendorActionId": {
                        "type": "string",
                        "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                    }
                }
            }
        },
        {
            "name": "getSchedule",
            "url": "https://enode-api.p.rapidapi.com/schedules/{scheduleid}",
            "description": " ",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "scheduleId",
                    "type": "STRING",
                    "description": "ID of the Schedule.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/schedules/{scheduleid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe"
            },
            "headers": {},
            "schema": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "description": "A Schedule that applies to the combination of a certain Charging Location and chargeable asset (Vehicle/Charger/HVAC). Read the guide to [Using Schedules](/docs/scheduling).",
                        "required": [
                            "targetId",
                            "chargingLocationId"
                        ],
                        "anyOf": [
                            {
                                "title": "Charge Schedule",
                                "properties": {
                                    "defaultShouldCharge": {
                                        "type": "boolean",
                                        "description": "Default value of `shouldCharge` when no rule applies.",
                                        "default": "<boolean>"
                                    },
                                    "rules": {
                                        "type": "array",
                                        "description": "Each rule sets a value for `shouldCharge`, either `true` or `false`. All other properties of the rule are optional filters that limit the times to which this rule applies.",
                                        "items": {
                                            "type": "object",
                                            "title": "Charge Schedule",
                                            "required": [
                                                "shouldCharge"
                                            ],
                                            "allOf": [
                                                {
                                                    "properties": {
                                                        "hourMinute": {
                                                            "type": "object",
                                                            "required": [
                                                                "from",
                                                                "to"
                                                            ],
                                                            "description": "An interval composed of two clock times during which this rule applies each day. `to` always resolves to a timestamp after `from`, and thus may span across midnight and fall on the next day.",
                                                            "properties": {
                                                                "from": {
                                                                    "type": "string",
                                                                    "description": "Clock time from which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                },
                                                                "to": {
                                                                    "type": "string",
                                                                    "description": "Clock time until which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                }
                                                            }
                                                        },
                                                        "fromTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp from which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "toTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp until which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "weekdays": {
                                                            "type": "array",
                                                            "description": "An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.",
                                                            "items": {
                                                                "type": "integer",
                                                                "enum": [
                                                                    0,
                                                                    1,
                                                                    2,
                                                                    3,
                                                                    4,
                                                                    5,
                                                                    6
                                                                ],
                                                                "default": "<integer>"
                                                            },
                                                            "maxItems": 2,
                                                            "minItems": 2
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "shouldCharge": {
                                                            "type": "boolean",
                                                            "description": "Whether a chargeable asset should want to charge while this rule is active.",
                                                            "default": "<boolean>"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "maxItems": 2,
                                        "minItems": 2
                                    },
                                    "targetType": {
                                        "type": "string",
                                        "enum": [
                                            "vehicle",
                                            "charger"
                                        ]
                                    }
                                },
                                "required": [
                                    "defaultShouldCharge"
                                ],
                                "type": "object"
                            },
                            {
                                "title": "Temperature Schedule",
                                "properties": {
                                    "defaultTarget": {
                                        "allOf": [
                                            {
                                                "description": "HVAC target temperature while this rule is active."
                                            },
                                            {
                                                "type": "object",
                                                "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                                "required": [
                                                    "temperature"
                                                ],
                                                "properties": {
                                                    "temperature": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ],
                                                        "description": "Desired temperature",
                                                        "default": "<number>"
                                                    },
                                                    "deadband": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ],
                                                        "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                                        "default": "<number>"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "rules": {
                                        "type": "array",
                                        "description": "Each rule sets a value for `targetTemperature`. All other properties of the rule are optional filters that limit the times to which this rule applies.",
                                        "items": {
                                            "type": "object",
                                            "title": "Temperature Schedule",
                                            "required": [
                                                "targetTemperature"
                                            ],
                                            "allOf": [
                                                {
                                                    "properties": {
                                                        "hourMinute": {
                                                            "type": "object",
                                                            "required": [
                                                                "from",
                                                                "to"
                                                            ],
                                                            "description": "An interval composed of two clock times during which this rule applies each day. `to` always resolves to a timestamp after `from`, and thus may span across midnight and fall on the next day.",
                                                            "properties": {
                                                                "from": {
                                                                    "type": "string",
                                                                    "description": "Clock time from which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                },
                                                                "to": {
                                                                    "type": "string",
                                                                    "description": "Clock time until which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                }
                                                            }
                                                        },
                                                        "fromTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp from which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "toTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp until which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "weekdays": {
                                                            "type": "array",
                                                            "description": "An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.",
                                                            "items": {
                                                                "type": "integer",
                                                                "enum": [
                                                                    0,
                                                                    1,
                                                                    2,
                                                                    3,
                                                                    4,
                                                                    5,
                                                                    6
                                                                ],
                                                                "default": "<integer>"
                                                            },
                                                            "maxItems": 2,
                                                            "minItems": 2
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "targetTemperature": {
                                                            "allOf": [
                                                                {
                                                                    "description": "HVAC target temperature while this rule is active."
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                                                    "required": [
                                                                        "temperature"
                                                                    ],
                                                                    "properties": {
                                                                        "temperature": {
                                                                            "type": [
                                                                                "number",
                                                                                "null"
                                                                            ],
                                                                            "description": "Desired temperature",
                                                                            "default": "<number>"
                                                                        },
                                                                        "deadband": {
                                                                            "type": [
                                                                                "number",
                                                                                "null"
                                                                            ],
                                                                            "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                                                            "default": "<number>"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "targetType": {
                                        "type": "string",
                                        "enum": [
                                            "hvac"
                                        ]
                                    }
                                },
                                "required": [
                                    "defaultTarget"
                                ]
                            }
                        ],
                        "properties": {
                            "targetId": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    {
                                        "type": "string",
                                        "description": "ID of the asset (Vehicle/Charger/HVAC) to which this schedule applies"
                                    }
                                ]
                            },
                            "chargingLocationId": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "ID of the Charging Location to which this schedule applies. If null, schedule is applied at all of the User's Charging Locations."
                                    }
                                ]
                            },
                            "isEnabled": {
                                "type": "boolean",
                                "description": "Whether this Schedule should be attempting to control the target's charge state.",
                                "default": true
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "getScheduleStatus",
            "url": "https://enode-api.p.rapidapi.com/schedules/{scheduleid}/status",
            "description": "",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "scheduleId",
                    "type": "STRING",
                    "description": "ID of the Schedule.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/schedules/{scheduleid}/status\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "scheduleId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "changedAt": "",
                "state": "ALIGNED",
                "isCharging": true,
                "isChargingExpected": true,
                "isChargingExpectedParts": {
                    "needsCharge": true,
                    "isPluggedIn": true,
                    "shouldCharge": true
                },
                "upcomingTransitions": [
                    {
                        "at": "2020-04-07T17:04:26Z",
                        "shouldCharge": true,
                        "targetTemperature": 0
                    }
                ],
                "externalStart": {
                    "createdAt": "2020-04-07T17:04:26Z",
                    "endedAt": "2020-04-07T17:04:26Z",
                    "targetType": "vehicle",
                    "targetId": {
                        "0": "8",
                        "1": "d",
                        "2": "9",
                        "3": "0",
                        "4": "1",
                        "5": "0",
                        "6": "1",
                        "7": "b",
                        "8": "3",
                        "9": "f",
                        "10": "2",
                        "11": "f"
                    },
                    "vendorActionId": ""
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "description": "",
                "required": [
                    "scheduleId",
                    "changedAt",
                    "state",
                    "isCharging",
                    "isChargingExpected",
                    "isChargingExpectedParts",
                    "upcomingTransitions"
                ],
                "properties": {
                    "scheduleId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "changedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which any value of the status last changed"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "ALIGNED",
                            "MISALIGNED",
                            "PENDING",
                            "INACTIVE:OVERRIDDEN",
                            "INACTIVE:DISABLED",
                            "INACTIVE:AWAY",
                            "INACTIVE:INCAPABLE"
                        ],
                        "description": "An enum value that describes the current state of the Schedule"
                    },
                    "isCharging": {
                        "type": "boolean",
                        "description": "Whether the target is currently actually charging"
                    },
                    "isChargingExpected": {
                        "type": "boolean",
                        "description": "Whether the target is currently expected to be charging"
                    },
                    "isChargingExpectedParts": {
                        "type": "object",
                        "description": "Collection of booleans that - when combined via AND operator - forms the `isChargingExpected` value",
                        "required": [
                            "needsCharge",
                            "isPluggedIn",
                            "shouldCharge"
                        ],
                        "properties": {
                            "needsCharge": {
                                "type": "boolean"
                            },
                            "isPluggedIn": {
                                "type": "boolean"
                            },
                            "shouldCharge": {
                                "type": "boolean"
                            }
                        }
                    },
                    "upcomingTransitions": {
                        "type": "array",
                        "description": "List of upcoming transitions of the `shouldCharge` or `targetTemperature` value. A maximum of 2 items are returned.",
                        "items": {
                            "type": "object",
                            "required": [
                                "at"
                            ],
                            "properties": {
                                "at": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "ISO8601 UTC timestamp"
                                },
                                "shouldCharge": {
                                    "type": "boolean"
                                },
                                "targetTemperature": {
                                    "type": "number"
                                }
                            }
                        },
                        "maxItems": 2
                    },
                    "externalStart": {
                        "type": [
                            "object",
                            "null"
                        ],
                        "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                        "properties": {
                            "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "ISO8601 UTC timestamp at which the external start was created."
                            },
                            "endedAt": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time",
                                "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                            },
                            "targetType": {
                                "type": "string",
                                "enum": [
                                    "vehicle",
                                    "charger"
                                ],
                                "description": "The Vendor Type of the target entity this External Start is referencing."
                            },
                            "targetId": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    {
                                        "type": "string",
                                        "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                                    }
                                ]
                            },
                            "vendorActionId": {
                                "type": "string",
                                "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "vehicleEndExternalStart",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/external-start",
            "description": "Ends any active External Start for the vehicle specified by `vehicleId`. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.",
            "method": "DELETE",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/external-start\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "createdAt": "2020-04-07T17:04:26Z",
                "endedAt": "2020-04-07T17:04:26Z",
                "targetType": "vehicle",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "vendorActionId": ""
            },
            "headers": {},
            "schema": {
                "type": [
                    "object",
                    "null"
                ],
                "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was created."
                    },
                    "endedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ],
                        "description": "The Vendor Type of the target entity this External Start is referencing."
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                            }
                        ]
                    },
                    "vendorActionId": {
                        "type": "string",
                        "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                    }
                }
            }
        },
        {
            "name": "getMe",
            "url": "https://enode-api.p.rapidapi.com/me",
            "description": "Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/me\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "123456789-ABc",
                "linkedVendors": [
                    {
                        "vendor": {},
                        "isValid": true
                    }
                ]
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "minLength": 1
                    },
                    "linkedVendors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "vendor": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "title": "Vehicle Vendor",
                                            "description": "Vehicle Vendor",
                                            "enum": [
                                                "AUDI",
                                                "BMW",
                                                "HONDA",
                                                "HYUNDAI",
                                                "JAGUAR",
                                                "KIA",
                                                "MERCEDES",
                                                "MINI",
                                                "NISSAN",
                                                "PEUGEOT",
                                                "PORSCHE",
                                                "RENAULT",
                                                "SEAT",
                                                "SKODA",
                                                "TESLA",
                                                "VOLKSWAGEN",
                                                "VOLVO",
                                                "FORD",
                                                "OPEL",
                                                "DS",
                                                "TOYOTA",
                                                "CITROEN",
                                                "CUPRA",
                                                "VAUXHALL"
                                            ]
                                        },
                                        {
                                            "type": "string",
                                            "title": "Charger Vendor",
                                            "description": "Charger Vendor",
                                            "enum": [
                                                "ZAPTEC",
                                                "EASEE",
                                                "WALLBOX",
                                                "EO",
                                                "CHARGEAMPS",
                                                "EVBOX"
                                            ]
                                        },
                                        {
                                            "type": "string",
                                            "title": "HVAC Vendor",
                                            "description": "HVAC Vendor",
                                            "enum": [
                                                "TADO",
                                                "MILL",
                                                "ADAX",
                                                "ECOBEE",
                                                "SENSIBO",
                                                "HONEYWELL",
                                                "MITSUBISHI"
                                            ]
                                        },
                                        {
                                            "type": "string",
                                            "title": "Inverter Vendor",
                                            "description": "Inverter Vendor",
                                            "enum": [
                                                "FRONIUS",
                                                "GROWATT",
                                                "SOLAREDGE",
                                                "SOLIS"
                                            ]
                                        }
                                    ]
                                },
                                "isValid": {
                                    "type": "boolean",
                                    "description": "Whether the provided credentials are currently valid. A `false` value here indicates that a credential has become invalidated, and [Link User](/api/reference#postUsersUseridLink) should be used to get new credentials from this user."
                                }
                            }
                        },
                        "maxItems": 2
                    }
                }
            }
        },
        {
            "name": "updateSchedule",
            "url": "https://enode-api.p.rapidapi.com/schedules/{scheduleid}",
            "description": "Does a partial update of a schedule.",
            "method": "PUT",
            "required_parameters": [
                {
                    "name": "scheduleId",
                    "type": "STRING",
                    "description": "ID of the Schedule.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/schedules/{scheduleid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.put(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe"
            },
            "headers": {},
            "schema": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "description": "A Schedule that applies to the combination of a certain Charging Location and chargeable asset (Vehicle/Charger/HVAC). Read the guide to [Using Schedules](/docs/scheduling).",
                        "required": [
                            "targetId",
                            "chargingLocationId"
                        ],
                        "anyOf": [
                            {
                                "title": "Charge Schedule",
                                "properties": {
                                    "defaultShouldCharge": {
                                        "type": "boolean",
                                        "description": "Default value of `shouldCharge` when no rule applies.",
                                        "default": "<boolean>"
                                    },
                                    "rules": {
                                        "type": "array",
                                        "description": "Each rule sets a value for `shouldCharge`, either `true` or `false`. All other properties of the rule are optional filters that limit the times to which this rule applies.",
                                        "items": {
                                            "type": "object",
                                            "title": "Charge Schedule",
                                            "required": [
                                                "shouldCharge"
                                            ],
                                            "allOf": [
                                                {
                                                    "properties": {
                                                        "hourMinute": {
                                                            "type": "object",
                                                            "required": [
                                                                "from",
                                                                "to"
                                                            ],
                                                            "description": "An interval composed of two clock times during which this rule applies each day. `to` always resolves to a timestamp after `from`, and thus may span across midnight and fall on the next day.",
                                                            "properties": {
                                                                "from": {
                                                                    "type": "string",
                                                                    "description": "Clock time from which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                },
                                                                "to": {
                                                                    "type": "string",
                                                                    "description": "Clock time until which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                }
                                                            }
                                                        },
                                                        "fromTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp from which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "toTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp until which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "weekdays": {
                                                            "type": "array",
                                                            "description": "An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.",
                                                            "items": {
                                                                "type": "integer",
                                                                "enum": [
                                                                    0,
                                                                    1,
                                                                    2,
                                                                    3,
                                                                    4,
                                                                    5,
                                                                    6
                                                                ],
                                                                "default": "<integer>"
                                                            },
                                                            "maxItems": 2,
                                                            "minItems": 2
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "shouldCharge": {
                                                            "type": "boolean",
                                                            "description": "Whether a chargeable asset should want to charge while this rule is active.",
                                                            "default": "<boolean>"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "maxItems": 2,
                                        "minItems": 2
                                    },
                                    "targetType": {
                                        "type": "string",
                                        "enum": [
                                            "vehicle",
                                            "charger"
                                        ]
                                    }
                                },
                                "required": [
                                    "defaultShouldCharge"
                                ],
                                "type": "object"
                            },
                            {
                                "title": "Temperature Schedule",
                                "properties": {
                                    "defaultTarget": {
                                        "allOf": [
                                            {
                                                "description": "HVAC target temperature while this rule is active."
                                            },
                                            {
                                                "type": "object",
                                                "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                                "required": [
                                                    "temperature"
                                                ],
                                                "properties": {
                                                    "temperature": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ],
                                                        "description": "Desired temperature",
                                                        "default": "<number>"
                                                    },
                                                    "deadband": {
                                                        "type": [
                                                            "number",
                                                            "null"
                                                        ],
                                                        "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                                        "default": "<number>"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "rules": {
                                        "type": "array",
                                        "description": "Each rule sets a value for `targetTemperature`. All other properties of the rule are optional filters that limit the times to which this rule applies.",
                                        "items": {
                                            "type": "object",
                                            "title": "Temperature Schedule",
                                            "required": [
                                                "targetTemperature"
                                            ],
                                            "allOf": [
                                                {
                                                    "properties": {
                                                        "hourMinute": {
                                                            "type": "object",
                                                            "required": [
                                                                "from",
                                                                "to"
                                                            ],
                                                            "description": "An interval composed of two clock times during which this rule applies each day. `to` always resolves to a timestamp after `from`, and thus may span across midnight and fall on the next day.",
                                                            "properties": {
                                                                "from": {
                                                                    "type": "string",
                                                                    "description": "Clock time from which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                },
                                                                "to": {
                                                                    "type": "string",
                                                                    "description": "Clock time until which this rule should apply each day.",
                                                                    "pattern": "\\d{2}:\\d{2}",
                                                                    "default": "<string>"
                                                                }
                                                            }
                                                        },
                                                        "fromTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp from which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "toTimestamp": {
                                                            "type": "string",
                                                            "description": "UTC timestamp until which this rule should apply.",
                                                            "format": "date-time",
                                                            "default": "<dateTime>"
                                                        },
                                                        "weekdays": {
                                                            "type": "array",
                                                            "description": "An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.",
                                                            "items": {
                                                                "type": "integer",
                                                                "enum": [
                                                                    0,
                                                                    1,
                                                                    2,
                                                                    3,
                                                                    4,
                                                                    5,
                                                                    6
                                                                ],
                                                                "default": "<integer>"
                                                            },
                                                            "maxItems": 2,
                                                            "minItems": 2
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "targetTemperature": {
                                                            "allOf": [
                                                                {
                                                                    "description": "HVAC target temperature while this rule is active."
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                                                    "required": [
                                                                        "temperature"
                                                                    ],
                                                                    "properties": {
                                                                        "temperature": {
                                                                            "type": [
                                                                                "number",
                                                                                "null"
                                                                            ],
                                                                            "description": "Desired temperature",
                                                                            "default": "<number>"
                                                                        },
                                                                        "deadband": {
                                                                            "type": [
                                                                                "number",
                                                                                "null"
                                                                            ],
                                                                            "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                                                            "default": "<number>"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "targetType": {
                                        "type": "string",
                                        "enum": [
                                            "hvac"
                                        ]
                                    }
                                },
                                "required": [
                                    "defaultTarget"
                                ]
                            }
                        ],
                        "properties": {
                            "targetId": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    {
                                        "type": "string",
                                        "description": "ID of the asset (Vehicle/Charger/HVAC) to which this schedule applies"
                                    }
                                ]
                            },
                            "chargingLocationId": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "ID of the Charging Location to which this schedule applies. If null, schedule is applied at all of the User's Charging Locations."
                                    }
                                ]
                            },
                            "isEnabled": {
                                "type": "boolean",
                                "description": "Whether this Schedule should be attempting to control the target's charge state.",
                                "default": true
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "getStatisticsCharging",
            "url": "https://enode-api.p.rapidapi.com/statistics/charging",
            "description": "Returns a normalized time series of statistics about power consumption and price for the User.\n\nIf Smart Charging has shifted the consumption, the 'non-smart' price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the `estimatedSavings` field for convenience. `<CURRENCY>` is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "startDate",
                    "type": "STRING",
                    "description": "Earliest date to include in the response. Cannot be greater than endDate.",
                    "default": "<date>"
                }
            ],
            "optional_parameters": [
                {
                    "name": "endDate",
                    "type": "STRING",
                    "description": "Latest date to include in the response (defaults to current date/time).",
                    "default": "<date>"
                },
                {
                    "name": "chargingLocationId",
                    "type": "STRING",
                    "description": "Filter statistics to only include this charging location.",
                    "default": "<string>"
                },
                {
                    "name": "resolution",
                    "type": "STRING",
                    "description": "The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified.",
                    "default": "DAY"
                },
                {
                    "name": "utcOffset",
                    "type": "NUMBER",
                    "description": "Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing `utcOffset` instead aligns these to the viewer's timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid.",
                    "default": "-8"
                },
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "Filter statistics to only include a specific entity. Hardware category of the entity must match the `type` parameter.",
                    "default": "<string>"
                },
                {
                    "name": "type",
                    "type": "STRING",
                    "description": "Get statistics for this hardware type.",
                    "default": "<string>"
                }
            ],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/statistics/charging\"\nquerystring = {\"endDate\": enddate, \"chargingLocationId\": charginglocationid, \"startDate\": startdate, \"resolution\": resolution, \"utcOffset\": utcoffset, \"id\": id, \"type\": type}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "kw": {
                        "min": 0,
                        "max": 78,
                        "mean": 61
                    },
                    "kwhSum": 120,
                    "price": {
                        "min": 13.8,
                        "max": 14.4,
                        "mean": 14.1
                    },
                    "nonSmartPrice": {
                        "min": 12.9,
                        "max": 16.7,
                        "mean": 14.8
                    },
                    "costSum": 3.14,
                    "nonSmartCostSum": 4.21,
                    "estimatedSavings": 1.07,
                    "date": "2021-01-19T09:37:36.845Z"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "kw": {
                            "type": "object",
                            "description": "Aggregate statistics for charge rate in kW",
                            "properties": {
                                "min": {
                                    "type": "number"
                                },
                                "max": {
                                    "type": "number"
                                },
                                "mean": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "min",
                                "max",
                                "mean"
                            ]
                        },
                        "kwhSum": {
                            "type": "number",
                            "description": "Total power consumption in kWh"
                        },
                        "price": {
                            "type": "object",
                            "description": "Aggregate statistics for power price (<CURRENCY> per kWh)",
                            "properties": {
                                "min": {
                                    "type": "number"
                                },
                                "max": {
                                    "type": "number"
                                },
                                "mean": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "min",
                                "max",
                                "mean"
                            ]
                        },
                        "nonSmartPrice": {
                            "type": "object",
                            "description": "Aggregate statistics for power price (<CURRENCY> per kWh), calculated as if the charging had ocurred uninterrupted without being delayed by Smart Charging",
                            "properties": {
                                "min": {
                                    "type": "number"
                                },
                                "max": {
                                    "type": "number"
                                },
                                "mean": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "min",
                                "max",
                                "mean"
                            ]
                        },
                        "costSum": {
                            "type": "number",
                            "description": "Total cost in <CURRENCY>"
                        },
                        "nonSmartCostSum": {
                            "type": "number",
                            "description": "Total cost for this consumption in <CURRENCY>, if it had not been shifted by Smart Charging"
                        },
                        "estimatedSavings": {
                            "type": "number",
                            "description": "Total estimated savings in <CURRENCY>, achieved by Smart Charging"
                        },
                        "date": {
                            "type": "string",
                            "format": "date",
                            "description": "The start date of this sample within the timeseries"
                        }
                    },
                    "required": [
                        "kw",
                        "kwhSum",
                        "price",
                        "nonSmartPrice",
                        "costSum",
                        "nonSmartCostSum",
                        "estimatedSavings",
                        "date"
                    ]
                },
                "maxItems": 2
            }
        },
        {
            "name": "listInverters",
            "url": "https://enode-api.p.rapidapi.com/inverters",
            "description": " ",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/inverters\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "string",
                    "description": "Solar inverter IDs"
                },
                "maxItems": 2
            }
        },
        {
            "name": "getVehiclesVehicleidSmartchargingplans",
            "url": "https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-plans/{smartchargingplanid}",
            "description": "Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.\n\nTo fetch the most recently created plan, call the endpoint with `smartChargingPlanId` set to `latest`.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                },
                {
                    "name": "smartChargingPlanId",
                    "type": "STRING",
                    "description": "ID of the Smart Charging Plan",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/smart-charging-plans/{smartchargingplanid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "",
                "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "vehicleId": "",
                "userId": "",
                "vendor": "",
                "currency": "NOK",
                "nonSmartCost": {},
                "smartCost": {},
                "stopAt": "",
                "startAt": "",
                "estimatedFinishAt": "",
                "stopConfirmedAt": "",
                "startConfirmedAt": "",
                "endedAt": "",
                "finalState": "PLAN:ENDED:FINISHED",
                "failureCondition": "STOP_FAILED"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Plan"
                    },
                    "chargingLocationId": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "ID of the charging location at which the plan is being executed. Null for plans started before March 2022.",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "vehicleId": {
                        "type": "string",
                        "description": "ID of the Vehicle to which the Plan belongs"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the User to which the Plan belongs"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Vendor of the Vehicle to which the Plan belongs"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency in which monetary amounts are denominated (ISO 4217 3-character Alpha code)"
                    },
                    "nonSmartCost": {
                        "allOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "number",
                                "description": "Estimated cost of default charging behavior"
                            }
                        ]
                    },
                    "smartCost": {
                        "allOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "number",
                                "description": "Estimated cost achieved by this Smart Charge plan"
                            }
                        ]
                    },
                    "stopAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the vehicle will stop charging"
                    },
                    "startAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the vehicle will start charging"
                    },
                    "estimatedFinishAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which charging is estimated to be complete"
                    },
                    "stopConfirmedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the vehicle's charging was confirmed as stopped."
                    },
                    "startConfirmedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the vehicle's charging was confirmed as started."
                    },
                    "endedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The actual time at which the plan ended"
                    },
                    "finalState": {
                        "type": "string",
                        "enum": [
                            "PLAN:ENDED:FINISHED",
                            "PLAN:ENDED:UNPLUGGED",
                            "PLAN:ENDED:FAILED",
                            "PLAN:ENDED:DISABLED",
                            "PLAN:ENDED:DEADLINE_CHANGED"
                        ],
                        "description": "The final state of the plan when it ended"
                    },
                    "failureCondition": {
                        "type": "string",
                        "enum": [
                            "STOP_FAILED",
                            "START_FAILED",
                            "FINISHED_LATE"
                        ],
                        "description": "If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed."
                    }
                }
            }
        },
        {
            "name": "getChargersAction",
            "url": "https://enode-api.p.rapidapi.com/chargers/actions/{actionid}",
            "description": "Returns the current state of the requested action.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "actionId",
                    "type": "STRING",
                    "description": "ID of the Action",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/actions/{actionid}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "targetType": "vehicle",
                "kind": "START",
                "createdAt": "2020-04-07T17:04:26Z",
                "updatedAt": "2020-04-07T17:04:26Z",
                "completedAt": "2020-04-07T17:04:26Z",
                "state": {}
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of action",
                        "enum": [
                            "START",
                            "STOP"
                        ],
                        "default": "<string>"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "getSchedules",
            "url": "https://enode-api.p.rapidapi.com/schedules",
            "description": "Returns a list of Schedules registered to the User.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/schedules\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [
                {
                    "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "allOf": [
                        {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "description": "A Schedule that applies to the combination of a certain Charging Location and chargeable asset (Vehicle/Charger/HVAC). Read the guide to [Using Schedules](/docs/scheduling).",
                            "required": [
                                "targetId",
                                "chargingLocationId"
                            ],
                            "anyOf": [
                                {
                                    "title": "Charge Schedule",
                                    "properties": {
                                        "defaultShouldCharge": {
                                            "type": "boolean",
                                            "description": "Default value of `shouldCharge` when no rule applies.",
                                            "default": "<boolean>"
                                        },
                                        "rules": {
                                            "type": "array",
                                            "description": "Each rule sets a value for `shouldCharge`, either `true` or `false`. All other properties of the rule are optional filters that limit the times to which this rule applies.",
                                            "items": {
                                                "type": "object",
                                                "title": "Charge Schedule",
                                                "required": [
                                                    "shouldCharge"
                                                ],
                                                "allOf": [
                                                    {
                                                        "properties": {
                                                            "hourMinute": {
                                                                "type": "object",
                                                                "required": [
                                                                    "from",
                                                                    "to"
                                                                ],
                                                                "description": "An interval composed of two clock times during which this rule applies each day. `to` always resolves to a timestamp after `from`, and thus may span across midnight and fall on the next day.",
                                                                "properties": {
                                                                    "from": {
                                                                        "type": "string",
                                                                        "description": "Clock time from which this rule should apply each day.",
                                                                        "pattern": "\\d{2}:\\d{2}",
                                                                        "default": "<string>"
                                                                    },
                                                                    "to": {
                                                                        "type": "string",
                                                                        "description": "Clock time until which this rule should apply each day.",
                                                                        "pattern": "\\d{2}:\\d{2}",
                                                                        "default": "<string>"
                                                                    }
                                                                }
                                                            },
                                                            "fromTimestamp": {
                                                                "type": "string",
                                                                "description": "UTC timestamp from which this rule should apply.",
                                                                "format": "date-time",
                                                                "default": "<dateTime>"
                                                            },
                                                            "toTimestamp": {
                                                                "type": "string",
                                                                "description": "UTC timestamp until which this rule should apply.",
                                                                "format": "date-time",
                                                                "default": "<dateTime>"
                                                            },
                                                            "weekdays": {
                                                                "type": "array",
                                                                "description": "An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.",
                                                                "items": {
                                                                    "type": "integer",
                                                                    "enum": [
                                                                        0,
                                                                        1,
                                                                        2,
                                                                        3,
                                                                        4,
                                                                        5,
                                                                        6
                                                                    ],
                                                                    "default": "<integer>"
                                                                },
                                                                "maxItems": 2,
                                                                "minItems": 2
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "shouldCharge": {
                                                                "type": "boolean",
                                                                "description": "Whether a chargeable asset should want to charge while this rule is active.",
                                                                "default": "<boolean>"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "maxItems": 2,
                                            "minItems": 2
                                        },
                                        "targetType": {
                                            "type": "string",
                                            "enum": [
                                                "vehicle",
                                                "charger"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "defaultShouldCharge"
                                    ],
                                    "type": "object"
                                },
                                {
                                    "title": "Temperature Schedule",
                                    "properties": {
                                        "defaultTarget": {
                                            "allOf": [
                                                {
                                                    "description": "HVAC target temperature while this rule is active."
                                                },
                                                {
                                                    "type": "object",
                                                    "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                                    "required": [
                                                        "temperature"
                                                    ],
                                                    "properties": {
                                                        "temperature": {
                                                            "type": [
                                                                "number",
                                                                "null"
                                                            ],
                                                            "description": "Desired temperature",
                                                            "default": "<number>"
                                                        },
                                                        "deadband": {
                                                            "type": [
                                                                "number",
                                                                "null"
                                                            ],
                                                            "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                                            "default": "<number>"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "rules": {
                                            "type": "array",
                                            "description": "Each rule sets a value for `targetTemperature`. All other properties of the rule are optional filters that limit the times to which this rule applies.",
                                            "items": {
                                                "type": "object",
                                                "title": "Temperature Schedule",
                                                "required": [
                                                    "targetTemperature"
                                                ],
                                                "allOf": [
                                                    {
                                                        "properties": {
                                                            "hourMinute": {
                                                                "type": "object",
                                                                "required": [
                                                                    "from",
                                                                    "to"
                                                                ],
                                                                "description": "An interval composed of two clock times during which this rule applies each day. `to` always resolves to a timestamp after `from`, and thus may span across midnight and fall on the next day.",
                                                                "properties": {
                                                                    "from": {
                                                                        "type": "string",
                                                                        "description": "Clock time from which this rule should apply each day.",
                                                                        "pattern": "\\d{2}:\\d{2}",
                                                                        "default": "<string>"
                                                                    },
                                                                    "to": {
                                                                        "type": "string",
                                                                        "description": "Clock time until which this rule should apply each day.",
                                                                        "pattern": "\\d{2}:\\d{2}",
                                                                        "default": "<string>"
                                                                    }
                                                                }
                                                            },
                                                            "fromTimestamp": {
                                                                "type": "string",
                                                                "description": "UTC timestamp from which this rule should apply.",
                                                                "format": "date-time",
                                                                "default": "<dateTime>"
                                                            },
                                                            "toTimestamp": {
                                                                "type": "string",
                                                                "description": "UTC timestamp until which this rule should apply.",
                                                                "format": "date-time",
                                                                "default": "<dateTime>"
                                                            },
                                                            "weekdays": {
                                                                "type": "array",
                                                                "description": "An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.",
                                                                "items": {
                                                                    "type": "integer",
                                                                    "enum": [
                                                                        0,
                                                                        1,
                                                                        2,
                                                                        3,
                                                                        4,
                                                                        5,
                                                                        6
                                                                    ],
                                                                    "default": "<integer>"
                                                                },
                                                                "maxItems": 2,
                                                                "minItems": 2
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "targetTemperature": {
                                                                "allOf": [
                                                                    {
                                                                        "description": "HVAC target temperature while this rule is active."
                                                                    },
                                                                    {
                                                                        "type": "object",
                                                                        "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                                                                        "required": [
                                                                            "temperature"
                                                                        ],
                                                                        "properties": {
                                                                            "temperature": {
                                                                                "type": [
                                                                                    "number",
                                                                                    "null"
                                                                                ],
                                                                                "description": "Desired temperature",
                                                                                "default": "<number>"
                                                                            },
                                                                            "deadband": {
                                                                                "type": [
                                                                                    "number",
                                                                                    "null"
                                                                                ],
                                                                                "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                                                                "default": "<number>"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "targetType": {
                                            "type": "string",
                                            "enum": [
                                                "hvac"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "defaultTarget"
                                    ]
                                }
                            ],
                            "properties": {
                                "targetId": {
                                    "allOf": [
                                        {
                                            "type": "string",
                                            "minLength": 1
                                        },
                                        {
                                            "type": "string",
                                            "description": "ID of the asset (Vehicle/Charger/HVAC) to which this schedule applies"
                                        }
                                    ]
                                },
                                "chargingLocationId": {
                                    "allOf": [
                                        {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "ID of the Charging Location to which this schedule applies. If null, schedule is applied at all of the User's Charging Locations."
                                        }
                                    ]
                                },
                                "isEnabled": {
                                    "type": "boolean",
                                    "description": "Whether this Schedule should be attempting to control the target's charge state.",
                                    "default": true
                                }
                            }
                        }
                    ]
                },
                "maxItems": 2
            }
        },
        {
            "name": "listChargers",
            "url": "https://enode-api.p.rapidapi.com/chargers",
            "description": "List all available Chargers for the User.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": [],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "string",
                    "description": "Charger IDs"
                },
                "maxItems": 2
            }
        },
        {
            "name": "chargerCreateExternalStart",
            "url": "https://enode-api.p.rapidapi.com/chargers/{chargerid}/external-start",
            "description": "Forces a charger to start charging. Any active Schedules will transition to an overridden state and will cease dispatching Vendor Actions to the charger. This endpoint allows the user to enable charging immediately, without worrying about disabling active Schedules. The override remains active until the charger stops charging, or until the [Delete External Start](/api/reference#chargerEndExternalStart) endpoint is called.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}/external-start\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "createdAt": "2020-04-07T17:04:26Z",
                "endedAt": "2020-04-07T17:04:26Z",
                "targetType": "vehicle",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "vendorActionId": ""
            },
            "headers": {},
            "schema": {
                "type": [
                    "object",
                    "null"
                ],
                "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was created."
                    },
                    "endedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ],
                        "description": "The Vendor Type of the target entity this External Start is referencing."
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                            }
                        ]
                    },
                    "vendorActionId": {
                        "type": "string",
                        "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                    }
                }
            }
        },
        {
            "name": "chargerEndExternalStart",
            "url": "https://enode-api.p.rapidapi.com/chargers/{chargerid}/external-start",
            "description": "Ends any active External Start for the charger specified by `chargerId`. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.",
            "method": "DELETE",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}/external-start\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "createdAt": "2020-04-07T17:04:26Z",
                "endedAt": "2020-04-07T17:04:26Z",
                "targetType": "vehicle",
                "targetId": {
                    "0": "8",
                    "1": "d",
                    "2": "9",
                    "3": "0",
                    "4": "1",
                    "5": "0",
                    "6": "1",
                    "7": "b",
                    "8": "3",
                    "9": "f",
                    "10": "2",
                    "11": "f"
                },
                "vendorActionId": ""
            },
            "headers": {},
            "schema": {
                "type": [
                    "object",
                    "null"
                ],
                "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was created."
                    },
                    "endedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ],
                        "description": "The Vendor Type of the target entity this External Start is referencing."
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                            }
                        ]
                    },
                    "vendorActionId": {
                        "type": "string",
                        "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                    }
                }
            }
        },
        {
            "name": "getCharger",
            "url": "https://enode-api.p.rapidapi.com/chargers/{chargerid}",
            "description": " ",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [
                {
                    "name": "field[]",
                    "type": "ARRAY",
                    "description": "If you specify any fields here, we make a request to the Charger's OEM APIs and return the updated data.\n\n This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the `lastSeen` & `isReachable` fields on the charger).\n\nBy default, no fields are included, and the latest cached full Charger object will be returned.",
                    "default": "[\n  \"information\"\n]"
                }
            ],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}\"\nquerystring = {\"field[]\": field}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {
                "id": "",
                "vendor": "EASEE",
                "lastSeen": "",
                "isReachable": true,
                "chargingLocationId": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                "chargeState": {
                    "isPluggedIn": true,
                    "isCharging": true,
                    "chargeRate": 40.1,
                    "lastUpdated": "2020-01-07T16:21:76Z",
                    "maxCurrent": 20
                },
                "information": {
                    "id": "8d90101b-3f2f-462a-bbb4-1ed320d33bbe",
                    "brand": "Easee",
                    "model": "Home",
                    "year": 2020
                },
                "capabilities": {
                    "information": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "chargeState": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "startCharging": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "stopCharging": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    },
                    "setMaxCurrent": {
                        "isCapable": true,
                        "interventionIds": [
                            "0defa374-8a1a-4eb1-a85f-b7cb09501097"
                        ]
                    }
                }
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Charger ID"
                    },
                    "vendor": {
                        "type": "string",
                        "title": "Charger Vendor",
                        "description": "Charger Vendor",
                        "enum": [
                            "ZAPTEC",
                            "EASEE",
                            "WALLBOX",
                            "EO",
                            "CHARGEAMPS",
                            "EVBOX"
                        ]
                    },
                    "lastSeen": {
                        "type": "string",
                        "format": "date",
                        "description": "The last time the charger was successfully communicated with"
                    },
                    "isReachable": {
                        "type": "boolean",
                        "description": "Whether live data from the charger is currently fetchable from Enode's perspective. This 'reachability' may refer to reading from a cache operated by the charger's cloud service if that service has determined that its cache is valid."
                    },
                    "chargingLocationId": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "ID of the charging location the charger is currently positioned at (if any).",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "chargeState": {
                        "type": "object",
                        "properties": {
                            "isPluggedIn": {
                                "type": "boolean",
                                "description": "Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)"
                            },
                            "isCharging": {
                                "type": "boolean",
                                "description": "Current charging status"
                            },
                            "chargeRate": {
                                "type": "number",
                                "description": "The current charge rate in kW.\n\nThis property is only available when the charger is actively charging a vehicle, and is `null` any other time.",
                                "minimum": 0
                            },
                            "lastUpdated": {
                                "type": "string",
                                "format": "date",
                                "description": "ISO8601 UTC timestamp of last received charge state update"
                            },
                            "maxCurrent": {
                                "type": "number",
                                "description": "Desired max current in ampere, if set"
                            }
                        }
                    },
                    "information": {
                        "type": "object",
                        "description": "Descriptive information about the Charger",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Charger ID"
                            },
                            "brand": {
                                "type": "string",
                                "description": "Charger brand"
                            },
                            "model": {
                                "type": "string",
                                "description": "Charger model"
                            },
                            "year": {
                                "type": "integer",
                                "description": "Charger production year"
                            }
                        }
                    },
                    "capabilities": {
                        "type": "object",
                        "description": "A collection of descriptors that describe the capabilities of this specific charger",
                        "properties": {
                            "information": {
                                "allOf": [
                                    {
                                        "description": "Full availability of information data."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "chargeState": {
                                "allOf": [
                                    {
                                        "description": "Full availability of chargeState data."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "startCharging": {
                                "allOf": [
                                    {
                                        "description": "Supports START charging command."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "stopCharging": {
                                "allOf": [
                                    {
                                        "description": "Supports STOP charging command."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            },
                            "setMaxCurrent": {
                                "allOf": [
                                    {
                                        "description": "Ability to set the max charge rate."
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "isCapable": {
                                                "type": "boolean",
                                                "description": "The entity is fully capable of providing this data or functionality. If false, support is partial or missing."
                                            },
                                            "interventionIds": {
                                                "type": "array",
                                                "description": "IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 2
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "postCharginglocations",
            "url": "https://enode-api.p.rapidapi.com/charging-locations",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/charging-locations\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/charging-locations\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "postSetHvacFollowSchedule",
            "url": "https://enode-api.p.rapidapi.com/hvacs/<string>/follow-schedule",
            "description": "Tell an HVAC unit to follow the schedule set on the device. Only available if `SCHEDULED` is present in the target's `capabilities.capableHoldType`. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit's fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/<string>/follow-schedule\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}/follow-schedule\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "postWebhooksFirehoseTest",
            "url": "https://enode-api.p.rapidapi.com/webhooks/firehose/test",
            "description": "Trigger a  \"enode:firehose:test\" payload to be sent to your configured Firehose Webhook URL. This will reset your webhook to a healthy state on success.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/webhooks/firehose/test\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/webhooks/firehose/test\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "postSetHvacTargetTemperature",
            "url": "https://enode-api.p.rapidapi.com/hvacs/<string>/temperature",
            "description": "This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.\n\nRegister a request for a change of the `targetTemperature` field on an HVAC unit. We retry sending the command until the HVAC unit's `targetTemperature` field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).\n\nThis endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/<string>/temperature\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}/temperature\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "postSetHvacPermanentHold",
            "url": "https://enode-api.p.rapidapi.com/hvacs/<string>/permanent-hold",
            "description": "Tell an HVAC unit to enter a permanent hold. Only available if `PERMANENT` is present in the target's `capabilities.capableHoldType`. We retry sending the command until the HVAC unit's `target` field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "hvacId",
                    "type": "STRING",
                    "description": "ID of the HVAC",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/<string>/permanent-hold\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/hvacs/{hvacid}/permanent-hold\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the entity asset (HVAC) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "hvac"
                        ]
                    },
                    "targetTemperature": {
                        "type": "object",
                        "description": "Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.",
                        "required": [
                            "temperature"
                        ],
                        "properties": {
                            "temperature": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Desired temperature",
                                "default": "<number>"
                            },
                            "deadband": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Size of the optional deadband centered around `temperature`.\n\nFor example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0",
                                "default": "<number>"
                            }
                        }
                    },
                    "target": {
                        "type": "object",
                        "description": "Target mode for an HVAC device",
                        "required": [
                            "mode",
                            "holdType"
                        ],
                        "properties": {
                            "mode": {
                                "allOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "HEAT",
                                            "COOL",
                                            "AUTO",
                                            "OFF"
                                        ],
                                        "description": "HVAC Mode"
                                    },
                                    {
                                        "type": "string",
                                        "description": "The HVAC's mode."
                                    }
                                ]
                            },
                            "heatSetpoint": {
                                "type": "number",
                                "description": "If mode allows, heat when `currentTemperature` falls below this point."
                            },
                            "coolSetpoint": {
                                "type": "number",
                                "description": "If mode allows, cool when `currentTemperature` rises above this point."
                            },
                            "holdType": {
                                "type": "string",
                                "description": "The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.",
                                "enum": [
                                    "PERMANENT",
                                    "SCHEDULED"
                                ]
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the HVAC device."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the HVAC action",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the HVAC device for changes in `targetTemperature`."
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The HVAC device has confirmed that the requested `targetTemperature` has been applied."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The HVAC device failed to respond to our attempts to set the `targetTemperature` within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another HVAC action was sent to the same device, canceling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "postSetChargerMaxCurrent",
            "url": "https://enode-api.p.rapidapi.com/chargers/<string>/max-current",
            "description": "Register a request for a change of the `maxCurrent` field on a charger. We retry sending the command until the charger's `maxCurrent` field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling [Charger Get Action](/api/reference#getChargersAction).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/<string>/max-current\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}/max-current\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the entity asset (Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetState": {
                        "type": "object",
                        "description": "Target maximum current for charger",
                        "required": [
                            "maxCurrent"
                        ],
                        "properties": {
                            "maxCurrent": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Desired max current in ampere",
                                "default": "<number>"
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the charger."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "postVehiclesVehicleidCharging",
            "url": "https://enode-api.p.rapidapi.com/vehicles/<string>/charging",
            "description": "Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle's `chargeStateIsCharging` field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).\n\n This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [External Start API](/api/reference#vehicleCreateExternalStart) to temporarily enable charging. \n\nA previous version of this endpoint sent a single command directly to the vehicle and returned a 204 on success. The newer version documented here requires a feature flag. Contact us if you would like access to the newer API.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/<string>/charging\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/charging\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of action",
                        "enum": [
                            "START",
                            "STOP"
                        ],
                        "default": "<string>"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "controlChargerCharging",
            "url": "https://enode-api.p.rapidapi.com/chargers/<string>/charging",
            "description": "Register a request for a charger to start or stop charging. We retry sending the command until the charger's `chargeStateIsCharging` field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).\n\n This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [External Start API](/api/reference#chargerCreateExternalStart) to temporarily enable charging. \n\nA previous version of this endpoint sent a single command directly to the charger and returned a 204 on success. The newer version documented here requires a feature flag. Contact us if you would like access to the newer API.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/<string>/charging\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}/charging\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling."
                            }
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ]
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of action",
                        "enum": [
                            "START",
                            "STOP"
                        ],
                        "default": "<string>"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable."
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the charge action.",
                        "anyOf": [
                            {
                                "type": "string",
                                "title": "PENDING",
                                "description": "The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`"
                            },
                            {
                                "type": "string",
                                "title": "CONFIRMED",
                                "description": "The chargeable has transitioned to the expected `chargeStateIsCharging` value."
                            },
                            {
                                "type": "string",
                                "title": "FAILED",
                                "description": "The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device."
                            },
                            {
                                "type": "string",
                                "title": "CANCELLED",
                                "description": "Another charge action was sent to the same device, cancelling this one."
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "postUsersUseridLink",
            "url": "https://enode-api.p.rapidapi.com/users/<string>/link",
            "description": "Creates an Enode Link session attached to the provided User ID. If this User does not exist, it will be created. The returned `linkState` gives the User short-lived (24hs) access to Enode Link. A URL for Enode Link for the user to initiate asset linking is also returned.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "userId",
                    "type": "STRING",
                    "description": "ID of the User",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/users/<string>/link\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/users/{userid}/link\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "linkState": {
                        "type": "string"
                    },
                    "linkUrl": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "vehicleCreateExternalStart",
            "url": "https://enode-api.p.rapidapi.com/vehicles/<string>/external-start",
            "description": "Forces a vehicle to start charging. Any active Schedules or Smart Charging plans will transition to an overridden state and will cease dispatching Vendor Actions to the vehicle. An External Start does not cancel a Smart Charging Plan - it only enables charging. This endpoint allows the user to enable charging immediately, without worrying about disabling Schedules or Smart Charging. The override remains active until the vehicle stops charging, or until the [Delete External Start](/api/reference#vehicleEndExternalStart) endpoint is called.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "vehicleId",
                    "type": "STRING",
                    "description": "ID of the Vehicle.",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/<string>/external-start\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/vehicles/{vehicleid}/external-start\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": [
                    "object",
                    "null"
                ],
                "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was created."
                    },
                    "endedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ],
                        "description": "The Vendor Type of the target entity this External Start is referencing."
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                            }
                        ]
                    },
                    "vendorActionId": {
                        "type": "string",
                        "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                    }
                }
            }
        },
        {
            "name": "createSchedule",
            "url": "https://enode-api.p.rapidapi.com/schedules",
            "description": " ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/schedules\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/schedules\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "chargerCreateExternalStart",
            "url": "https://enode-api.p.rapidapi.com/chargers/<string>/external-start",
            "description": "Forces a charger to start charging. Any active Schedules will transition to an overridden state and will cease dispatching Vendor Actions to the charger. This endpoint allows the user to enable charging immediately, without worrying about disabling active Schedules. The override remains active until the charger stops charging, or until the [Delete External Start](/api/reference#chargerEndExternalStart) endpoint is called.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "chargerId",
                    "type": "STRING",
                    "description": "ID of the Charger",
                    "default": "<string>"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/<string>/external-start\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://enode-api.p.rapidapi.com/chargers/{chargerid}/external-start\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"enode-api.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": [
                    "object",
                    "null"
                ],
                "description": "This field is only populated after calling the [vehicle](/api/reference#vehicleCreateExternalStart) or [charger](/api/reference#chargerCreateExternalStart) External Start APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The External Start override remains in place until the target stops charging for any reason, or until the External Start is ended via the Delete [vehicle](/api/reference#vehicleEndExternalStart) or [charger](/api/reference#chargerEndExternalStart) External Start APIs.",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was created."
                    },
                    "endedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "ISO8601 UTC timestamp at which the external start was ended. If null, the External Start override is still active."
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "vehicle",
                            "charger"
                        ],
                        "description": "The Vendor Type of the target entity this External Start is referencing."
                    },
                    "targetId": {
                        "allOf": [
                            {
                                "type": "string",
                                "minLength": 1
                            },
                            {
                                "type": "string",
                                "description": "ID of the asset (Vehicle or Charger) to which this External Start applies."
                            }
                        ]
                    },
                    "vendorActionId": {
                        "type": "string",
                        "description": "The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results."
                    }
                }
            }
        }
    ]
}