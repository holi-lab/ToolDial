{
    "product_id": "api_077e6445-4b35-4298-83ad-948d3c7f899a",
    "tool_description": "Carbon Emission Estimations for Organizations.",
    "home_url": "https://rapidapi.com/carbonsutra/api/carbonsutra1/",
    "name": "CarbonSutra",
    "title": "CarbonSutra",
    "pricing": "FREEMIUM",
    "tool_name": "CarbonSutra",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 483,
        "avgSuccessRate": 93,
        "popularityScore": 9.5,
        "__typename": "Score"
    },
    "host": "carbonsutra1.p.rapidapi.com",
    "api_list": [
        {
            "name": "Cluster Data",
            "url": "https://carbonsutra1.p.rapidapi.com/cluster_data",
            "description": "Emissions can be grouped into self-defined clusters and retrieved using those labels. This eliminates the need to store the results at developer's end. A key will need to be generated, which is then passed as a Bearer Token (within Authorization) in all calculations, so that the user can be identified and the results are securely delivered.\n\nUse the POST API of RegisterKey to obtain your API_KEY which will be used in all estimation calculations for which clustering is required. Your email address and a secret phrase (password) will be required to generate this key.\n\nThe POST API of RetrieveKey will give you the key again if it was misplaced, as long as the correct password is entered.\n\nNote that if clustering is not needed then you do not need API_KEY.\n\nThe GET API of ClusterData returns all the estimations that were calculated for a specific cluster_name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/cluster_data\"\nquerystring = {\"cluster_name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/cluster_data\"\nquerystring = {\"cluster_name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "Invalid API_KEY"
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                },
                                "cluster_name": {
                                    "type": "string"
                                },
                                "attributes": {
                                    "type": "object"
                                },
                                "estimated_at": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Distance between Airports",
            "url": "https://carbonsutra1.p.rapidapi.com/distance-between-airports",
            "description": "Returns the distance between two IATA airport codes in kilometers.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "iata_airport_to",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "iata_airport_from",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/distance-between-airports\"\nquerystring = {\"iata_airport_to\": \"\", \"iata_airport_from\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/distance-between-airports\"\nquerystring = {\"iata_airport_to\": \"\", \"iata_airport_from\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "Validation failed: ",
                "status": 422,
                "data": {
                    "iata_airport_to": [
                        "The iata airport to field is required."
                    ],
                    "iata_airport_from": [
                        "The iata airport from field is required."
                    ]
                }
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "airport_from": {
                                "type": "string"
                            },
                            "airport_to": {
                                "type": "string"
                            },
                            "distance": {
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Airports by Keyword",
            "url": "https://carbonsutra1.p.rapidapi.com/airports-by-keyword",
            "description": "Returns the lists of airport names and IATA code which matches the keyword.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "keyword",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/airports-by-keyword\"\nquerystring = {\"keyword\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/airports-by-keyword\"\nquerystring = {\"keyword\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "Validation failed: ",
                "status": 422,
                "data": {
                    "keyword": [
                        "The keyword field is required."
                    ]
                }
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "iata_code": {
                                    "type": "string"
                                },
                                "airport_name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Nearest Airport from Postal Code",
            "url": "https://carbonsutra1.p.rapidapi.com/nearest-airport",
            "description": "This is an advanced algorithm which takes a postal code and country code as input and returns the nearest airport its lat-long value. It is important to note that the straight line distance between the lat-long of postal code and airport is measured. The returned value is in kilometers. The source of 1.5 million postal code data is taken as it is from https://public.opendatasoft.com/explore/dataset/geonames-postal-code/. For airports, the publicly available database of IATA codes and airport names is used.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "postal_code",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "country_code",
                    "type": "STRING",
                    "description": "Two digit country code",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/nearest-airport\"\nquerystring = {\"postal_code\": \"\", \"country_code\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/nearest-airport\"\nquerystring = {\"postal_code\": \"\", \"country_code\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "Validation failed: ",
                "status": 422,
                "data": {
                    "postal_code": [
                        "The postal code field is required."
                    ],
                    "country_code": [
                        "The country code field is required."
                    ]
                }
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "airport_name": {
                                    "type": "string"
                                },
                                "iata_code": {
                                    "type": "string"
                                },
                                "postal_code": {
                                    "type": "string"
                                },
                                "address": {
                                    "type": "string"
                                },
                                "distance": {
                                    "type": "string"
                                },
                                "unit": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Vehicles Models",
            "url": "https://carbonsutra1.p.rapidapi.com/vehicle_makes/{vehicle_make}/vehicle_models",
            "description": "List of Vehicle Models for a Make. A list of every make and model used by this API is at https://www.carbonsutra.com/data-vehicle-make-model.html",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "vehicle_make",
                    "type": "string",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_makes/{vehicle_make}/vehicle_models\"\nquerystring = {\"vehicle_make\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_makes/{vehicle_make}/vehicle_models\"\nquerystring = {\"vehicle_make\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": {
                "message": "Vehicle Model not found.",
                "status": 404
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "model": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Vehicles Makes",
            "url": "https://carbonsutra1.p.rapidapi.com/vehicle_makes",
            "description": "List of Vehicle Makes. A list of every make and model used by this API is at https://www.carbonsutra.com/data-vehicle-make-model.html",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_makes\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_makes\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": {
                "data": [
                    {
                        "make": "Acura",
                        "number_of_models": 49
                    },
                    {
                        "make": "Alfa Romeo",
                        "number_of_models": 12
                    },
                    {
                        "make": "AM General",
                        "number_of_models": 4
                    },
                    {
                        "make": "American Motors Corporation",
                        "number_of_models": 4
                    },
                    {
                        "make": "ASC Incorporated",
                        "number_of_models": 1
                    },
                    {
                        "make": "Aston Martin",
                        "number_of_models": 38
                    },
                    {
                        "make": "Audi",
                        "number_of_models": 131
                    },
                    {
                        "make": "Aurora Cars Ltd",
                        "number_of_models": 1
                    },
                    {
                        "make": "Autokraft Limited",
                        "number_of_models": 2
                    },
                    {
                        "make": "Avanti Motor Corporation",
                        "number_of_models": 1
                    },
                    {
                        "make": "Azure Dynamics",
                        "number_of_models": 2
                    },
                    {
                        "make": "Bentley",
                        "number_of_models": 26
                    },
                    {
                        "make": "Bertone",
                        "number_of_models": 1
                    },
                    {
                        "make": "Bill Dovell Motor Car Company",
                        "number_of_models": 2
                    },
                    {
                        "make": "Bitter Gmbh and Co. Kg",
                        "number_of_models": 2
                    },
                    {
                        "make": "BMW",
                        "number_of_models": 378
                    },
                    {
                        "make": "BMW Alpina",
                        "number_of_models": 2
                    },
                    {
                        "make": "Bugatti",
                        "number_of_models": 5
                    },
                    {
                        "make": "Buick",
                        "number_of_models": 49
                    },
                    {
                        "make": "BYD",
                        "number_of_models": 1
                    },
                    {
                        "make": "Cadillac",
                        "number_of_models": 81
                    },
                    {
                        "make": "CCC Engineering",
                        "number_of_models": 1
                    },
                    {
                        "make": "Chevrolet",
                        "number_of_models": 265
                    },
                    {
                        "make": "Chrysler",
                        "number_of_models": 64
                    },
                    {
                        "make": "CODA Automotive",
                        "number_of_models": 1
                    },
                    {
                        "make": "Consulier Industries Inc",
                        "number_of_models": 1
                    },
                    {
                        "make": "CX Automotive",
                        "number_of_models": 7
                    },
                    {
                        "make": "Dabryan Coach Builders Inc",
                        "number_of_models": 1
                    },
                    {
                        "make": "Dacia",
                        "number_of_models": 3
                    },
                    {
                        "make": "Daewoo",
                        "number_of_models": 8
                    },
                    {
                        "make": "Daihatsu",
                        "number_of_models": 3
                    },
                    {
                        "make": "Dodge",
                        "number_of_models": 121
                    },
                    {
                        "make": "E. P. Dutton, Inc.",
                        "number_of_models": 1
                    },
                    {
                        "make": "Eagle",
                        "number_of_models": 10
                    },
                    {
                        "make": "Environmental Rsch and Devp Corp",
                        "number_of_models": 1
                    },
                    {
                        "make": "Evans Automobiles",
                        "number_of_models": 2
                    },
                    {
                        "make": "Excalibur Autos",
                        "number_of_models": 1
                    },
                    {
                        "make": "Federal Coach",
                        "number_of_models": 14
                    },
                    {
                        "make": "Ferrari",
                        "number_of_models": 71
                    },
                    {
                        "make": "Fiat",
                        "number_of_models": 9
                    },
                    {
                        "make": "Fisker",
                        "number_of_models": 1
                    },
                    {
                        "make": "Ford",
                        "number_of_models": 241
                    },
                    {
                        "make": "General Motors",
                        "number_of_models": 1
                    },
                    {
                        "make": "Genesis",
                        "number_of_models": 11
                    },
                    {
                        "make": "Geo",
                        "number_of_models": 15
                    },
                    {
                        "make": "GMC",
                        "number_of_models": 166
                    },
                    {
                        "make": "Goldacre",
                        "number_of_models": 1
                    },
                    {
                        "make": "Grumman Allied Industries",
                        "number_of_models": 1
                    },
                    {
                        "make": "Grumman Olson",
                        "number_of_models": 1
                    },
                    {
                        "make": "Honda",
                        "number_of_models": 66
                    },
                    {
                        "make": "Hummer",
                        "number_of_models": 2
                    },
                    {
                        "make": "Hyundai",
                        "number_of_models": 85
                    },
                    {
                        "make": "Import Foreign Auto Sales Inc",
                        "number_of_models": 1
                    },
                    {
                        "make": "Import Trade Services",
                        "number_of_models": 11
                    },
                    {
                        "make": "Infiniti",
                        "number_of_models": 86
                    },
                    {
                        "make": "Isis Imports Ltd",
                        "number_of_models": 1
                    },
                    {
                        "make": "Isuzu",
                        "number_of_models": 36
                    },
                    {
                        "make": "J.K. Motors",
                        "number_of_models": 21
                    },
                    {
                        "make": "Jaguar",
                        "number_of_models": 96
                    },
                    {
                        "make": "JBA Motorcars, Inc.",
                        "number_of_models": 1
                    },
                    {
                        "make": "Jeep",
                        "number_of_models": 72
                    },
                    {
                        "make": "Kandi",
                        "number_of_models": 1
                    },
                    {
                        "make": "Karma",
                        "number_of_models": 1
                    },
                    {
                        "make": "Kenyon Corporation Of America",
                        "number_of_models": 4
                    },
                    {
                        "make": "Kia",
                        "number_of_models": 60
                    },
                    {
                        "make": "Koenigsegg",
                        "number_of_models": 2
                    },
                    {
                        "make": "Laforza Automobile Inc",
                        "number_of_models": 1
                    },
                    {
                        "make": "Lambda Control Systems",
                        "number_of_models": 1
                    },
                    {
                        "make": "Lamborghini",
                        "number_of_models": 37
                    },
                    {
                        "make": "Land Rover",
                        "number_of_models": 40
                    },
                    {
                        "make": "Lexus",
                        "number_of_models": 96
                    },
                    {
                        "make": "Lincoln",
                        "number_of_models": 44
                    },
                    {
                        "make": "London Coach Co Inc",
                        "number_of_models": 1
                    },
                    {
                        "make": "London Taxi",
                        "number_of_models": 1
                    },
                    {
                        "make": "Lotus",
                        "number_of_models": 9
                    },
                    {
                        "make": "Lucid",
                        "number_of_models": 6
                    },
                    {
                        "make": "Mahindra",
                        "number_of_models": 1
                    },
                    {
                        "make": "Maserati",
                        "number_of_models": 52
                    },
                    {
                        "make": "Maybach",
                        "number_of_models": 6
                    },
                    {
                        "make": "Mazda",
                        "number_of_models": 82
                    },
                    {
                        "make": "Mcevoy Motors",
                        "number_of_models": 4
                    },
                    {
                        "make": "McLaren Automotive",
                        "number_of_models": 26
                    },
                    {
                        "make": "Mercedes-Benz",
                        "number_of_models": 383
                    },
                    {
                        "make": "Mercury",
                        "number_of_models": 51
                    },
                    {
                        "make": "Merkur",
                        "number_of_models": 2
                    },
                    {
                        "make": "MINI",
                        "number_of_models": 49
                    },
                    {
                        "make": "Mitsubishi",
                        "number_of_models": 56
                    },
                    {
                        "make": "Mobility Ventures LLC",
                        "number_of_models": 2
                    },
                    {
                        "make": "Morgan",
                        "number_of_models": 1
                    },
                    {
                        "make": "Nissan",
                        "number_of_models": 124
                    },
                    {
                        "make": "Oldsmobile",
                        "number_of_models": 35
                    },
                    {
                        "make": "Pagani",
                        "number_of_models": 3
                    },
                    {
                        "make": "Panos",
                        "number_of_models": 1
                    },
                    {
                        "make": "Panoz Auto-Development",
                        "number_of_models": 1
                    },
                    {
                        "make": "Panther Car Company Limited",
                        "number_of_models": 1
                    },
                    {
                        "make": "PAS Inc - GMC",
                        "number_of_models": 2
                    },
                    {
                        "make": "PAS, Inc",
                        "number_of_models": 2
                    },
                    {
                        "make": "Peugeot",
                        "number_of_models": 8
                    },
                    {
                        "make": "Pininfarina",
                        "number_of_models": 1
                    },
                    {
                        "make": "Plymouth",
                        "number_of_models": 23
                    },
                    {
                        "make": "Polestar",
                        "number_of_models": 5
                    },
                    {
                        "make": "Pontiac",
                        "number_of_models": 60
                    },
                    {
                        "make": "Porsche",
                        "number_of_models": 165
                    },
                    {
                        "make": "Quantum Technologies",
                        "number_of_models": 1
                    },
                    {
                        "make": "Qvale",
                        "number_of_models": 1
                    },
                    {
                        "make": "Ram",
                        "number_of_models": 9
                    },
                    {
                        "make": "Red Shift Ltd.",
                        "number_of_models": 1
                    },
                    {
                        "make": "Renault",
                        "number_of_models": 10
                    },
                    {
                        "make": "Rivian",
                        "number_of_models": 2
                    },
                    {
                        "make": "Rolls-Royce",
                        "number_of_models": 54
                    },
                    {
                        "make": "Roush Performance",
                        "number_of_models": 19
                    },
                    {
                        "make": "RUF Automobile",
                        "number_of_models": 3
                    },
                    {
                        "make": "Ruf Automobile Gmbh",
                        "number_of_models": 1
                    },
                    {
                        "make": "S and S Coach Company  E.p. Dutton",
                        "number_of_models": 1
                    },
                    {
                        "make": "Saab",
                        "number_of_models": 27
                    },
                    {
                        "make": "Saleen",
                        "number_of_models": 3
                    },
                    {
                        "make": "Saleen Performance",
                        "number_of_models": 3
                    },
                    {
                        "make": "Saturn",
                        "number_of_models": 23
                    },
                    {
                        "make": "Scion",
                        "number_of_models": 9
                    },
                    {
                        "make": "Shelby",
                        "number_of_models": 1
                    },
                    {
                        "make": "smart",
                        "number_of_models": 8
                    },
                    {
                        "make": "Spyker",
                        "number_of_models": 7
                    },
                    {
                        "make": "SRT",
                        "number_of_models": 1
                    },
                    {
                        "make": "Sterling",
                        "number_of_models": 2
                    },
                    {
                        "make": "STI",
                        "number_of_models": 1
                    },
                    {
                        "make": "Subaru",
                        "number_of_models": 73
                    },
                    {
                        "make": "Superior Coaches Div E.p. Dutton",
                        "number_of_models": 1
                    },
                    {
                        "make": "Suzuki",
                        "number_of_models": 77
                    },
                    {
                        "make": "Tecstar, LP",
                        "number_of_models": 6
                    },
                    {
                        "make": "Tesla",
                        "number_of_models": 65
                    },
                    {
                        "make": "Texas Coach Company",
                        "number_of_models": 4
                    },
                    {
                        "make": "Toyota",
                        "number_of_models": 137
                    },
                    {
                        "make": "TVR Engineering Ltd",
                        "number_of_models": 4
                    },
                    {
                        "make": "Vector",
                        "number_of_models": 2
                    },
                    {
                        "make": "Vixen Motor Company",
                        "number_of_models": 1
                    },
                    {
                        "make": "Volga Associated Automobile",
                        "number_of_models": 1
                    },
                    {
                        "make": "Volkswagen",
                        "number_of_models": 88
                    },
                    {
                        "make": "Volvo",
                        "number_of_models": 97
                    },
                    {
                        "make": "VPG",
                        "number_of_models": 2
                    },
                    {
                        "make": "Wallace Environmental",
                        "number_of_models": 18
                    },
                    {
                        "make": "Yugo",
                        "number_of_models": 4
                    }
                ],
                "success": true,
                "status": 200
            },
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "make": {
                                    "type": "string"
                                },
                                "number_of_models": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Vehicles Estimate by Type",
            "url": "https://carbonsutra1.p.rapidapi.com/vehicle_estimate_by_type",
            "description": "We calculate the footprint of a passenger vehicle based on its Type and Size, for a specific distance. For Scope 1, this should be used to report travel in vehicles that are owned or controlled by the reporting organization. If not owned/controlled by organization, the vehicle's emission is reported under Scope 3.\n\nWe use emission factors, data, guidelines from sources like UK Government HGH factors, US Department of Energy, US Environmental Protection Agency and UK Society of Motor Manufacturers and Traders.\n\nThe API to calculate the emission is simple: it just takes the category of vehicle based on its type or size, the type of fuel that is used and the distance travelled in either miles or kilometers.\n\nWTT (well-to-tank) emissions consist of all processes between the source of the fuel (the well) through the extraction, processing (refining), storage and delivery phases up until the point of use (the tank) in the vehicle. Using the \"include_wtt\" field will add the associated upstream emission.\n\nThe following fields are ingested for emission calculation API of vehicles:\n\nVEHICLE TYPE\nMandatory. The acceptable values are the following: Car-Type-Mini,Car-Type-Supermini,Car-Type-LowerMedium,Car-Type-UpperMedium,Car-Type-Executive,Car-Type-Luxury,Car-Type-Sports,Car-Type-4x4,Car-Type-MPV,Car-Size-Small,Car-Size-Medium,Car-Size-Large,Car-Size-Average,Motorbike-Size-Small,Motorbike-Size-Medium,Motorbike-Size-Large,Motorbike-Size-Average,Bus-LocalAverage,Bus-Coach,Taxi-Local,Train-National,Train-Local and Train-Tram.\n\nFUEL TYPE\nMandatory. There are 3 possible values here: Diesel, Petrol and Unknown. If in doubt, select the Unknown value, which is also the default.\n\nDISTANCE VALUE\nMandatory. The distance travelled by vehicle.\n\nDISTANCE UNIT\nMandatory. The acceptable values are \"km\" for kilometers and \"mi\" for miles. This will default to \"km\", if any other value is passed.\n\nINCLUDE WTT\nOptional. As explained above. The default value is \"Y\".\n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-vehicles-type.html\nIntroduction Video:  https://www.youtube.com/watch?v=xzsGNpgFdtY\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=4-p80WNCRzU",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "distance_value",
                    "type": "NUMBER",
                    "description": "The distance travelled by vehicle.  Default value is 1.",
                    "default": ""
                },
                {
                    "name": "distance_unit",
                    "type": "ENUM",
                    "description": "The acceptable values are \"km\" for kilometers and \"mi\" for miles. This will default to \"mi\", if any other value is passed.",
                    "default": ""
                },
                {
                    "name": "vehicle_type",
                    "type": "ENUM",
                    "description": "The type of vehicle for which emission is calculated. The acceptable values are: Car-Type-Mini,Car-Type-Supermini,Car-Type-LowerMedium,Car-Type-UpperMedium,Car-Type-Executive,Car-Type-Luxury,Car-Type-Sports,Car-Type-4x4,Car-Type-MPV,Car-Size-Small,Car-Size-Medium,Car-Size-Large,Car-Size-Average,Motorbike-Size-Small,Motorbike-Size-Medium,Motorbike-Size-Large,Motorbike-Size-Average,Bus-LocalAverage,Bus-Coach,Taxi-Local,Train-National,Train-Local and Train-Tram.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.",
                    "default": ""
                },
                {
                    "name": "fuel_type",
                    "type": "ENUM",
                    "description": "The type of fuel used in the vehicle. There are 3 possible values here: Diesel, Petrol and Unknown. If in doubt, select the Unknown value, which is also the default.",
                    "default": ""
                },
                {
                    "name": "include_wtt",
                    "type": "ENUM",
                    "description": "Include Well-To-Tank factor?",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_estimate_by_type\"\nquerystring = {\"cluster_name\": \"\", \"distance_value\": \"\", \"distance_unit\": \"\", \"fuel_type\": \"\", \"vehicle_type\": \"\", \"include_wtt\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_estimate_by_type\"\nquerystring = {\"cluster_name\": \"\", \"distance_value\": \"\", \"distance_unit\": \"\", \"fuel_type\": \"\", \"vehicle_type\": \"\", \"include_wtt\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "vehicle_type": {
                        "type": "string"
                    },
                    "fuel_type": {
                        "type": "string"
                    },
                    "distance_value": {
                        "type": "integer"
                    },
                    "distance_unit": {
                        "type": "string"
                    },
                    "include_wtt": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "number"
                    },
                    "co2e_mt": {
                        "type": "number"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "Fuel Consumption Estimate",
            "url": "https://carbonsutra1.p.rapidapi.com/fuel_estimate",
            "description": "This computes the emissions from stationary combustion fuels which are burnt in a fixed unit or asset owned or controlled by the reporting organization, and usually reported as a Scope 1 direct emission [1]. The source of data and methodology of emission factor calculation are from UK government's GHG conversion factors for company reporting and Ministry of Business, Innovation and Employment (MBIE)'s data of 2022 from New Zealand. All emissions are expressed as kg of CO2 equivalent per unit [2].\n\nThe following fields are ingested:\n\nFUEL USAGE\nMandatory. The usage of the fuel can be entered as either \"commercial\", \"industrial\", \"transport\" or \"residential\". If left blank, it will default to \"commercial\". Note that \"commercial\" is to be used for fuels used at sites or properties where commercial activities take place. \"industrial\" is used when combustion takes place at sites where industrial processes occur or within engines that support industrial activities. \"residential\" can be applied for fuel used primarily at residential properties. \"transport\" in this category is for the fuel used in an engine to move a vehicle.\n\nFUEL NAME\nMandatory. A blank value will result in an error. Described here are the fuel types (written within quotes) are to be used. They are divided into categories for ease of understanding:\n\n- Petrol: Two types of petrol can be used under the fuel_usage category of transport. They are \"Premium Petrol\" and \"Regular Petrol\".\n- Coal: Four ranks of coal can be used under any of the fuel_usage categories of commercial, industrial or residential. The values are: \"Coal - Default\", \"Coal - Bituminous\", \"Coal - Sub-Bituminous\" and \"Coal - Lignite\".\n- Diesel: Use \"Diesel\" under any of the fuel_usage categories of commercial, industrial or transport.\n- LPG: Use \"LPG\" under any of the fuel_usage categories of commercial, industrial or transport.\n- Fuel Oils: Two types of fuel oils can be used under the fuel_usage categories of commercial, industrial or transport. They are \"Heavy Fuel Oil\" and \"Light Fuel Oil\".\n- Natural Gas: Use \"Natural Gas\" under fuel_usage categories of commercial or industrial.\n- Aviation Fuels: Use \"Aviation fuel - Kerosene\" or \"Aviation gas\" under fuel_usage value of transport.\n\nFUEL VALUE\nMandatory. A blank value will result in an error. The unit of fuel_value is fixed for the categories of fuel as per the following rules:\n\n- Petrol: \"litre\"\n- Coal: \"kg\"\n- Diesel: \"litre\"\n- LPG: \"kg\"\n- Fuel Oils: \"litre\"\n- Natural Gas: \"kWh\"\n- Aviation Fuels: \"litre\"\n\n[1] These could be reported as Scope 3 indirect emissions if the organization does not own or control the asset (eg, a boiler) where the combustion takes place.\n\n[2] It should be noted that the footprint calculated here does not use the full fuel-cycle emission factors and hence do not incorporate the indirect (Scope 3) emissions associated with the extraction, production and transport of the fuel.\n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-fuel.html\nIntroduction Video: https://www.youtube.com/watch?v=wmDD3t2TIa8\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=PKylECqNDDs",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "fuel_value",
                    "type": "NUMBER",
                    "description": "The amount of fuel that is consumed in a number. Note that the unit of fuel_value is fixed for the categories of fuel as per the following rules:\n- Petrol: **litre**\n- Coal: **kg** \n- Diesel: **litre**\n- LPG: **kg**\n- Fuel Oils: **litre**\n- Natural Gas:  **kWh**\n- Aviation Fuels: **litre**",
                    "default": ""
                },
                {
                    "name": "fuel_name",
                    "type": "STRING",
                    "description": "Described here are the fuel types (in **bold**) to be used. They are divided into categories for ease of understanding:\n- Petrol: Two types of petrol can be used under the fuel_usage category of transport. They are **Premium Petrol** and **Regular Petrol**. \n- Coal: Four ranks of coal can be used under any of the fuel_usage categories of commercial, industrial or residential. The values are: **Coal - Default**, **Coal - Bituminous**, **Coal - Sub-Bituminous** and **Coal - Lignite**. \n- Diesel: Use **Diesel** under any of the fuel_usage categories of commercial, industrial or transport.  \n- LPG: Use **LPG** under any of the fuel_usage categories of commercial, industrial or transport.  \n- Fuel Oils: Two types of fuel oils can be used under the fuel_usage categories of commercial, industrial or transport. They are **Heavy Fuel Oil** and **Light Fuel Oil**. \n- Natural Gas: Use **Natural Gas** under fuel_usage categories of commercial or industrial.  \n- Aviation Fuels: Use **Aviation fuel - Kerosene** or **Aviation gas** under fuel_usage value of transport.  ",
                    "default": ""
                },
                {
                    "name": "fuel_usage",
                    "type": "ENUM",
                    "description": "The usage of the fuel can be entered as either commercial, industrial, transport or residential. If left blank, it will default to commercial.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.  ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/fuel_estimate\"\nquerystring = {\"fuel_value\": \"\", \"fuel_name\": \"\", \"cluster_name\": \"\", \"fuel_usage\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/fuel_estimate\"\nquerystring = {\"fuel_value\": \"\", \"fuel_name\": \"\", \"cluster_name\": \"\", \"fuel_usage\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "fuel_usage": {
                        "type": "string"
                    },
                    "fuel_name": {
                        "type": "string"
                    },
                    "fuel_unit": {
                        "type": "string"
                    },
                    "fuel_value": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "number"
                    },
                    "co2e_mt": {
                        "type": "number"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "Electricity Usage Estimate",
            "url": "https://carbonsutra1.p.rapidapi.com/electricity_estimate",
            "description": "This computes the emissions from electricity used by an organization at sites which are either owned or controlled by it, and reported as a Scope 2 Indirect emission. Data from 90+ countries between 2020-22 from multiple sources has been compiled. The footprints of electricity usage can be entered in kWh or MWh.\n\nThe following fields are ingested:\n\nCOUNTRY NAME\nMandatory. The name of the country for which the emission is being measured. Including EU-27, we have compiled a database of 90 countries. To help you to pick the right name, we are listing the countries below in the footnote. [1]\n\nELECTRICITY VALUE\nOptional. This will default to 1 unit, if left blank. It is the number of units of electricity consumed.\n\nELECTRICITY UNIT\nOptional. The acceptable values are kWh and MWh. This will default to MWh, if left blank or if any other value is passed. \n\n---\n[1]: Countries used in this API: Australia, Austria, Bangladesh, Belgium, Bhutan, Brunei, Bulgaria, Cambodia, Canada, China, Croatia, Cyprus, Czechia, Denmark, Estonia, EU-27, Finland, France, Germany, Greece, Hong Kong, Hungary, Iceland, India, Indonesia, Ireland, Italy, Japan, Laos, Latvia, Lithuania, Luxembourg, Macao, Malaysia, Maldives, Malta, Mongolia, Myanmar, Nepal, Netherlands, New Zealand, North Korea, Norway, Pakistan, Papua New Guinea, Philippines, Poland, Portugal, Romania, Singapore, Slovakia, Slovenia, South Korea, Spain, Sri Lanka, Sweden, Taiwan, Thailand, Turkey, UK, USA, Vietnam\n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-electricity.html\nIntroduction Video: https://www.youtube.com/watch?v=26ybk4M-1Nw\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=3lJrjZUqYtM",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "electricity_unit",
                    "type": "ENUM",
                    "description": "The acceptable values are kWh and MWh. It will default to MWh, if left blank or if any other value is passed.",
                    "default": ""
                },
                {
                    "name": "country_name",
                    "type": "STRING",
                    "description": "The name of the country for which the emission is being measured. The following are acceptable values: Australia, Austria, Bangladesh, Belgium, Bhutan, Brunei, Bulgaria, Cambodia, Canada, China, Croatia, Cyprus, Czechia, Denmark, Estonia, EU-27, Finland, France, Germany, Greece, Hong Kong, Hungary, Iceland, India, Indonesia, Ireland, Italy, Japan, Laos, Latvia, Lithuania, Luxembourg, Macao, Malaysia, Maldives, Malta, Mongolia, Myanmar, Nepal, Netherlands, New Zealand, North Korea, Norway, Pakistan, Papua New Guinea, Philippines, Poland, Portugal, Qatar, Romania, Singapore, Slovakia, Slovenia, South Korea, Spain, Sri Lanka, Sweden, Taiwan, Thailand, Turkey, UK, USA and Vietnam.",
                    "default": ""
                },
                {
                    "name": "electricity_value",
                    "type": "NUMBER",
                    "description": "The number of units of electricity consumed.  This will default to 1 unit, if left blank. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.  ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/electricity_estimate\"\nquerystring = {\"electricity_unit\": \"\", \"country_name\": \"\", \"electricity_value\": \"\", \"cluster_name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/electricity_estimate\"\nquerystring = {\"electricity_unit\": \"\", \"country_name\": \"\", \"electricity_value\": \"\", \"cluster_name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "electricity_unit": {
                        "type": "string"
                    },
                    "electricity_value": {
                        "type": "integer"
                    },
                    "country_name": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "integer"
                    },
                    "co2e_mt": {
                        "type": "number"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "Freight Shipping Estimate",
            "url": "https://carbonsutra1.p.rapidapi.com/freight_estimate",
            "description": "The freight/shipping emission estimations are for Road, Rail, Air and Sea (categorized into Short Sea and Deep Sea). Recommended average emission factors and guidelines have been used as proposed by member companies of ECTA (European Chemical Transport Association) and Cefic which are aligned with CN's recommendations.  Two additional calculations for Intermodal shipping are available: 1) Road with Rail and 2) Road with Short Sea. In both cases, the road distance is assumed to be 10% of the entire journey. \u200b\n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-freight-shipping.html\nIntroduction Video: https://www.youtube.com/watch?v=hsZwezuvHMQ\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=6Q8KKC33UFk",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "distance_value",
                    "type": "NUMBER",
                    "description": "Journey distance in Kilometers (KM)",
                    "default": ""
                },
                {
                    "name": "freight_weight",
                    "type": "NUMBER",
                    "description": "Weight in Kilograms (KG)",
                    "default": ""
                },
                {
                    "name": "transport_mode",
                    "type": "ENUM",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.  ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/freight_estimate\"\nquerystring = {\"distance_value\": \"\", \"cluster_name\": \"\", \"freight_weight\": \"\", \"transport_mode\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/freight_estimate\"\nquerystring = {\"distance_value\": \"\", \"cluster_name\": \"\", \"freight_weight\": \"\", \"transport_mode\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "distance_value": {
                        "type": "string"
                    },
                    "transport_mode": {
                        "type": "string"
                    },
                    "freight_weight": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "integer"
                    },
                    "co2e_mt": {
                        "type": "number"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "eCommerce Shipment Estimate",
            "url": "https://carbonsutra1.p.rapidapi.com/ecommerce_estimate",
            "description": "This is an advanced algorithm to estimate the emissions of a package's journey from its shipment location to the collection point. If the distance between two postal codes is above a threshold, we find the nearest airports from the origin and then from the destination location. The final distance of journey is then a sum of the distance between the origin postal code and nearest airport by land, air travel between the airports closest to the origin and the destination and finally, land travel between destination airport and postal code of collection point by land. The final calculation follows ECTA/Cefic and BEIS/DEFRA's recommended conversion factors and works on a database of over 1.5 million postal codes across 95 countries and 9,200 global airports.\n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-freight-ecommerce-shipments.html\nIntroduction Video: https://www.youtube.com/watch?v=jPaM0kV0A-0\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=nq9Im6xNwa4\n\nThe following country codes are covered in the current version of API: AD (Andorra), AR (Argentina), AS (American Samoa), AT (Austria), AU (Australia), AX (\u00c5land Islands), AZ (Azerbaijan), BD (Bangladesh), BE (Belgium), BG (Bulgaria), BM (Bermuda), BR (Brazil), BY (Belarus), CA (Canada), CH (Switzerland), CL (Chile), CO (Colombia), CR (Costa Rica), CY (Cyprus), CZ (Czechia), DE (Germany), DK (Denmark), DO (Dominican Republic (the)), DZ (Algeria), EE (Estonia), ES (Spain), FI (Finland), FM (Micronesia (Federated States of)), FO (Faroe Islands (the)), FR (France), GB (United Kingdom of Great Britain and Northern Ireland (the)), GF (French Guiana), GG (Guernsey), GL (Greenland), GP (Guadeloupe), GT (Guatemala), GU (Guam), HR (Croatia), HT (Haiti), HU (Hungary), IE (Ireland), IM (Isle of Man), IN (India), IS (Iceland), IT (Italy), JE (Jersey), JP (Japan), KR (Korea (the Republic of)), LI (Liechtenstein), LK (Sri Lanka), LT (Lithuania), LU (Luxembourg), LV (Latvia), MC (Monaco), MD (Moldova (the Republic of)), MH (Marshall Islands (the)), MK (Republic of North Macedonia), MP (Northern Mariana Islands (the)), MQ (Martinique), MT (Malta), MW (Malawi), MX (Mexico), MY (Malaysia), NC (New Caledonia), NL (Netherlands (the)), NO (Norway), NZ (New Zealand), PE (Peru), PH (Philippines (the)), PK (Pakistan), PL (Poland), PM (Saint Pierre and Miquelon), PR (Puerto Rico), PT (Portugal), PW (Palau), RE (R\u00e9union), RO (Romania), RS (Serbia), RU (Russian Federation (the)), SE (Sweden), SG (Singapore), SI (Slovenia), SJ (Svalbard and Jan Mayen), SK (Slovakia), SM (San Marino), TH (Thailand), TR (Turkey), UA (Ukraine), US (United States of America (the)), UY (Uruguay), VA (Holy See (the)), VI (Virgin Islands (U.S.)), WF (Wallis and Futuna), YT (Mayotte) and ZA (South Africa).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "origin_country_code",
                    "type": "STRING",
                    "description": "Two letter code of the country from where the package is starting the journey.",
                    "default": ""
                },
                {
                    "name": "destination_postal_code",
                    "type": "STRING",
                    "description": "The postal code in the destination country to where the package is collected.",
                    "default": ""
                },
                {
                    "name": "origin_postal_code",
                    "type": "STRING",
                    "description": "The postal code in the origin country from where the package is being shipped.",
                    "default": ""
                },
                {
                    "name": "destination_country_code",
                    "type": "STRING",
                    "description": "Two letter code of the country of package's destination.",
                    "default": ""
                },
                {
                    "name": "package_weight",
                    "type": "NUMBER",
                    "description": "The weight of package in kilograms (KG). If an undefined value is passed, it will be set to 1.00",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.  ",
                    "default": ""
                },
                {
                    "name": "include_wtt",
                    "type": "ENUM",
                    "description": "A \"Y\" would include the Well-to-Tank (WTT) factors to the footprint calculation, while a \"N\" will bypass it. The default value is \"N\".",
                    "default": ""
                },
                {
                    "name": "add_rf",
                    "type": "ENUM",
                    "description": "A \"Y\" would add radiative forcing multiplier factor in the footprint calculation, while a \"N\" will bypass it. The default value is \"N\". This is used only if the algorithm considers air travel in its calculation.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/ecommerce_estimate\"\nquerystring = {\"origin_country_code\": \"\", \"destination_postal_code\": \"\", \"origin_postal_code\": \"\", \"destination_country_code\": \"\", \"package_weight\": \"\", \"cluster_name\": \"\", \"include_wtt\": \"\", \"add_rf\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/ecommerce_estimate\"\nquerystring = {\"origin_country_code\": \"\", \"destination_postal_code\": \"\", \"origin_postal_code\": \"\", \"destination_country_code\": \"\", \"package_weight\": \"\", \"cluster_name\": \"\", \"include_wtt\": \"\", \"add_rf\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "origin_country_code": {
                        "type": "string"
                    },
                    "origin_postal_code": {
                        "type": "string"
                    },
                    "destination_country_code": {
                        "type": "string"
                    },
                    "destination_postal_code": {
                        "type": "string"
                    },
                    "package_weight": {
                        "type": "string"
                    },
                    "add_rf": {
                        "type": "string"
                    },
                    "include_wtt": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "number"
                    },
                    "co2e_mt": {
                        "type": "integer"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "Flights Travel Estimate",
            "url": "https://carbonsutra1.p.rapidapi.com/flight_estimate",
            "description": "This calculation is used for reporting Scope 3 emissions for individuals flying for work purposes. The footprint of a flight travel is calculated based on the distance between airports and the travelling class of the passenger. With the origin and destination as inputs and following the ICAO methodology and EPA emissions factors, we apply appropriate rules based on research by IPCC. \n\nOur algorithm calculates the distance between two airports, the IATA codes of which have been entered. The database has approx. 9,200 global airports and is regularly updated. Using the principles defined in ICAO methodology, the guidelines from UK BEIS (Department for Business, Energy and Industrial Strategy) and UK DEFRA (Department for Business, Energy and Industrial Strategy) are then applied to arrive at the footprint of that journey per-passenger in a particular class. \n\nAs the ICAO does not apply the radiative forcing (RF) multiplier (accounting for the wider climate effect of emissions arising from aircraft transport at altitude) or distance uplift factor to account for delays/circling and non-direct routes (i.e., not along the straight-line/great-circle between destinations), we have added an option for you to include it in the calculation. Use the \"add_rf\" field to include this factor. \n\nWTT (well-to-tank) emissions consist of all processes between the source of the fuel (the well) through the extraction, processing (refining), storage and delivery phases up until the point of use (the tank) in the plane before take-off. Using the \"include_wtt\" field will add the upstream emission associated with this flight in the estimation. \n\nThe following fields are ingested:\n\nIATA AIRPORT CODE (FROM)\nMandatory. This is the three-character alphanumeric geocode of the airport from which the flight is originating.  \n\nIATA AIRPORT CODE (TO)\nMandatory. The IATA code of flight's destination airport.\n\nFLIGHT CLASS\nOptional. The class in which the passenger is travelling. The values are Economy, Premium, Business and First. If the entered value is blank or different from these four, an \"Average\" factor will be considered. \n\nROUND TRIP\nOptional. A \"Y\" would mean the passenger is travelling back to the origin from destination, in the same class. A \"N\" would consider it as a single-way trip. Any other value other than \"N\" will default to this input being considered as a \"Y\". \n\nADD RF\nOptional. A \"Y\" would add radiative forcing multiplier factor in the footprint calculation, while a \"N\" will bypass it. Any other value other than \"N\" will default to this input being considered as a \"Y\". \n\nINCLUDE WTT\nOptional. A \"Y\" would include the Well-to-Tank (WTT) factors to the footprint calculation, while a \"N\" will bypass it. Any other value other than \"N\" will default to this input being considered as a \"Y\". \n\nNUMBER OF PASSENGERS\nOptional. Default to 1, if a blank or an invalid value is entered. \n\nNote: If there are two passengers in the same flight, but sitting in different classes then two separate API calls are suggested, one for each passenger.\n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-flights-travel.html\nIntroduction Video: https://www.youtube.com/watch?v=1G4AEtpaQCU\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=fpnuML11zTk",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "iata_airport_to",
                    "type": "STRING",
                    "description": "This is the three-character alphanumeric geocode of the flight's destination airport.",
                    "default": ""
                },
                {
                    "name": "number_of_passengers",
                    "type": "NUMBER",
                    "description": "Default to 1, if a blank or an invalid value is entered. ",
                    "default": ""
                },
                {
                    "name": "iata_airport_from",
                    "type": "STRING",
                    "description": "This is the three-character alphanumeric geocode of the airport from which the flight is originating.  ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.  ",
                    "default": ""
                },
                {
                    "name": "flight_class",
                    "type": "ENUM",
                    "description": "The class in which the passenger is travelling. The values are Economy, Premium, Business and First. If the entered value is blank or different from these four, an \"Average\" factor will be automatically considered.",
                    "default": ""
                },
                {
                    "name": "include_wtt",
                    "type": "ENUM",
                    "description": "A \"Y\" would add the Well-to-Tank (WTT) factors to the footprint calculation, while a \"N\" will bypass it. Any other value other than \"N\" will default to this input being considered as a \"Y\". ",
                    "default": ""
                },
                {
                    "name": "round_trip",
                    "type": "ENUM",
                    "description": "A \"Y\" would mean the passenger is travelling back to the origin from destination, in the same class. A \"N\" would consider it as a single-way trip. Any other value other than \"N\" will default to this input being considered as a \"Y\". ",
                    "default": ""
                },
                {
                    "name": "add_rf",
                    "type": "ENUM",
                    "description": "A \"Y\" would include radiative forcing multiplier factor in the footprint calculation, while a \"N\" will bypass it. Any other value other than \"N\" will default to this input being considered as a \"Y\". ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/flight_estimate\"\nquerystring = {\"iata_airport_to\": \"\", \"number_of_passengers\": \"\", \"iata_airport_from\": \"\", \"cluster_name\": \"\", \"flight_class\": \"\", \"include_wtt\": \"\", \"round_trip\": \"\", \"add_rf\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/flight_estimate\"\nquerystring = {\"iata_airport_to\": \"\", \"number_of_passengers\": \"\", \"iata_airport_from\": \"\", \"cluster_name\": \"\", \"flight_class\": \"\", \"include_wtt\": \"\", \"round_trip\": \"\", \"add_rf\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "iata_airport_from": {
                        "type": "string"
                    },
                    "airport_from": {
                        "type": "string"
                    },
                    "iata_airport_to": {
                        "type": "string"
                    },
                    "airport_to": {
                        "type": "string"
                    },
                    "flight_class": {
                        "type": "string"
                    },
                    "round_trip": {
                        "type": "string"
                    },
                    "add_rf": {
                        "type": "string"
                    },
                    "include_wtt": {
                        "type": "string"
                    },
                    "number_of_passengers": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "number"
                    },
                    "co2e_mt": {
                        "type": "number"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "Retrieve Key",
            "url": "https://carbonsutra1.p.rapidapi.com/retrieve_key",
            "description": "This retrieves an already registered key.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "password",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "email",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/retrieve_key\"\nquerystring = {\"password\": \"\", \"email\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/retrieve_key\"\nquerystring = {\"password\": \"\", \"email\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "CarbonSutra_API_KEY": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "Register Key",
            "url": "https://carbonsutra1.p.rapidapi.com/register_key",
            "description": "Registration will enable you to cluster the emissions using self-defined labels. Register with your email address and a password to get a unique key, which can be used as Bearer Token in emission calculations along with cluster-name.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "password",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "email",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "company_name",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/register_key\"\nquerystring = {\"password\": \"\", \"company_name\": \"\", \"email\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/register_key\"\nquerystring = {\"password\": \"\", \"company_name\": \"\", \"email\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "email": {
                                "type": "string"
                            },
                            "CarbonSutra_API_KEY": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "Vehicles Estimate by Model",
            "url": "https://carbonsutra1.p.rapidapi.com/vehicle_estimate_by_model",
            "description": "We calculate the footprint of a passenger vehicle based on its make and model, for a specific distance. For Scope 1, this should be used to report travel in vehicles that are owned or controlled by the reporting organization. If not owned/controlled by organization, the vehicle's emission is reported under Scope 3. \n\nWe use emission factors, data, guidelines from sources like US Department of Energy, US Environmental Protection Agency and UK Society of Motor Manufacturers and Traders. To simplify the usage we have made two minor modifications in our algorithm: First, for dual fuel vehicles, the average of emissions from its conventional and alternative fuels is used. Second, if a model is released across multiple years by the same maker, then the emissions for that model are averaged.\n\nThe API to calculate the emission is simple: it just takes the Make and Model of a vehicle along with the distance travelled to calculate the emission. But since our database contains over 140 Makes which cover 4,500 models of vehicles, we are providing two more APIs to get these values.\n\nFirst, use the two GET APIs to get a list of Makes and then the specific Model from the selected Make.\n\nThe following fields are ingested for emission calculation API of vehicles:\n\nVEHICLE MAKE\nMandatory. Name of Vehicle Make (eg, Lexus)\n\nVEHICLE MODEL\nMandatory. Name of Vehicle Model for the selected Make (eg, RX 300)\n\nDISTANCE VALUE\nMandatory. The distance travelled by vehicle.\n\nDISTANCE UNIT\nMandatory. The acceptable values are \"km\" for kilometers and \"mi\" for miles. This will default to \"mi\", if any other value is passed.\n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-vehicles-model.html\nIntroduction Video: https://www.youtube.com/watch?v=yJqe1mSq1nc\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=stwBfk0sID8\n\nA list of every make and model used by this API is at https://www.carbonsutra.com/data-vehicle-make-model.html",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "vehicle_model",
                    "type": "STRING",
                    "description": "Vehicle Model name for the selected Make. Use the Vehicle Model API to get the list.",
                    "default": ""
                },
                {
                    "name": "distance_value",
                    "type": "NUMBER",
                    "description": "The distance travelled by vehicle.  Default value is 1.",
                    "default": ""
                },
                {
                    "name": "distance_unit",
                    "type": "ENUM",
                    "description": "The acceptable values are \"km\" for kilometers and \"mi\" for miles. This will default to \"mi\", if any other value is passed.",
                    "default": ""
                },
                {
                    "name": "vehicle_make",
                    "type": "STRING",
                    "description": "Vehicle Make Name. Use the Vehicle Make API to get the list of all names. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.  ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_estimate_by_model\"\nquerystring = {\"vehicle_model\": \"\", \"distance_value\": \"\", \"distance_unit\": \"\", \"cluster_name\": \"\", \"vehicle_make\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/vehicle_estimate_by_model\"\nquerystring = {\"vehicle_model\": \"\", \"distance_value\": \"\", \"distance_unit\": \"\", \"cluster_name\": \"\", \"vehicle_make\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "distance_unit": {
                        "type": "string"
                    },
                    "distance_value": {
                        "type": "string"
                    },
                    "vehicle_make": {
                        "type": "string"
                    },
                    "vehicle_model": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "number"
                    },
                    "co2e_mt": {
                        "type": "number"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "Hotel Stay Estimate",
            "url": "https://carbonsutra1.p.rapidapi.com/hotel_estimate",
            "description": "CarbonSutra's approach for calculating the carbon footprint of hotel stays is based on Cornell Hotel Sustainability Benchmark Index and UK government's GHG conversion factors published in 2022. Based on country and optionally entered city or region in that country along with rating of the hotel, the emission factor is calculated. Over 300 cities and regions across 38 countries are covered. The final emission is calculated based on number of rooms taken in the hotel and the length of the stay.\n\nThe following fields are ingested:\n\nCOUNTRY CODE\nMandatory. This is a ISO 3166-1 alpha-2 code, pointing to its ISO 3166-2 article. While the list of codes is available at [Wikipedia's ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), we are listing the 38 countries and their 2 character codes below in the footnote. [1]\n\nCITY NAME\nOptional. Enter the city within the country where the hotel is based. The algorithm will search the database for the name and if it is not found, it will search for any emission factors associated with the region in which the city is located. \n\nHOTEL RATING\nOptional. The star rating of the hotel. Enter the value of \"2\" for a 2-star hotel. Similarly, \"3\", \"4\" and \"5\" will match the corresponding rating of the hotel. If this is not known then leave it as blank. \n\nNUMBER OF NIGHTS\nOptional. This is the length of the stay in the hotel. The default value is 1. \n\nNUMBER OF ROOMS\nOptional. The number of rooms taken in the hotel. The default value is 1. Note that the number of travelers staying in the same room do not matter. \n\nProduct Page: https://www.carbonsutra.com/api-carbon-emission-hotel-stay.html\nIntroduction Video: https://www.youtube.com/watch?v=2isL9LwL7r0\n\nThe spreadsheet (Google Sheets) function is explained at https://www.youtube.com/watch?v=mP3Ha3NVO54\n\n---\n[1]: Countries and ISO codes used in this API: Australia (au), Belgium (be), Brazil (br), Canada (ca), Chile (cl), China (cn), Colombia (co), Costa Rica (cr), Egypt (eg), France (fr), Germany (de), Hong Kong (hk), India (in), Indonesia (id), Italy (it), Japan (jp), Jordan (jo), Korea (kr), Malaysia (my), Maldives (mv), Mexico (mx), Netherlands (nl), Oman (om), Philippines (ph),Portugal (pt),Qatar (qa), Russian Federation (ru), Saudi Arabia (sa), Singapore (sg), South Africa (za), Spain (es), Switzerland (ch), Thailand (th), Turkey (tr), United Arab Emirates (ae), United Kingdom (gb), United States of America (us), Vietnam (vn).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "number_of_nights",
                    "type": "NUMBER",
                    "description": "This is the length of the stay in this hotel. The default value is 1. ",
                    "default": ""
                },
                {
                    "name": "country_code",
                    "type": "ENUM",
                    "description": "This is a ISO 3166-1 alpha-2 code, pointing to its ISO 3166-2 article. The list of codes is available at Wikipedia's ISO 3166-1 alpha-2 page at https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2",
                    "default": ""
                },
                {
                    "name": "number_of_rooms",
                    "type": "NUMBER",
                    "description": "The number of rooms taken in the hotel. The default value is 1. Note that the number of travelers staying in the same room do not matter. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "hotel_rating",
                    "type": "ENUM",
                    "description": "The star rating of the hotel. Enter the value of \"2\" for a 2-star hotel. Similarly, \"3\", \"4\" and \"5\" will match the corresponding rating of the hotel. If this is not known then leave it as blank. ",
                    "default": ""
                },
                {
                    "name": "city_name",
                    "type": "STRING",
                    "description": "Enter the city within the country where the hotel is based. The algorithm will search the database for the name and if it is not found, it will search for any emission factors associated with the region in which the entered city is located. ",
                    "default": ""
                },
                {
                    "name": "cluster_name",
                    "type": "STRING",
                    "description": "This is an optional text field use to group the estimates into clusters which can retrieve later. It is important that the CarbonSutra API_KEY is passed as a Bearer Token, which links the cluster to you.  ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/hotel_estimate\"\nquerystring = {\"number_of_nights\": \"\", \"hotel_rating\": \"\", \"city_name\": \"\", \"country_code\": \"\", \"number_of_rooms\": \"\", \"cluster_name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://carbonsutra1.p.rapidapi.com/hotel_estimate\"\nquerystring = {\"number_of_nights\": \"\", \"hotel_rating\": \"\", \"city_name\": \"\", \"country_code\": \"\", \"number_of_rooms\": \"\", \"cluster_name\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"carbonsutra1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "city_name": {
                        "type": "string"
                    },
                    "hotel_rating": {
                        "type": "string"
                    },
                    "number_of_nights": {
                        "type": "string"
                    },
                    "number_of_rooms": {
                        "type": "string"
                    },
                    "co2e_gm": {
                        "type": "integer"
                    },
                    "co2e_kg": {
                        "type": "number"
                    },
                    "co2e_mt": {
                        "type": "number"
                    },
                    "co2e_lb": {
                        "type": "number"
                    }
                }
            }
        }
    ],
    "standardized_name": "carbonsutra"
}