{
    "tool_name": "Barcode",
    "tool_description": "Encode barcode numbers to generate images or decode images to barcode numbers. Multiple different barcode formats supported.",
    "title": "Barcode",
    "pricing": "FREEMIUM",
    "score": null,
    "home_url": "https://rapidapi.com/orthosie/api/barcode4/",
    "host": "barcode4.p.rapidapi.com",
    "api_list": [
        {
            "name": "/barcode/decode",
            "url": "https://barcode4.p.rapidapi.com/barcode/decode",
            "description": "Decode a Barcode image and return the cotents if successful",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "barimage",
                    "type": "STRING",
                    "description": "Barcode image to decode and get the content value",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://barcode4.p.rapidapi.com/barcode/decode\"\nquerystring = {\"barimage\": barimage}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"barcode4.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "/barcode/encode",
            "url": "https://barcode4.p.rapidapi.com/barcode/encode",
            "description": "Get a Bar Code image for the given barcode number",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "number",
                    "type": "STRING",
                    "description": "Barcode number",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "totalheight",
                    "type": "NUMBER",
                    "description": "Total height of the image",
                    "default": ""
                },
                {
                    "name": "barcodeformat",
                    "type": "STRING",
                    "description": "Barcode format default C39. Valid values are the keys to those returned from /barcode/encode/types.",
                    "default": ""
                },
                {
                    "name": "widthfactor",
                    "type": "NUMBER",
                    "description": "Width factor of the image",
                    "default": ""
                },
                {
                    "name": "outputformat",
                    "type": "STRING",
                    "description": "Output image format. Must be one of png/html/jpg/svg",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://barcode4.p.rapidapi.com/barcode/encode\"\nquerystring = {\"number\": number}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"barcode4.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "/barcode/decode/types",
            "url": "https://barcode4.p.rapidapi.com/barcode/decode/types",
            "description": "Get the supported barcode types for the decoding process.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://barcode4.p.rapidapi.com/barcode/decode/types\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"barcode4.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "/barcode/encode/types",
            "url": "https://barcode4.p.rapidapi.com/barcode/encode/types",
            "description": "Get the supported barcode types for encoding / image generation.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://barcode4.p.rapidapi.com/barcode/encode/types\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"barcode4.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 200,
            "body": {},
            "headers": {},
            "schema": {}
        },
        {
            "name": "/barcode/decode",
            "url": "https://barcode4.p.rapidapi.com/barcode/decode",
            "description": "Decode a Barcode image and return the cotents if successful",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "barimage",
                    "type": "STRING",
                    "description": "Barcode image to decode and get the content value",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://barcode4.p.rapidapi.com/barcode/decode\"\nquerystring = {\"barimage\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"barcode4.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://barcode4.p.rapidapi.com/barcode/decode\"\nquerystring = {\"barimage\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"barcode4.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}