{
    "product_id": "api_d5c55096-f812-45b0-ae0e-2661a9f632be",
    "tool_description": "Concept extraction, semantic comparison, text similarity and classification",
    "home_url": "https://rapidapi.com/enno-ai-enno-ai-default/api/semantic-analysis1/",
    "name": "Semantic Analysis",
    "title": "Semantic Analysis",
    "pricing": "FREEMIUM",
    "tool_name": "Semantic Analysis",
    "score": null,
    "host": "semantic-analysis1.p.rapidapi.com",
    "api_list": [
        {
            "name": "Create_Semantic_Mark_v1_mark_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/mark",
            "description": "Create a Semantic Mark (It's represents a specific digital fingerprint for a conceptual projection of a piece of text)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/mark\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/mark\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "Mark",
                "required": [
                    "mark"
                ],
                "type": "object",
                "properties": {
                    "mark": {
                        "title": "Mark",
                        "type": "string",
                        "description": "Semantic Mark contains a digital fingerprint for a conceptual representation of a piece of text"
                    }
                }
            }
        },
        {
            "name": "Document_Paragraphizer_v1_doc_paragraphizer_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/doc/paragraphizer",
            "description": "Extract Paragraph from a TXT, DOCX or PDF document",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "file",
                    "type": "BINARY",
                    "description": "TXT, DOCX or PDF file (< 4 Mo)",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "purify",
                    "type": "BOOLEAN",
                    "description": "Remove special characters and blank lines",
                    "default": true
                }
            ],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/doc/paragraphizer\"\nquerystring = {\"file\": \"\", \"purify\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/doc/paragraphizer\"\nquerystring = {\"file\": \"\", \"purify\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "Response Document Paragraphizer V1 Doc Paragraphizer Post",
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        {
            "name": "Text_Summarization_v1_text_summarize_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/text/summarize",
            "description": "Summarize a text (T3)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/summarize\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/summarize\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Concepts_Extraction_v1_concepts_extract_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/concepts/extract",
            "description": "Concepts extraction from a text (T2)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/concepts/extract\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/concepts/extract\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Find_Semantic_Snippets_v1_text_epitomize_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/text/epitomize",
            "description": "Find the best snippets for a Semantic Mark",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/epitomize\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/epitomize\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Text_Analysis_v1_text_analysis_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/text/analysis",
            "description": "Analyze a text (T2)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/analysis\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/analysis\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Texts_Comparison_v1_text_compare_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/text/compare",
            "description": "Evaluate the semantic similarity of a list of sentences or paragraphs (T3)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/compare\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/compare\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "Response Texts Comparison V1 Text Compare Post",
                "type": "array",
                "items": {
                    "title": "TextComparisonResult",
                    "required": [
                        "text"
                    ],
                    "type": "object",
                    "properties": {
                        "text": {
                            "title": "Text",
                            "type": "string"
                        },
                        "comparison": {
                            "title": "Comparison",
                            "type": "array",
                            "items": {
                                "title": "ComparisonRef",
                                "required": [
                                    "index",
                                    "confidence",
                                    "text"
                                ],
                                "type": "object",
                                "properties": {
                                    "index": {
                                        "title": "Index",
                                        "type": "integer",
                                        "description": "Array index position in the original text"
                                    },
                                    "confidence": {
                                        "title": "Confidence",
                                        "maximum": 100,
                                        "minimum": -100,
                                        "type": "number",
                                        "description": "Confidence value"
                                    },
                                    "text": {
                                        "title": "Text",
                                        "type": "string",
                                        "description": "Referenced text"
                                    }
                                }
                            },
                            "description": "Comparisons details"
                        }
                    }
                }
            }
        },
        {
            "name": "Text_Paragraphizer_v1_text_paragraphizer_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/text/paragraphizer",
            "description": "Extract Paragraph from a Text",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/paragraphizer\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/paragraphizer\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Compare_Marks_v1_mark_compare_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/mark/compare",
            "description": "Compare Semantic Marks each other",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/mark/compare\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/mark/compare\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Language_Detection_v1_lang_detect_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/lang/detect",
            "description": "Return the text language confidence (T1)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/lang/detect\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/lang/detect\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "Response Language Detection V1 Lang Detect Post",
                "type": "array",
                "items": {
                    "title": "LanguageConfidence",
                    "required": [
                        "lang",
                        "confidence"
                    ],
                    "type": "object",
                    "properties": {
                        "lang": {
                            "title": "Lang",
                            "type": "string"
                        },
                        "confidence": {
                            "title": "Confidence",
                            "maximum": 100,
                            "minimum": -100,
                            "type": "number",
                            "description": "Confidence value"
                        }
                    }
                }
            }
        },
        {
            "name": "Text_Categorization_v1_text_categorize_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/text/categorize",
            "description": "Find the best category (T2)",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/categorize\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/categorize\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Semantic_Search_v1_text_search_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/text/search",
            "description": "Find the best snippets",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/search\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/text/search\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "title": "EpitomizeResult",
                "required": [
                    "citations"
                ],
                "type": "object",
                "properties": {
                    "citations": {
                        "title": "Citations",
                        "type": "array",
                        "items": {
                            "title": "TextFound",
                            "required": [
                                "text"
                            ],
                            "type": "object",
                            "properties": {
                                "text": {
                                    "title": "Text",
                                    "type": "string",
                                    "description": "Text found"
                                },
                                "confidence": {
                                    "title": "Confidence",
                                    "maximum": 100,
                                    "minimum": -100,
                                    "type": "number",
                                    "description": "Scoring confidence value"
                                }
                            }
                        },
                        "description": "Best match list with matching"
                    },
                    "highlights": {
                        "title": "Highlights",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Highlight sentences in read order"
                    },
                    "max": {
                        "title": "Max",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number",
                        "description": "Scoring value"
                    },
                    "avg": {
                        "title": "Avg",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number",
                        "description": "Scoring value"
                    },
                    "min": {
                        "title": "Min",
                        "maximum": 100,
                        "minimum": -100,
                        "type": "number",
                        "description": "Scoring value"
                    }
                }
            }
        },
        {
            "name": "Create_Multilabel_Marks_v1_mark_multilabel_post",
            "url": "https://semantic-analysis1.p.rapidapi.com/v1/mark/multilabel",
            "description": "Create optimized marks dedicated to multi-labeling classification",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/mark/multilabel\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://semantic-analysis1.p.rapidapi.com/v1/mark/multilabel\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"semantic-analysis1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}