{
    "product_id": "69",
    "tool_description": "Analyze text for sentiment and broader concepts.",
    "home_url": "https://rapidapi.com/serg.osipchuk/api/AlchemyText/",
    "name": "AlchemyText",
    "title": "AlchemyText",
    "pricing": "FREE",
    "tool_name": "AlchemyText",
    "score": {
        "avgServiceLevel": 0,
        "avgLatency": 127262,
        "avgSuccessRate": 0,
        "popularityScore": 4.3,
        "__typename": "Score"
    },
    "host": "AlchemyTextserg-osipchukV1.p.rapidapi.com",
    "api_list": [
        {
            "name": "deleteSingleModel",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/deleteSingleModel",
            "description": "Deletes a custom model that was deployed to your AlchemyAPI service instance from Watson Knowledge Studio.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "modelId",
                    "type": "CREDENTIALS",
                    "description": "The unique identifier for the model that you want to delete.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/deleteSingleModel\"\nquerystring = {\"modelId\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/deleteSingleModel\"\nquerystring = {\"modelId\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "extractDatesFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromHtml",
            "description": "Extract dates from an HTML content. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "anchorDate",
                    "type": "DATEPICKER",
                    "description": "The date to use as \"today\" when interpreting phrases in the text like \"next tuesday.\". Format: yyyy-mm-dd hh:mm:ss",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromHtml\"\nquerystring = {\"url\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"html\": \"\", \"anchorDate\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromHtml\"\nquerystring = {\"url\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"html\": \"\", \"anchorDate\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "extractDatesFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromText",
            "description": "Extract dates from plain text. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "Text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "anchorDate",
                    "type": "DATEPICKER",
                    "description": "The date to use as \"today\" when interpreting phrases in the text like \"next tuesday.\". Format: yyyy-mm-dd hh:mm:ss",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromText\"\nquerystring = {\"text\": \"\", \"showSourceText\": \"\", \"anchorDate\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromText\"\nquerystring = {\"text\": \"\", \"showSourceText\": \"\", \"anchorDate\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "extractDatesFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromUrl",
            "description": "Extract dates from a webpage. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "anchorDate",
                    "type": "DATEPICKER",
                    "description": "The date to use as \"today\" when interpreting phrases in the text like \"next tuesday.\". Format: yyyy-mm-dd hh:mm:ss",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromUrl\"\nquerystring = {\"showSourceText\": \"\", \"apiKey\": \"\", \"anchorDate\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/extractDatesFromUrl\"\nquerystring = {\"showSourceText\": \"\", \"apiKey\": \"\", \"anchorDate\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getAuthorsFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getAuthorsFromHtml",
            "description": "Get author names from an HTML document.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getAuthorsFromHtml\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getAuthorsFromHtml\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getAuthorsFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getAuthorsFromUrl",
            "description": "Get author names from a webpage.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getAuthorsFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getAuthorsFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getCombinedDataFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromHtml",
            "description": "Analyze an HTML with multiple text analysis operations.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response",
                    "default": ""
                },
                {
                    "name": "extract",
                    "type": "LIST",
                    "description": "List of any of the following methods: authors, concepts (default), dates, doc-emotion, entities (default), feeds, keywords (default), pub-date, relations, typed-rels, doc-sentiment, taxonomy (default), title",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromHtml\"\nquerystring = {\"html\": \"\", \"apiKey\": \"\", \"showSourceText\": \"\", \"extract\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromHtml\"\nquerystring = {\"html\": \"\", \"apiKey\": \"\", \"showSourceText\": \"\", \"extract\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getCombinedDataFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromText",
            "description": "Analyze a TEXT with multiple text analysis operations.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with Text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response",
                    "default": ""
                },
                {
                    "name": "extract",
                    "type": "LIST",
                    "description": "List of any of the following methods: authors, concepts (default), dates, doc-emotion, entities (default), feeds, keywords (default), pub-date, relations, typed-rels, doc-sentiment, taxonomy (default), title",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromText\"\nquerystring = {\"text\": \"\", \"apiKey\": \"\", \"showSourceText\": \"\", \"extract\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromText\"\nquerystring = {\"text\": \"\", \"apiKey\": \"\", \"showSourceText\": \"\", \"extract\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getCombinedDataFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromUrl",
            "description": "Analyze an URL with multiple text analysis operations.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response",
                    "default": ""
                },
                {
                    "name": "extract",
                    "type": "LIST",
                    "description": "List of any of the following methods: authors, concepts (default), dates, doc-emotion, entities (default), feeds, keywords (default), pub-date, relations, typed-rels, doc-sentiment, taxonomy (default), title",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"showSourceText\": \"\", \"extract\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getCombinedDataFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"showSourceText\": \"\", \"extract\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getEmotionFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromHtml",
            "description": "Detect emotions implied in the text of an HTML document. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromHtml\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromHtml\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getEmotionFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromText",
            "description": "Detect emotions implied in plain text. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromText\"\nquerystring = {\"url\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromText\"\nquerystring = {\"url\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getEmotionFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromUrl",
            "description": "Detect emotions implied in the text on a webpage. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromUrl\"\nquerystring = {\"showSourceText\": \"\", \"xpath\": \"\", \"apiKey\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getEmotionFromUrl\"\nquerystring = {\"showSourceText\": \"\", \"xpath\": \"\", \"apiKey\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getFeedLinksFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getFeedLinksFromHtml",
            "description": "Extract RSS/ATOM feed links from an HTML document.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getFeedLinksFromHtml\"\nquerystring = {\"html\": \"\", \"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getFeedLinksFromHtml\"\nquerystring = {\"html\": \"\", \"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getFeedLinksFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getFeedLinksFromUrl",
            "description": "Extract RSS/ATOM feed links from a webpage.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getFeedLinksFromUrl\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getFeedLinksFromUrl\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getLanguageFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromHtml",
            "description": "Detect the language of an HTML document.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromHtml\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromHtml\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getLanguageFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromText",
            "description": "Detect the language of plain text.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromText\"\nquerystring = {\"url\": \"\", \"showSourceText\": \"\", \"text\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromText\"\nquerystring = {\"url\": \"\", \"showSourceText\": \"\", \"text\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getLanguageFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromUrl",
            "description": "Detect the language of a webpage.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromUrl\"\nquerystring = {\"apiKey\": \"\", \"xpath\": \"\", \"showSourceText\": \"\", \"sourceText\": \"\", \"cquery\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getLanguageFromUrl\"\nquerystring = {\"apiKey\": \"\", \"xpath\": \"\", \"showSourceText\": \"\", \"sourceText\": \"\", \"cquery\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getMicroformatDataFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getMicroformatDataFromHtml",
            "description": "Extract microformats from an HTML document.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getMicroformatDataFromHtml\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getMicroformatDataFromHtml\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getMicroformatDataFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getMicroformatDataFromUrl",
            "description": "Extract microformats from a webpage.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getMicroformatDataFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getMicroformatDataFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getModels",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getModels",
            "description": "This endpoint allow you to manage custom models that are deployed to your AlchemyAPI service instance. With an Advanced pricing plan and access to Watson Knowledge Studio, you can create your own custom model that specializes in understanding entities and relations that are unique to your domain.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getModels\"\nquerystring = {\"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getModels\"\nquerystring = {\"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getPublicationDateFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getPublicationDateFromHtml",
            "description": "Get the publication date of an HTML document.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getPublicationDateFromHtml\"\nquerystring = {\"html\": \"\", \"url\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getPublicationDateFromHtml\"\nquerystring = {\"html\": \"\", \"url\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getPublicationDateFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getPublicationDateFromUrl",
            "description": "Get the publication date of a webpage.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getPublicationDateFromUrl\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getPublicationDateFromUrl\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedConceptsFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromHtml",
            "description": "Extract concepts from text of an HTML document. Supported languages: English, Spanish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of concepts to extract (default = 8, maximum = 50)",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromHtml\"\nquerystring = {\"sourceText\": \"\", \"html\": \"\", \"cquery\": \"\", \"linkedData\": \"\", \"maxRetrieve\": \"\", \"url\": \"\", \"xpath\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"knowledgeGraph\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromHtml\"\nquerystring = {\"sourceText\": \"\", \"html\": \"\", \"cquery\": \"\", \"linkedData\": \"\", \"maxRetrieve\": \"\", \"url\": \"\", \"xpath\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"knowledgeGraph\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedConceptsFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromText",
            "description": "Extract concepts from plain text. Supported languages: English, Spanish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of concepts to extract (default = 8, maximum = 50)",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromText\"\nquerystring = {\"knowledgeGraph\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"url\": \"\", \"text\": \"\", \"maxRetrieve\": \"\", \"linkedData\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromText\"\nquerystring = {\"knowledgeGraph\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"url\": \"\", \"text\": \"\", \"maxRetrieve\": \"\", \"linkedData\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedConceptsFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromUrl",
            "description": "Extract concepts from a webpage. Supported languages: English, Spanish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of concepts to extract (default = 8, maximum = 50)",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromUrl\"\nquerystring = {\"cquery\": \"\", \"apiKey\": \"\", \"maxRetrieve\": \"\", \"sourceText\": \"\", \"linkedData\": \"\", \"knowledgeGraph\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"xpath\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedConceptsFromUrl\"\nquerystring = {\"cquery\": \"\", \"apiKey\": \"\", \"maxRetrieve\": \"\", \"sourceText\": \"\", \"linkedData\": \"\", \"knowledgeGraph\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"xpath\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedKeywordsFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromHtml",
            "description": "Extract keywords from an HTML document. Supported languages: English, French, German, Italian, Portuguese, Russian, Spanish, Swedish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of keywords to return (default = 50)",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "emotion",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze emotions associated with each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromHtml\"\nquerystring = {\"maxRetrieve\": \"\", \"knowledgeGraph\": \"\", \"sourceText\": \"\", \"apiKey\": \"\", \"cquery\": \"\", \"sentiment\": \"\", \"emotion\": \"\", \"url\": \"\", \"xpath\": \"\", \"html\": \"\", \"showSourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromHtml\"\nquerystring = {\"maxRetrieve\": \"\", \"knowledgeGraph\": \"\", \"sourceText\": \"\", \"apiKey\": \"\", \"cquery\": \"\", \"sentiment\": \"\", \"emotion\": \"\", \"url\": \"\", \"xpath\": \"\", \"html\": \"\", \"showSourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedKeywordsFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromText",
            "description": "Extract keywords from a plain text. Supported languages: English, French, German, Italian, Portuguese, Russian, Spanish, Swedish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "emotion",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze emotions associated with each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of keywords to return (default = 50)",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromText\"\nquerystring = {\"emotion\": \"\", \"url\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"maxRetrieve\": \"\", \"sentiment\": \"\", \"apiKey\": \"\", \"knowledgeGraph\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromText\"\nquerystring = {\"emotion\": \"\", \"url\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"maxRetrieve\": \"\", \"sentiment\": \"\", \"apiKey\": \"\", \"knowledgeGraph\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedKeywordsFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromUrl",
            "description": "Extract keywords from a webpage. Supported languages: English, French, German, Italian, Portuguese, Russian, Spanish, Swedish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "emotion",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze emotions associated with each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of keywords to return (default = 50)",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromUrl\"\nquerystring = {\"emotion\": \"\", \"showSourceText\": \"\", \"maxRetrieve\": \"\", \"xpath\": \"\", \"apiKey\": \"\", \"sourceText\": \"\", \"cquery\": \"\", \"url\": \"\", \"knowledgeGraph\": \"\", \"sentiment\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedKeywordsFromUrl\"\nquerystring = {\"emotion\": \"\", \"showSourceText\": \"\", \"maxRetrieve\": \"\", \"xpath\": \"\", \"apiKey\": \"\", \"sourceText\": \"\", \"cquery\": \"\", \"url\": \"\", \"knowledgeGraph\": \"\", \"sentiment\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedNamedEntitiesFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromHtml",
            "description": "Extract entities from an HTML document. Supported languages: English, French, German, Italian, Portuguese, Russian, Spanish, Swedish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of entities to return (default = 50)",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "emotion",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze emotions associated with each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "disambiguate",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide entity disambiguation information in the response.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                },
                {
                    "name": "quotations",
                    "type": "SELECT",
                    "description": "Set this to 1 to include quotations that are linked to detected entities.",
                    "default": ""
                },
                {
                    "name": "structuredEntities",
                    "type": "SELECT",
                    "description": "Set this to 0 to ignore structured entities, such as Quantity, EmailAddress, TwitterHandle, Hashtag, and IPAddress.",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "model",
                    "type": "STRING",
                    "description": "Specify a custom model ID here to override the default Alchemy entity extraction model. See README for more details.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "coreference",
                    "type": "SELECT",
                    "description": "Set this to 0 to treat coreferences as separate entities (coreferences are resolved into detected entities by default).",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromHtml\"\nquerystring = {\"maxRetrieve\": \"\", \"cquery\": \"\", \"emotion\": \"\", \"disambiguate\": \"\", \"url\": \"\", \"apiKey\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"linkedData\": \"\", \"quotations\": \"\", \"structuredEntities\": \"\", \"sentiment\": \"\", \"html\": \"\", \"knowledgeGraph\": \"\", \"model\": \"\", \"xpath\": \"\", \"coreference\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromHtml\"\nquerystring = {\"maxRetrieve\": \"\", \"cquery\": \"\", \"emotion\": \"\", \"disambiguate\": \"\", \"url\": \"\", \"apiKey\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"linkedData\": \"\", \"quotations\": \"\", \"structuredEntities\": \"\", \"sentiment\": \"\", \"html\": \"\", \"knowledgeGraph\": \"\", \"model\": \"\", \"xpath\": \"\", \"coreference\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedNamedEntitiesFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromText",
            "description": "Extract entities from plain text. Supported languages: English, French, German, Italian, Portuguese, Russian, Spanish, Swedish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "model",
                    "type": "STRING",
                    "description": "Specify a custom model ID here to override the default Alchemy entity extraction model. See README for more details.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                },
                {
                    "name": "emotion",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze emotions associated with each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "disambiguate",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide entity disambiguation information in the response.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "coreference",
                    "type": "SELECT",
                    "description": "Set this to 0 to treat coreferences as separate entities (coreferences are resolved into detected entities by default).",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of entities to return (default = 50)",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "quotations",
                    "type": "SELECT",
                    "description": "Set this to 1 to include quotations that are linked to detected entities.",
                    "default": ""
                },
                {
                    "name": "structuredEntities",
                    "type": "SELECT",
                    "description": "Set this to 0 to ignore structured entities, such as Quantity, EmailAddress, TwitterHandle, Hashtag, and IPAddress.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromText\"\nquerystring = {\"model\": \"\", \"linkedData\": \"\", \"emotion\": \"\", \"disambiguate\": \"\", \"showSourceText\": \"\", \"text\": \"\", \"coreference\": \"\", \"apiKey\": \"\", \"sentiment\": \"\", \"maxRetrieve\": \"\", \"knowledgeGraph\": \"\", \"quotations\": \"\", \"structuredEntities\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromText\"\nquerystring = {\"model\": \"\", \"linkedData\": \"\", \"emotion\": \"\", \"disambiguate\": \"\", \"showSourceText\": \"\", \"text\": \"\", \"coreference\": \"\", \"apiKey\": \"\", \"sentiment\": \"\", \"maxRetrieve\": \"\", \"knowledgeGraph\": \"\", \"quotations\": \"\", \"structuredEntities\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedNamedEntitiesFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromUrl",
            "description": "Extract entities from a webpage. Supported languages: English, French, German, Italian, Portuguese, Russian, Spanish, Swedish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of entities to return (default = 50)",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "quotations",
                    "type": "SELECT",
                    "description": "Set this to 1 to include quotations that are linked to detected entities.",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "structuredEntities",
                    "type": "SELECT",
                    "description": "Set this to 0 to ignore structured entities, such as Quantity, EmailAddress, TwitterHandle, Hashtag, and IPAddress.",
                    "default": ""
                },
                {
                    "name": "coreference",
                    "type": "SELECT",
                    "description": "Set this to 0 to treat coreferences as separate entities (coreferences are resolved into detected entities by default).",
                    "default": ""
                },
                {
                    "name": "emotion",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze emotions associated with each detected entity. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "disambiguate",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide entity disambiguation information in the response.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                },
                {
                    "name": "model",
                    "type": "STRING",
                    "description": "Specify a custom model ID here to override the default Alchemy entity extraction model. See README for more details.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromUrl\"\nquerystring = {\"url\": \"\", \"maxRetrieve\": \"\", \"knowledgeGraph\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"quotations\": \"\", \"sentiment\": \"\", \"structuredEntities\": \"\", \"coreference\": \"\", \"emotion\": \"\", \"sourceText\": \"\", \"disambiguate\": \"\", \"linkedData\": \"\", \"model\": \"\", \"showSourceText\": \"\", \"cquery\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedNamedEntitiesFromUrl\"\nquerystring = {\"url\": \"\", \"maxRetrieve\": \"\", \"knowledgeGraph\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"quotations\": \"\", \"sentiment\": \"\", \"structuredEntities\": \"\", \"coreference\": \"\", \"emotion\": \"\", \"sourceText\": \"\", \"disambiguate\": \"\", \"linkedData\": \"\", \"model\": \"\", \"showSourceText\": \"\", \"cquery\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedTaxonomyFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromHtml",
            "description": "Categorize an HTML document into a 5-level taxonomy. Supported languages: English.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromHtml\"\nquerystring = {\"cquery\": \"\", \"sourceText\": \"\", \"url\": \"\", \"apiKey\": \"\", \"html\": \"\", \"xpath\": \"\", \"showSourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromHtml\"\nquerystring = {\"cquery\": \"\", \"sourceText\": \"\", \"url\": \"\", \"apiKey\": \"\", \"html\": \"\", \"xpath\": \"\", \"showSourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedTaxonomyFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromText",
            "description": "Categorize plain text into a 5-level taxonomy. Supported languages: English.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromText\"\nquerystring = {\"text\": \"\", \"apiKey\": \"\", \"showSourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromText\"\nquerystring = {\"text\": \"\", \"apiKey\": \"\", \"showSourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRankedTaxonomyFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromUrl",
            "description": "Categorize a webpage into a 5-level taxonomy. Supported languages: English.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromUrl\"\nquerystring = {\"showSourceText\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"url\": \"\", \"sourceText\": \"\", \"cquery\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRankedTaxonomyFromUrl\"\nquerystring = {\"showSourceText\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"url\": \"\", \"sourceText\": \"\", \"cquery\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRawTextFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRawTextFromHtml",
            "description": "Extract the plain text from an HTML document.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRawTextFromHtml\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRawTextFromHtml\"\nquerystring = {\"url\": \"\", \"apiKey\": \"\", \"html\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRawTextFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRawTextFromUrl",
            "description": "Extract the plain text from a webpage.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRawTextFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRawTextFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRelationsFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromHtml",
            "description": "Extract Subject-Action-Object relations from an HTML document. Supported languages: English, Spanish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "requireEntities",
                    "type": "SELECT",
                    "description": "Set this to 1 to restrict results to relations that contain at least one named entity.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "keywords",
                    "type": "SELECT",
                    "description": "Set this to 1 to identify keywords in detected relations. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sentimentExcludeEntities",
                    "type": "SELECT",
                    "description": "Set this to 1 to exclude named entity text from sentiment analysis. For exapmle, do not analyze \"New\" in \"New York\".",
                    "default": ""
                },
                {
                    "name": "disambiguate",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide entity disambiguation information in the response.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of entities to return (default = 50, maximum = 100).",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "entities",
                    "type": "SELECT",
                    "description": "Set this to 1 to identify named entities in detected relations. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each result. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "coreference",
                    "type": "SELECT",
                    "description": "Set this to 0 to treat coreferences as separate entities (coreferences are resolved into detected entities by default).",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromHtml\"\nquerystring = {\"url\": \"\", \"requireEntities\": \"\", \"cquery\": \"\", \"apiKey\": \"\", \"sourceText\": \"\", \"keywords\": \"\", \"sentimentExcludeEntities\": \"\", \"disambiguate\": \"\", \"linkedData\": \"\", \"xpath\": \"\", \"maxRetrieve\": \"\", \"showSourceText\": \"\", \"entities\": \"\", \"html\": \"\", \"knowledgeGraph\": \"\", \"sentiment\": \"\", \"coreference\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromHtml\"\nquerystring = {\"url\": \"\", \"requireEntities\": \"\", \"cquery\": \"\", \"apiKey\": \"\", \"sourceText\": \"\", \"keywords\": \"\", \"sentimentExcludeEntities\": \"\", \"disambiguate\": \"\", \"linkedData\": \"\", \"xpath\": \"\", \"maxRetrieve\": \"\", \"showSourceText\": \"\", \"entities\": \"\", \"html\": \"\", \"knowledgeGraph\": \"\", \"sentiment\": \"\", \"coreference\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRelationsFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromText",
            "description": "Extract Subject-Action-Object relations from plain text. Supported languages: English, Spanish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of entities to return (default = 50, maximum = 100).",
                    "default": ""
                },
                {
                    "name": "coreference",
                    "type": "SELECT",
                    "description": "Set this to 0 to treat coreferences as separate entities (coreferences are resolved into detected entities by default).",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each result. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "entities",
                    "type": "SELECT",
                    "description": "Set this to 1 to identify named entities in detected relations. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "disambiguate",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide entity disambiguation information in the response.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "keywords",
                    "type": "SELECT",
                    "description": "Set this to 1 to identify keywords in detected relations. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "requireEntities",
                    "type": "SELECT",
                    "description": "Set this to 1 to restrict results to relations that contain at least one named entity.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                },
                {
                    "name": "sentimentExcludeEntities",
                    "type": "SELECT",
                    "description": "Set this to 1 to exclude named entity text from sentiment analysis. For exapmle, do not analyze \"New\" in \"New York\".",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromText\"\nquerystring = {\"maxRetrieve\": \"\", \"coreference\": \"\", \"sentiment\": \"\", \"knowledgeGraph\": \"\", \"showSourceText\": \"\", \"text\": \"\", \"entities\": \"\", \"disambiguate\": \"\", \"url\": \"\", \"keywords\": \"\", \"requireEntities\": \"\", \"linkedData\": \"\", \"sentimentExcludeEntities\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromText\"\nquerystring = {\"maxRetrieve\": \"\", \"coreference\": \"\", \"sentiment\": \"\", \"knowledgeGraph\": \"\", \"showSourceText\": \"\", \"text\": \"\", \"entities\": \"\", \"disambiguate\": \"\", \"url\": \"\", \"keywords\": \"\", \"requireEntities\": \"\", \"linkedData\": \"\", \"sentimentExcludeEntities\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getRelationsFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromUrl",
            "description": "Extract Subject-Action-Object relations from a webpage. Supported languages: English, Spanish",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "coreference",
                    "type": "SELECT",
                    "description": "Set this to 0 to treat coreferences as separate entities (coreferences are resolved into detected entities by default).",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "maxRetrieve",
                    "type": "STRING",
                    "description": "Maximum number of entities to return (default = 50, maximum = 100).",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "entities",
                    "type": "SELECT",
                    "description": "Set this to 1 to identify named entities in detected relations. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "knowledgeGraph",
                    "type": "SELECT",
                    "description": "Set this to 1 to include knowledge graph information in the results. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sentiment",
                    "type": "SELECT",
                    "description": "Set this to 1 to analyze the sentiment towards each result. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sentimentExcludeEntities",
                    "type": "SELECT",
                    "description": "Set this to 1 to exclude named entity text from sentiment analysis. For exapmle, do not analyze \"New\" in \"New York\".",
                    "default": ""
                },
                {
                    "name": "keywords",
                    "type": "SELECT",
                    "description": "Set this to 1 to identify keywords in detected relations. This incurs an additional transaction charge.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "disambiguate",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide entity disambiguation information in the response.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "requireEntities",
                    "type": "SELECT",
                    "description": "Set this to 1 to restrict results to relations that contain at least one named entity.",
                    "default": ""
                },
                {
                    "name": "linkedData",
                    "type": "SELECT",
                    "description": "Set this to 0 to hide Linked Data content links in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromUrl\"\nquerystring = {\"coreference\": \"\", \"showSourceText\": \"\", \"maxRetrieve\": \"\", \"xpath\": \"\", \"entities\": \"\", \"knowledgeGraph\": \"\", \"apiKey\": \"\", \"sentiment\": \"\", \"sentimentExcludeEntities\": \"\", \"keywords\": \"\", \"sourceText\": \"\", \"disambiguate\": \"\", \"url\": \"\", \"cquery\": \"\", \"requireEntities\": \"\", \"linkedData\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getRelationsFromUrl\"\nquerystring = {\"coreference\": \"\", \"showSourceText\": \"\", \"maxRetrieve\": \"\", \"xpath\": \"\", \"entities\": \"\", \"knowledgeGraph\": \"\", \"apiKey\": \"\", \"sentiment\": \"\", \"sentimentExcludeEntities\": \"\", \"keywords\": \"\", \"sourceText\": \"\", \"disambiguate\": \"\", \"url\": \"\", \"cquery\": \"\", \"requireEntities\": \"\", \"linkedData\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTargetedEmotionFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromHtml",
            "description": "Detect emotions directed toward targeted phrases in an HTML document. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "targets",
                    "type": "LIST",
                    "description": "Array of phrases. The service will analyze emotion directed toward each phrase that is found in the source text. Supports up to 20 phrases. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response. Parameter is only used if indicated html or text parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromHtml\"\nquerystring = {\"html\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"cquery\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"sourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromHtml\"\nquerystring = {\"html\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"cquery\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"sourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTargetedEmotionFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromText",
            "description": "Detect emotions directed toward targeted phrases in text. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "Text content.",
                    "default": ""
                },
                {
                    "name": "targets",
                    "type": "LIST",
                    "description": "Array of phrases. The service will analyze emotion directed toward each phrase that is found in the source text. Supports up to 20 phrases. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromText\"\nquerystring = {\"apiKey\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromText\"\nquerystring = {\"apiKey\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTargetedEmotionFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromUrl",
            "description": "Detect emotions directed toward targeted phrases on webpage. Supported languages: English",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL",
                    "default": ""
                },
                {
                    "name": "targets",
                    "type": "LIST",
                    "description": "Array of phrases. The service will analyze emotion directed toward each phrase that is found in the source text. Supports up to 20 phrases. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"xpath\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"cquery\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedEmotionFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"xpath\": \"\", \"sourceText\": \"\", \"showSourceText\": \"\", \"cquery\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTargetedSentimentFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromHtml",
            "description": "Analyze sentiment for targeted phrases in an HTML document. Supported languages: Arabic, English, French, German, Italian, Portuguese, Russian, Spanish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "targets",
                    "type": "LIST",
                    "description": "Array of phrases. The service will return sentiment information for each phrase that is found in the source text. Supports up to 20 phrases. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromHtml\"\nquerystring = {\"apiKey\": \"\", \"html\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"url\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromHtml\"\nquerystring = {\"apiKey\": \"\", \"html\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"url\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTargetedSentimentFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromText",
            "description": "Analyze sentiment for targeted phrases in plain text. Supported languages: Arabic, English, French, German, Italian, Portuguese, Russian, Spanish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "targets",
                    "type": "LIST",
                    "description": "Array of phrases. The service will return sentiment information for each phrase that is found in the source text. Supports up to 20 phrases. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromText\"\nquerystring = {\"apiKey\": \"\", \"text\": \"\", \"url\": \"\", \"showSourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromText\"\nquerystring = {\"apiKey\": \"\", \"text\": \"\", \"url\": \"\", \"showSourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTargetedSentimentFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromUrl",
            "description": "Analyze sentiment for targeted phrases on a webpage. Supported languages: Arabic, English, French, German, Italian, Portuguese, Russian, Spanish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                },
                {
                    "name": "targets",
                    "type": "LIST",
                    "description": "Array of phrases. The service will return sentiment information for each phrase that is found in the source text. Supports up to 20 phrases. ",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTargetedSentimentFromUrl\"\nquerystring = {\"apiKey\": \"\", \"url\": \"\", \"showSourceText\": \"\", \"xpath\": \"\", \"cquery\": \"\", \"sourceText\": \"\", \"targets\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTextFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextFromHtml",
            "description": "Extract primary text content from an HTML document. Cleaned page text is obtained by default in other HTML and URL functions. You can view the results of page cleaning in responses from most of the other methods by passing showSourceText=1.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "useMetadata",
                    "type": "SELECT",
                    "description": "Set this to 0 to ignore description information in webpage metadata.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "extractLinks",
                    "type": "SELECT",
                    "description": "Set this to 1 to include hyperlinks in the extracted text.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextFromHtml\"\nquerystring = {\"html\": \"\", \"xpath\": \"\", \"useMetadata\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"sourceText\": \"\", \"cquery\": \"\", \"apiKey\": \"\", \"extractLinks\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextFromHtml\"\nquerystring = {\"html\": \"\", \"xpath\": \"\", \"useMetadata\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"sourceText\": \"\", \"cquery\": \"\", \"apiKey\": \"\", \"extractLinks\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTextFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextFromUrl",
            "description": "Extract primary text content from a webpage. Cleaned page text is obtained by default in other HTML and URL functions. You can view the results of page cleaning in responses from most of the other methods by passing showSourceText=1.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "extractLinks",
                    "type": "SELECT",
                    "description": "Set this to 1 to include hyperlinks in the extracted text.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "useMetadata",
                    "type": "SELECT",
                    "description": "Set this to 0 to ignore description information in webpage metadata.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextFromUrl\"\nquerystring = {\"url\": \"\", \"sourceText\": \"\", \"extractLinks\": \"\", \"cquery\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"useMetadata\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextFromUrl\"\nquerystring = {\"url\": \"\", \"sourceText\": \"\", \"extractLinks\": \"\", \"cquery\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"xpath\": \"\", \"useMetadata\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTextSentimentFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromHtml",
            "description": "Analyze the overall sentiment of HTML document. Supported languages: Arabic, English, French, German, Italian, Portuguese, Russian, Spanish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response..",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromHtml\"\nquerystring = {\"showSourceText\": \"\", \"html\": \"\", \"xpath\": \"\", \"apiKey\": \"\", \"cquery\": \"\", \"url\": \"\", \"sourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromHtml\"\nquerystring = {\"showSourceText\": \"\", \"html\": \"\", \"xpath\": \"\", \"apiKey\": \"\", \"cquery\": \"\", \"url\": \"\", \"sourceText\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTextSentimentFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromText",
            "description": "Analyze the overall sentiment of plain text. Supported languages: Arabic, English, French, German, Italian, Portuguese, Russian, Spanish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromText\"\nquerystring = {\"showSourceText\": \"\", \"apiKey\": \"\", \"text\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromText\"\nquerystring = {\"showSourceText\": \"\", \"apiKey\": \"\", \"text\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTextSentimentFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromUrl",
            "description": "Analyze the overall sentiment of a webpage. Supported languages: Arabic, English, French, German, Italian, Portuguese, Russian, Spanish.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "cquery",
                    "type": "STRING",
                    "description": "A visual constraints query to apply to the web page. Required when sourceText is set to cquery. For more details visit http://www.ibm.com/watson/developercloud/doc/alchemylanguage/visual_constraints.shtml. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "sourceText",
                    "type": "SELECT",
                    "description": "How to obtain the source text from the webpage. For more details see README. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "xpath",
                    "type": "STRING",
                    "description": "An XPath query to apply to the web page. Required when sourceText is set to one of the XPath values. Parameter is only used if indicated html or url parameter.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromUrl\"\nquerystring = {\"cquery\": \"\", \"url\": \"\", \"sourceText\": \"\", \"xpath\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTextSentimentFromUrl\"\nquerystring = {\"cquery\": \"\", \"url\": \"\", \"sourceText\": \"\", \"xpath\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTitleFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTitleFromHtml",
            "description": "Extract the page title from an HTML document.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "useMetadata",
                    "type": "SELECT",
                    "description": "1 or 0. Whether to use title information from the web page metadata (default = 1: enabled).",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTitleFromHtml\"\nquerystring = {\"useMetadata\": \"\", \"html\": \"\", \"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTitleFromHtml\"\nquerystring = {\"useMetadata\": \"\", \"html\": \"\", \"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTitleFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTitleFromUrl",
            "description": "Extract the page title from a webpage.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "useMetadata",
                    "type": "SELECT",
                    "description": "1 or 0. Whether to use title information from the web page metadata (default = 1: enabled).",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTitleFromUrl\"\nquerystring = {\"apiKey\": \"\", \"useMetadata\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTitleFromUrl\"\nquerystring = {\"apiKey\": \"\", \"useMetadata\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTypedRelationsFromHtml",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromHtml",
            "description": "Use custom models to identify typed relations between detected entities in HTML document. Source text in Typed Relations calls is truncated to 5 KB. Typed relations identify different types of connections between detected entities. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results for your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "html",
                    "type": "FILE",
                    "description": "File with HTML content.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                },
                {
                    "name": "model",
                    "type": "STRING",
                    "description": "The unique alphanumeric identifier for your custom model. You can also choose from the following public models: en-news: trained on English news content (default); es-news: trained on Spanish news content; ar-news: trained on Arabic news content.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromHtml\"\nquerystring = {\"apiKey\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"html\": \"\", \"model\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromHtml\"\nquerystring = {\"apiKey\": \"\", \"showSourceText\": \"\", \"url\": \"\", \"html\": \"\", \"model\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTypedRelationsFromText",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromText",
            "description": "Use custom models to identify typed relations between detected entities in plain text. Source text in Typed Relations calls is truncated to 5 KB. Typed relations identify different types of connections between detected entities. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results for your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "FILE",
                    "description": "File with text content.",
                    "default": ""
                },
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "model",
                    "type": "STRING",
                    "description": "The unique alphanumeric identifier for your custom model. You can also choose from the following public models: en-news: trained on English news content (default); es-news: trained on Spanish news content; ar-news: trained on Arabic news content.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Input here will appear as the url value in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromText\"\nquerystring = {\"model\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromText\"\nquerystring = {\"model\": \"\", \"text\": \"\", \"showSourceText\": \"\", \"apiKey\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTypedRelationsFromUrl",
            "url": "https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromUrl",
            "description": "Use custom models to identify typed relations between detected entities from a webpage. Source text in Typed Relations calls is truncated to 5 KB. Typed relations identify different types of connections between detected entities. For example, the entities \"Oscar\" and \"Leonardo DiCaprio\" might be linked by an \"awardedTo\" relation. To tailor results for your domain, you can specify your own custom entities and relations with custom models in Watson Knowledge Studio.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "apiKey",
                    "type": "CREDENTIALS",
                    "description": "API key obtained from AlchemyAPI.",
                    "default": ""
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "HTTP URL.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "model",
                    "type": "STRING",
                    "description": "The unique alphanumeric identifier for your custom model. You can also choose from the following public models: en-news: trained on English news content (default); es-news: trained on Spanish news content; ar-news: trained on Arabic news content.",
                    "default": ""
                },
                {
                    "name": "showSourceText",
                    "type": "SELECT",
                    "description": "Set this to 1 to include the source text in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromUrl\"\nquerystring = {\"apiKey\": \"\", \"model\": \"\", \"showSourceText\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://AlchemyTextserg-osipchukV1.p.rapidapi.com/getTypedRelationsFromUrl\"\nquerystring = {\"apiKey\": \"\", \"model\": \"\", \"showSourceText\": \"\", \"url\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"AlchemyTextserg-osipchukV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        }
    ]
}