{
    "product_id": "212",
    "tool_description": "Interpret text, classify words and compare text bodies.",
    "home_url": "https://rapidapi.com/stefan.skliarov/api/Dandelion/",
    "name": "Dandelion",
    "title": "Dandelion",
    "pricing": "FREE",
    "tool_name": "Dandelion",
    "score": {
        "avgServiceLevel": 0,
        "avgLatency": 127266,
        "avgSuccessRate": 0,
        "popularityScore": 4.5,
        "__typename": "Score"
    },
    "host": "Dandelionstefan-skliarovV1.p.rapidapi.com",
    "api_list": [
        {
            "name": "classifyText",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/classifyText",
            "description": "This API classifies short documents into a set of user-defined classes. ",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "modelId",
                    "type": "STRING",
                    "description": "The unique ID of the model you want to use. ",
                    "default": ""
                },
                {
                    "name": "sourceType",
                    "type": "SELECT",
                    "description": "Type of the input: text,url,html,html_fragment",
                    "default": ""
                },
                {
                    "name": "source",
                    "type": "STRING",
                    "description": "Request input",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "minScore",
                    "type": "STRING",
                    "description": "Return those categories that get a score above this threshold. ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/classifyText\"\nquerystring = {\"modelId\": \"\", \"sourceType\": \"\", \"source\": \"\", \"minScore\": \"\", \"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/classifyText\"\nquerystring = {\"modelId\": \"\", \"sourceType\": \"\", \"source\": \"\", \"minScore\": \"\", \"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "createModel",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/createModel",
            "description": "Create a new model",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "model",
                    "type": "JSON",
                    "description": "Formed model. Example: {\"lang\": \"en\", \"description\": \"basic\", \"categories\": [{\"name\": \"sport\", \"topics\": {\"http://en.wikipedia.org/wiki/Sport\": 2}}] }",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/createModel\"\nquerystring = {\"model\": \"\", \"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/createModel\"\nquerystring = {\"model\": \"\", \"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "deleteModel",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/deleteModel",
            "description": "Delete a specific model",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "modelId",
                    "type": "STRING",
                    "description": "Id of existing model",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/deleteModel\"\nquerystring = {\"modelId\": \"\", \"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/deleteModel\"\nquerystring = {\"modelId\": \"\", \"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "detectLanguages",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/detectLanguages",
            "description": "Detects language of the source.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                },
                {
                    "name": "source",
                    "type": "STRING",
                    "description": "Request input",
                    "default": ""
                },
                {
                    "name": "sourceType",
                    "type": "SELECT",
                    "description": "Type of the input: text,url,html,html_fragment",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "clean",
                    "type": "BOOLEAN",
                    "description": "Set this parameter to true if you want the text to be cleaned from urls, email addresses, hashtags, and more, before being processed.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/detectLanguages\"\nquerystring = {\"accessToken\": \"\", \"source\": \"\", \"sourceType\": \"\", \"clean\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/detectLanguages\"\nquerystring = {\"accessToken\": \"\", \"source\": \"\", \"sourceType\": \"\", \"clean\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "extractEntity",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/extractEntity",
            "description": "Automatically tag your texts, extracting Wikipedia entities and enriching your data.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "sourceType",
                    "type": "SELECT",
                    "description": "Type of the input: text,url,html,html_fragment",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                },
                {
                    "name": "source",
                    "type": "STRING",
                    "description": "request input",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "minLength",
                    "type": "NUMBER",
                    "description": "With this parameter you can remove those entities having a spot shorter than a minimum length.",
                    "default": ""
                },
                {
                    "name": "lang",
                    "type": "SELECT",
                    "description": "The language of the text to be annotated. Possible values: de , en , es , fr , it , pt , auto",
                    "default": ""
                },
                {
                    "name": "minConfidence",
                    "type": "STRING",
                    "description": "Confidence is a numeric estimation of the quality of the annotation, which ranges between 0 and 1.",
                    "default": ""
                },
                {
                    "name": "socialHashtag",
                    "type": "BOOLEAN",
                    "description": "With this parameter you enable special mention parsing to correctly analyze tweets and facebook posts.",
                    "default": ""
                },
                {
                    "name": "customSpots",
                    "type": "STRING",
                    "description": "Enable specific user-defined spots to be used when annotating the text. You can define your own spots or use someone else's ones if they shared the spots-ID with you.",
                    "default": ""
                },
                {
                    "name": "country",
                    "type": "STRING",
                    "description": "This parameter specifies the country which we assume VAT and telephone numbers to be coming from.  Possible values: AD, AE, AM, AO, AQ, AR, AU, BB, BR, BS, BY, CA, CH, CL, CN, CX, DE, FR, GB, HU, IT, JP, KR, MX, NZ, PG, PL, RE, SE, SG, US, YT, ZW",
                    "default": ""
                },
                {
                    "name": "epsilon",
                    "type": "STRING",
                    "description": "This parameter defines whether the Entity Extraction API should rely more on the context or favor more common topics to discover entities. Using an higher value favors more common topics, this may lead to better results when processing tweets or other fragmented inputs where the context is not always reliable. Accepted values: 0.0 .. 0.5",
                    "default": ""
                },
                {
                    "name": "include",
                    "type": "LIST",
                    "description": "Returns more information on annotated entities. Array: types, categories, abstract, image, lod, alternate_labels",
                    "default": ""
                },
                {
                    "name": "extraType",
                    "type": "LIST",
                    "description": "Returns more information on annotated entities. Possible values: phone, vat",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/extractEntity\"\nquerystring = {\"minLength\": \"\", \"sourceType\": \"\", \"lang\": \"\", \"minConfidence\": \"\", \"accessToken\": \"\", \"socialHashtag\": \"\", \"source\": \"\", \"customSpots\": \"\", \"country\": \"\", \"epsilon\": \"\", \"include\": \"\", \"extraType\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/extractEntity\"\nquerystring = {\"minLength\": \"\", \"sourceType\": \"\", \"lang\": \"\", \"minConfidence\": \"\", \"accessToken\": \"\", \"socialHashtag\": \"\", \"source\": \"\", \"customSpots\": \"\", \"country\": \"\", \"epsilon\": \"\", \"include\": \"\", \"extraType\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getModels",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/getModels",
            "description": "List all your models",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/getModels\"\nquerystring = {\"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/getModels\"\nquerystring = {\"accessToken\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getSingleModel",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/getSingleModel",
            "description": "Read a specific model",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                },
                {
                    "name": "modelId",
                    "type": "STRING",
                    "description": "Id of existing model",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/getSingleModel\"\nquerystring = {\"accessToken\": \"\", \"modelId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/getSingleModel\"\nquerystring = {\"accessToken\": \"\", \"modelId\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "getTextSimilarity",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/getTextSimilarity",
            "description": "Compare two sentences and get a score of their semantic similarity.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "source2",
                    "type": "STRING",
                    "description": "request input",
                    "default": ""
                },
                {
                    "name": "sourceType",
                    "type": "SELECT",
                    "description": "Type of the input: text,url,html,html_fragment",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                },
                {
                    "name": "source1",
                    "type": "STRING",
                    "description": "request input",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "bow",
                    "type": "STRING",
                    "description": "The Text Similarity API normally uses a semantic algorithm for computing similarity of texts. It is possible, however, to use a more classical syntactic algorithm where the semantic one fails. This can be done with this parameter. Possible values: always , one_empty , both_empty , never",
                    "default": ""
                },
                {
                    "name": "lang",
                    "type": "SELECT",
                    "description": "The language of the text to be annotated. Possible values: de , en , es , fr , it , pt , auto",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/getTextSimilarity\"\nquerystring = {\"bow\": \"\", \"source2\": \"\", \"sourceType\": \"\", \"accessToken\": \"\", \"lang\": \"\", \"source1\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/getTextSimilarity\"\nquerystring = {\"bow\": \"\", \"source2\": \"\", \"sourceType\": \"\", \"accessToken\": \"\", \"lang\": \"\", \"source1\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "identifyTextSentiments",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/identifyTextSentiments",
            "description": "This API analyses a text and tells whether the expressed opinion is positive, negative, or neutral. Given a short sentence, it returns a label representing the identified sentiment, along with a numeric score ranging from strongly positive (1.0) to extremely negative (-1.0).",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "sourceType",
                    "type": "SELECT",
                    "description": "Type of the input: text,url,html,html_fragment",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                },
                {
                    "name": "source",
                    "type": "STRING",
                    "description": "Request input",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "lang",
                    "type": "SELECT",
                    "description": "Possible values: en, it, auto",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/identifyTextSentiments\"\nquerystring = {\"sourceType\": \"\", \"lang\": \"\", \"accessToken\": \"\", \"source\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/identifyTextSentiments\"\nquerystring = {\"sourceType\": \"\", \"lang\": \"\", \"accessToken\": \"\", \"source\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "searchWikipages",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/searchWikipages",
            "description": "Looking for Wikipedia pages but don't know their exact title? We can help you to search for the page you want.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "lang",
                    "type": "SELECT",
                    "description": "Possible values: en, de, es, fr, it, pt",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                },
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "Request input",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "query",
                    "type": "STRING",
                    "description": "With this parameter you can choose the behaviour of the search: full, prefix",
                    "default": ""
                },
                {
                    "name": "limit",
                    "type": "NUMBER",
                    "description": "Restricts the output to the first N results.",
                    "default": ""
                },
                {
                    "name": "include",
                    "type": "LIST",
                    "description": "Returns more information on annotated entities. Array: types, categories, abstract, image, lod, alternate_labels",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/searchWikipages\"\nquerystring = {\"lang\": \"\", \"accessToken\": \"\", \"query\": \"\", \"limit\": \"\", \"text\": \"\", \"include\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/searchWikipages\"\nquerystring = {\"lang\": \"\", \"accessToken\": \"\", \"query\": \"\", \"limit\": \"\", \"text\": \"\", \"include\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "updateModel",
            "url": "https://Dandelionstefan-skliarovV1.p.rapidapi.com/updateModel",
            "description": "Update an existing model",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "modelId",
                    "type": "STRING",
                    "description": "Id of existing model",
                    "default": ""
                },
                {
                    "name": "accessToken",
                    "type": "CREDENTIALS",
                    "description": "Access token obtained from Dandelion",
                    "default": ""
                },
                {
                    "name": "model",
                    "type": "JSON",
                    "description": "Formed model. Example: {\"lang\": \"en\", \"description\": \"basic\", \"categories\": [{\"name\": \"sport\", \"topics\": {\"http://en.wikipedia.org/wiki/Sport\": 2}}] }",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/updateModel\"\nquerystring = {\"modelId\": \"\", \"accessToken\": \"\", \"model\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://Dandelionstefan-skliarovV1.p.rapidapi.com/updateModel\"\nquerystring = {\"modelId\": \"\", \"accessToken\": \"\", \"model\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"Dandelionstefan-skliarovV1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        }
    ]
}