{
    "product_id": "58c7f36de4b0a29ec14ce710",
    "tool_description": "Get geo, age, sex, ethnicity, audience languages, popular posts of 346,956,505 Instagram account. Get 10 free reports http://deep.social/register",
    "home_url": "https://rapidapi.com/deepsocial/api/deep-social/",
    "name": "Deep Social",
    "title": "Deep Social",
    "pricing": "FREEMIUM",
    "tool_name": "Deep Social",
    "score": {
        "avgServiceLevel": 0,
        "avgLatency": 42,
        "avgSuccessRate": 0,
        "popularityScore": 0,
        "__typename": "Score"
    },
    "host": "deepsocial.p.rapidapi.com",
    "api_list": [
        {
            "name": "Save users (only for Data Export plan)",
            "url": "https://deepsocial.p.rapidapi.com/v1/accounts/save-known",
            "description": "Influencers that were previously saved can be excluded from search results using filter[known] filter. Can be used to export unique instagram accounts to boost your influencer base. Available only with Data Export plan.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "api_token",
                    "type": "STRING",
                    "description": "To buy API Token register on http://deep.social/ and check our prices here http://deep.social/prices",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1/accounts/save-known\"\nquerystring = {\"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1/accounts/save-known\"\nquerystring = {\"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Show",
            "url": "https://deepsocial.p.rapidapi.com/v1.1/accounts/show",
            "description": "",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "searchResultIds[0]",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "api_token",
                    "type": "STRING",
                    "description": "To buy API Token register on http://deep.social/ and check our prices here http://deep.social/prices",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "searchResultIds[1]",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1.1/accounts/show\"\nquerystring = {\"searchResultIds[0]\": \"\", \"searchResultIds[1]\": \"\", \"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1.1/accounts/show\"\nquerystring = {\"searchResultIds[0]\": \"\", \"searchResultIds[1]\": \"\", \"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Search",
            "url": "https://deepsocial.p.rapidapi.com/v1.1/accounts/search",
            "description": "Search influencers using filters. To request access contact sales info@deep.social",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "api_token",
                    "type": "STRING",
                    "description": "To buy API Token register on http://deep.social/ and check our prices here http://deep.social/prices",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "filter[audience_age][0][weight]",
                    "type": "NUMBER",
                    "description": "Sets precision for the 'filter[audience_age][0][code]' filter, can be from 0 to 1, default value is 0.25. If you use multi-filter than be sure to match indexes of paired filters. For example 'filter[audience_age][0][weight]' have index 0, 'filter[audience_age][453][weight]' have index 453",
                    "default": "0.1"
                },
                {
                    "name": "filter[audience_gender][code]",
                    "type": "STRING",
                    "description": "Filter influencers by audience gender (possible values MALE or FEMALE). Use with \"filter[audience_gender][weight]\" - precision, can be from 0 to 1, default value is 0.5",
                    "default": "MALE"
                },
                {
                    "name": "filter[audience_gender][weight]",
                    "type": "NUMBER",
                    "description": "Sets precision for the 'filter[audience_gender][code]' filter, can be from 0 to 1, default value is 0.5",
                    "default": "0.1"
                },
                {
                    "name": "filter[audience_geo][0][id]",
                    "type": "NUMBER",
                    "description": "Multi-filter (OR) to filter influencers by audience GEO. To get GEO ID of specific region use 'GEO dictionary' endpoint. Use with \"filter[audience_geo][0][weight]\" - precision, can be from 0 to 1, default value is 0.05. You can specify several GEO IDs to filter influencers. For example: -d 'filter[audience_geo][1][id]=102269' \\ -d 'filter[audience_geo][1][weight]=0.1' \\ -d 'filter[audience_geo][0][id]=65606' \\ -d 'filter[audience_geo][0][weight]=0.1' \\ - this query will return influencers that have audience in ANY of this regions",
                    "default": "148838"
                },
                {
                    "name": "filter[audience_geo][0][weight]",
                    "type": "NUMBER",
                    "description": "Sets precision for the 'filter[audience_geo][0][id]' filter, can be from 0 to 1, default value is 0.05. If you use multi-filter than be sure to match indexes of paired filters. For example 'filter[audience_geo][0][weight]' have index 0, 'filter[audience_geo][453][weight]' have index 453",
                    "default": "0.1"
                },
                {
                    "name": "filter[audience_lang][code]",
                    "type": "STRING",
                    "description": "Filter influencers by audeence language (to get language code use 'Languages dictionary' endpoint). Use with \"filter[audience_lang][weight]\" - precision, can be from 0 to 1, default value is 0.2",
                    "default": "en"
                },
                {
                    "name": "filter[audience_lang][weight]",
                    "type": "NUMBER",
                    "description": "Sets precision for the 'filter[audience_lang][code]' filter, can be from 0 to 1, default value is 0.2",
                    "default": "0.1"
                },
                {
                    "name": "filter[audience_race][code]",
                    "type": "STRING",
                    "description": "Filter influencers by audience skin tone (possible values: Black, Asian or White). Use with \"filter[audience_race][weight]\" - precision, can be from 0 to 1, default value is 0.3",
                    "default": "White"
                },
                {
                    "name": "filter[audience_race][weight]",
                    "type": "NUMBER",
                    "description": "Sets precision for the 'filter[audience_race][code]' filter, can be from 0 to 1, default value is 0.3",
                    "default": "0.1"
                },
                {
                    "name": "filter[engagements][left_number]",
                    "type": "NUMBER",
                    "description": "Filter influencers that have likes of comments greater than specified number",
                    "default": "100"
                },
                {
                    "name": "filter[engagements][right_number]",
                    "type": "NUMBER",
                    "description": "Filter influencers that have likes of comments less than specified number",
                    "default": "100000"
                },
                {
                    "name": "filter[followers][left_number]",
                    "type": "NUMBER",
                    "description": "Filter influencers that have followers greater than specified number",
                    "default": "5000"
                },
                {
                    "name": "filter[followers][right_number]",
                    "type": "NUMBER",
                    "description": "Filter influencers that have followers less than specified number",
                    "default": "1000000"
                },
                {
                    "name": "sort[direction]",
                    "type": "STRING",
                    "description": "Sets sorting, by default it is desc. You can specify custom sorting, possible values: 1, -1, asc, desc.",
                    "default": "desc"
                },
                {
                    "name": "filter[race][code]",
                    "type": "STRING",
                    "description": "Filter influencers by skin tone (possible values: Black, Asian or White).",
                    "default": "White"
                },
                {
                    "name": "filter[gender][code]",
                    "type": "STRING",
                    "description": "Filter influencers by gender (possible values MALE or FEMALE).",
                    "default": "FEMALE"
                },
                {
                    "name": "filter[lang][code]",
                    "type": "STRING",
                    "description": "Filter influencers by their language (to get language code use 'Languages dictionary' endpoint).",
                    "default": "en"
                },
                {
                    "name": "filter[audience_brand][0][id]",
                    "type": "NUMBER",
                    "description": "Multi-filter (OR) to filter influencers by audience brands. To get Brand ID use 'Brands dictionary' endpoint. Use with \"filter[audience_brand][0][weight]\" - precision, can be from 0 to 1, default value is 0.05 You can specify several Brand IDs to filter influencers. For example: -d 'filter[audience_brand][0][id]=65' \\ -d 'filter[audience_brand][0][id]=66' \\ - this query will return influencers that have ANY of this audience brands.",
                    "default": "956"
                },
                {
                    "name": "filter[audience_brand][0][weight]",
                    "type": "NUMBER",
                    "description": "Sets precision for the 'filter[audience_brand][0][id]' filter, can be from 0 to 1, default value is 0.05. If you use multi-filter than be sure to match indexes of paired filters. For example 'filter[audience_brand][0][weight]' have index 0, 'filter[audience_brand][453][weight]' have index 453.",
                    "default": "0.01"
                },
                {
                    "name": "filter[brand_category][0]",
                    "type": "NUMBER",
                    "description": "Multi-filter (AND) to filter influencers by interests. To get Interest ID use 'Interests dictionary' endpoint. You can specify several Interest IDs to filter influencers. For example: -d 'filter[brand_category][0]=2' \\ -d 'filter[brand_category][1]=20' \\ - this query will return influencers that have ALL of this interests.",
                    "default": "74"
                },
                {
                    "name": "paging[skip]",
                    "type": "NUMBER",
                    "description": "",
                    "default": "1"
                },
                {
                    "name": "paging[limit]",
                    "type": "NUMBER",
                    "description": "",
                    "default": "1"
                },
                {
                    "name": "sort[field]",
                    "type": "STRING",
                    "description": "Sort influencers by filter type. Possible values: \"followers\", \"engagements\", \"lang\", \"gender\", \"race\", \"geo\", \"audience_lang\", \"audience_gender\", \"audience_age\", \"audience_race\", \"audience_geo\", \"audience_brand_category\", \"audience_brand\", \"audience_gender_per_age\"",
                    "default": "geo"
                },
                {
                    "name": "filter[audience_age][0][code]",
                    "type": "STRING",
                    "description": "Multi-filter (OR) to filter influencers by audience age. Possible age ranges are: \"13-17\", \"18-24\", \"25-34\", \"35-44\", \"45-64\", \"65-\". Use with \"filter[audience_age][0][weight]\" - precision, can be from 0 to 1, default value is 0.25. You can specify several age ranges to filter influencers. For example: -d 'filter[audience_age][0][code]=13-17' \\ -d 'filter[audience_age][1][code]=18-24' \\ - this query will return influencers that have ANY of this age ranges",
                    "default": "25-34"
                },
                {
                    "name": "filter[age][left_number]",
                    "type": "NUMBER",
                    "description": "Filter influencers that older than specified number of years.",
                    "default": "16"
                },
                {
                    "name": "filter[age][right_number]",
                    "type": "NUMBER",
                    "description": "Filter influencers that younger than specified number of years.",
                    "default": "80"
                },
                {
                    "name": "filter[audience_brand_category][0][id]",
                    "type": "NUMBER",
                    "description": "Multi-filter (AND) to filter influencers by audience interests. To get Interest ID use 'Interests dictionary' endpoint. Use with \"filter[audience_brand_category][0][weight]\" - precision, can be from 0 to 1, default value is 0.1 You can specify several Interest IDs to filter influencers. For example: -d 'filter[audience_brand_category][0][id]=2' \\ -d 'filter[audience_brand_category][1][id]=20' \\ - this query will return influencers that have ALL of this audience interests.",
                    "default": "3"
                },
                {
                    "name": "filter[audience_brand_category][0][weight]",
                    "type": "NUMBER",
                    "description": "Sets precision for the 'filter[audience_brand_category][0][id]' filter, can be from 0 to 1, default value is 0.1. If you use multi-filter than be sure to match indexes of paired filters. For example 'filter[audience_brand_category][0][weight]' have index 0, 'filter[audience_brand_category][453][weight]' have index 453.",
                    "default": "0.01"
                },
                {
                    "name": "filter[brand][0]",
                    "type": "NUMBER",
                    "description": "Multi-filter (OR) to filter influencers by brands. To get Brand ID use 'Brands dictionary' endpoint. You can specify several Brand IDs to filter influencers. For example: -d 'filter[brand][0]=65' \\ -d 'filter[brand][1]=66' \\ - this query will return influencers that have ANY of this Brands.",
                    "default": "338"
                },
                {
                    "name": "filter[geo][0][id]",
                    "type": "NUMBER",
                    "description": "Multi-filter (OR) to filter influencers in specific GEO region. To get GEO ID of specific region use 'GEO dictionary' endpoint. You can specify several GEO IDs to filter influencers. For example: -d 'filter[geo][1][id]=102269' \\ -d 'filter[geo][0][id]=65606' \\ - this query will return influencers that have ANY of this regions.",
                    "default": "148838"
                },
                {
                    "name": "filter[known]",
                    "type": "STRING",
                    "description": "Add this filter with value 'unknown' to hide saved users. To save users use 'save-known' endpoint. Available only with Data Export plan.",
                    "default": ""
                },
                {
                    "name": "filter[has_email]",
                    "type": "STRING",
                    "description": "Add this filter with any value to hide users without contact info. To see contact info in response you need to have Data Export plan.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1.1/accounts/search\"\nquerystring = {\"filter[audience_age][0][weight]\": \"0.1\", \"filter[audience_gender][code]\": \"MALE\", \"filter[audience_gender][weight]\": \"0.1\", \"filter[audience_geo][0][id]\": \"148838\", \"filter[audience_geo][0][weight]\": \"0.1\", \"filter[audience_lang][code]\": \"en\", \"filter[audience_lang][weight]\": \"0.1\", \"filter[audience_race][code]\": \"White\", \"filter[audience_race][weight]\": \"0.1\", \"filter[engagements][left_number]\": \"100\", \"filter[engagements][right_number]\": \"100000\", \"filter[followers][left_number]\": \"5000\", \"filter[followers][right_number]\": \"1000000\", \"sort[direction]\": \"desc\", \"filter[race][code]\": \"White\", \"filter[gender][code]\": \"FEMALE\", \"filter[lang][code]\": \"en\", \"filter[audience_brand][0][id]\": \"956\", \"filter[audience_brand][0][weight]\": \"0.01\", \"filter[brand_category][0]\": \"74\", \"paging[skip]\": \"1\", \"paging[limit]\": \"1\", \"sort[field]\": \"geo\", \"filter[audience_age][0][code]\": \"25-34\", \"filter[age][left_number]\": \"16\", \"filter[age][right_number]\": \"80\", \"filter[audience_brand_category][0][id]\": \"3\", \"filter[audience_brand_category][0][weight]\": \"0.01\", \"filter[brand][0]\": \"338\", \"filter[geo][0][id]\": \"148838\", \"filter[known]\": \"\", \"filter[has_email]\": \"\", \"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1.1/accounts/search\"\nquerystring = {\"filter[audience_age][0][weight]\": \"0.1\", \"filter[audience_gender][code]\": \"MALE\", \"filter[audience_gender][weight]\": \"0.1\", \"filter[audience_geo][0][id]\": \"148838\", \"filter[audience_geo][0][weight]\": \"0.1\", \"filter[audience_lang][code]\": \"en\", \"filter[audience_lang][weight]\": \"0.1\", \"filter[audience_race][code]\": \"White\", \"filter[audience_race][weight]\": \"0.1\", \"filter[engagements][left_number]\": \"100\", \"filter[engagements][right_number]\": \"100000\", \"filter[followers][left_number]\": \"5000\", \"filter[followers][right_number]\": \"1000000\", \"sort[direction]\": \"desc\", \"filter[race][code]\": \"White\", \"filter[gender][code]\": \"FEMALE\", \"filter[lang][code]\": \"en\", \"filter[audience_brand][0][id]\": \"956\", \"filter[audience_brand][0][weight]\": \"0.01\", \"filter[brand_category][0]\": \"74\", \"paging[skip]\": \"1\", \"paging[limit]\": \"1\", \"sort[field]\": \"geo\", \"filter[audience_age][0][code]\": \"25-34\", \"filter[age][left_number]\": \"16\", \"filter[age][right_number]\": \"80\", \"filter[audience_brand_category][0][id]\": \"3\", \"filter[audience_brand_category][0][weight]\": \"0.01\", \"filter[brand][0]\": \"338\", \"filter[geo][0][id]\": \"148838\", \"filter[known]\": \"\", \"filter[has_email]\": \"\", \"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "Sampling",
            "url": "https://deepsocial.p.rapidapi.com/v1/Sampling_request",
            "description": "Get analytics using limited prepaid token. Get 10 free tokens http://deep.social/register",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "Instagram user url or account name or social ID",
                    "default": "beyonce"
                },
                {
                    "name": "api_token",
                    "type": "STRING",
                    "description": "Prepaid token. Get 10 free tokens http://deep.social/register",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1/Sampling_request\"\nquerystring = {\"url\": \"beyonce\", \"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://deepsocial.p.rapidapi.com/v1/Sampling_request\"\nquerystring = {\"url\": \"beyonce\", \"api_token\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"deepsocial.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}