{
    "product_id": "api_a425e5d7-06b2-42b9-9468-9edcab8d4f64",
    "tool_description": "Test swagger 2.0",
    "home_url": "https://rapidapi.com/icohen-nR_2OWZAa/api/test-sawgger-2-0/",
    "name": "Test sawgger 2.0",
    "title": "Test sawgger 2.0",
    "pricing": "FREEMIUM",
    "tool_name": "Test sawgger 2.0",
    "score": null,
    "host": "test-sawgger-2-0.p.rapidapi.com",
    "api_list": [
        {
            "name": "/account_activation/{uuid}",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/account_activation/{uuid}",
            "description": " ",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "uuid",
                    "type": "STRING",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/account_activation/{uuid}\"\nquerystring = {\"uuid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/account_activation/{uuid}\"\nquerystring = {\"uuid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "get": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array"
                    },
                    "errors": {
                        "type": "array"
                    },
                    "results": {
                        "type": "integer"
                    },
                    "response": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "createAccount",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/create_account",
            "description": "**POST data example**: { username: 'test', password: 'yourpassword', email: 'foo@tbar.com', language: 'en' } \\\n**Response example**: { status: 'success', code: 1, message: \"Account registration successful. A message with an activation link to your account was sent to the e-mail address you entered. \" }\n\n  ### Possible response:\n  code        status      message \\\n      1           success   Account registration successful. A message with an activation link to your account was sent to the e-mail address you entered. \\\n      2           success   Account registration successful. \\\n      -1          failed    The account with this name already exist - propose a different name. \\\n      -2          failed    There is already an account associated with the specified e-mail address. \\\n      -3          failed    Sorry, something went wrong. Try again. \\\n      -4          failed    Error in validation email\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/create_account\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/create_account\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "language": {
                        "type": "string",
                        "enum": [
                            "en",
                            "fr",
                            "it",
                            "es",
                            "nl",
                            "pl",
                            "de",
                            "cs",
                            "sk",
                            "hu",
                            "ro",
                            "lt",
                            "et",
                            "ru",
                            "si",
                            "hr"
                        ]
                    },
                    "factory": {
                        "type": "string"
                    }
                },
                "required": [
                    "username",
                    "password",
                    "email",
                    "language"
                ]
            }
        },
        {
            "name": "updateMenuParams",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/menu/MU/ido/{ido}",
            "description": "```\n  Parameter Type Required Description\n  menu_type String yes Options: 'MU', 'MI', 'MS', 'MP'\n  ido Number yes Parameter ido\n\n  type 1 - Valid values\n\n  POST data example:\n  {\n      \"value\": 25\n  }\n  \"value\": current value\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  { error: 'Value out of range' }\n\n  type 2 - Valid values\n\n  POST data example:\n  {\n      \"value\": 100\n  }\n  \"value\": value 1/10\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 3 - Valid values\n\n  POST data example:\n  {\n      \"value\": 30\n  }\n  \"value\": value min: sec\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n  type 4 - Valid values\n\n  POST data example:\n  {\n      \"value\": 60\n  }\n  \"value\": value hour: min\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 5 - Valid values\n\n  POST data example:\n  {\n      \"value\": 15\n  }\n  \"value\": value h: min during the day\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 6 -  Entering code (input)\n\n  POST data example:\n  {\n      \"code\": 1234\n  }\n  \"code\":access code\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'the code is not a number'\n  }\n\n  type 7 - Time mode (temperature + time)\n\n  POST data example:\n  {\n      \"temp\":50,\n      \"time\":100\n  }\n  \"temp\": temperature transfer value\n  \"time\": time transfer value\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 10 - ON / OFF\n\n  POST data example:\n  {\n      \"value\": 1\n  }\n  \"value\": enable(1) or disable(0) the value\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Invalid value for turn on-off'\n  }\n\n  type 11 - Choice 1 out of many\n\n  POST data example:\n  {\n      \"value\": 1\n  }\n  \"value\": Choice 1 of many\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 111 -  Selection of strip mode (or other zone controller)\n\n  POST data example:\n  {\n      \"value\": 1\n  }\n  \"value\":Choice 1 of many\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'wrong number of parameters'\n  }\n\n  type 112 - Selection 1 of many + wiki, message\n\n  POST data example:\n  {\n      \"value\": 1\n  }\n  \"value\":Choice 1 of many\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 12 - Weekly + -\n\n  POST data example:\n  {\n      \"weekly_plus_minus\":{\n      \"values\":[0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15]\n  }\n  }\n  \"values\": [new adjustment values...]\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'wrong number of hours'\n  }\n\n  type 13 - Weekly on / off\n\n  POST data example:\n  {\n      \"weekly_on_off\":{\n          \"values\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      }\n  }\n  \"values\": [values on off...]\n  1 - on\n  0 - off\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'wrong number of parameters'\n  }\n\n  type 15 - Many-of-many selection (ON / OFF set of lamps)\n  POST data example:\n  {\n      \"many_of_many\":[\n      {\n          \"id\":0,\n          \"value\":1\n      },\n      {\n          \"id\":1,\n          \"value\":1\n      }\n      ]\n  }\n  \"id\" - item id\n  \"value\" - selected value\n  1 - checked\n  0 - unchecked\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'too many elements'\n  }\n\n  type 29 - Heating curve offset / slope - Viessmann\n\n  POST data example:\n  {\n      \"slope\":4,\n      \"shift\":4\n  }\n  \"slope\": value slope\n  \"shift\": value shift\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 30 - Heat curve\n\n  POST data example:\n  {\n      \"heating_curve\":[\n      {\n          \"id\":0,\n          \"value\":33\n      },\n      {\n          \"id\":1,\n          \"value\":33\n      },{\n          \"id\":2,\n          \"value\":33\n      },\n      {\n          \"id\":3,\n          \"value\":33\n      }\n      ]\n  }\n  \"id\":element id\n  \"value\":values after editing\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  { error: 'number of items out of range' }\n  { error: 'Value out of range' }\n\n  type 31 - Heating curve slope / offset\n\n  POST data example:\n  {\n      \"slope\":4,\n      \"shift\":4\n  }\n  \"slope\": value slope\n  \"shift\": value shift\n\n  error example:\n  {\n      error: 'Value out of range'\n  }\n\n  type 100 - Universal schedule\n\n  POST data example:\n  {\n      \"universal_schedule\":[\n      {\n          \"start\":0,\n          \"end\":15,\n          \"interval\":1,\n          \"temp\": 20\n      },\n      {\n          \"start\":15,\n          \"end\":30,\n          \"interval\":1,\n          \"temp\": 20\n      },\n      {\n          \"start\":30,\n          \"end\":45,\n          \"interval\":1,\n          \"temp\": 20\n      },\n      {\n          \"start\":45,\n          \"end\":60,\n          \"interval\":1,\n          \"temp\": 20\n      },\n      {\n          \"start\":60,\n          \"end\":1439,\n          \"interval\":1,\n          \"temp\": 20\n      }\n      ]\n  }\n  \"start\":start time expressed in seconds ,\n  \"end\":end time in seconds\n  \"interval\":fan power,\n  \"temp\": set temperature\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  { error: 'the time of the first object is not equal to 0' }\n  { error: 'the time of the last object is not equal to 1439' }\n  { error: 'the times are intertwined' }\n  { error: 'time is not quarterly' }\n  { error: 'the number of items is incorrect' }\n\n  type 106 - Universal value editing\n\n  POST data example:\n  {\"value\": 10}\n  \"value\": current value\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  {\n       error: 'Value out of range'\n  }\n\n  type 107 - Date edit\n\n  POST data example:\n  {\n      \"year\":2020,\n      \"month\":3,\n      \"day\": 21\n  }\n  \"year\":year,\n  \"month\":month,\n  \"day\": day\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  { error: 'wrong day data' }\n  { error: 'wrong month data' }\n\n  type 108 - Edition of the range (date from - date to)\n\n  POST data example:\n  {\n      \"date_start\":{\n          \"year\":2019,\n          \"month\":12,\n          \"day\":1\n      },\n      \"date_end\":{\n      \"year\":2019,\n      \"month\":12,\n      \"day\":2\n      }\n  }\n  \"year\":year,\n  \"month\":month,\n  \"day\": day\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  { error: 'the dates overlap' }\n  { error: 'wrong day data' }\n  { error: 'wrong month data' }\n\n  type 109 - Date (various formats and edits supported)\n\n  POST data example:\n  {\n      \"years\":2000,\n      \"month\":4,\n      \"day\":3\n  }\n  \"year\":year,\n  \"month\":month,\n  \"day\": day\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  { error: 'month is out of range' }\n  { error: 'too many elements' }\n\n  type 120 - Viessmann schedule\n\n  POST data example:\n  {\n      \"schedule\":[\n      {\n      \"day\": 0,\n      \"time\":[{\"start\":300,\"end\":400},{\"start\":400,\"end\":500},{\"start\":600,\"end\":700}]\n      },\n      {\n      \"day\": 1,\n      \"time\":[{\"start\":300,\"end\":400},{\"start\":400,\"end\":500},{\"start\":600,\"end\":700}]\n      }\n      ]\n  }\n  day: days of the week\n  0 - Monday\n  1 - Tuesday\n  2 - Wednesday\n  3 - Thursday\n  4 - Friday\n  5 - Saturday\n  6 - Sunday\n  time: schedule work time\n  \"start\":the stated start time\n  \"end\": end time\n\n  Response data example:\n  {\n      \"status\": \"success\",\n      \"data\": \"1\"\n  }\n\n  error example:\n  { error: 'wrong number of time' }\n  { error: 'the times are coming' }\n  { error: 'wrong number of days' }\n",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "menu_type",
                    "type": "STRING",
                    "description": "",
                    "default": "MU"
                },
                {
                    "name": "module_udid",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "user_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "ido",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/menu/MU/ido/{ido}\"\nquerystring = {\"module_udid\": \"\", \"user_id\": \"\", \"ido\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/menu/{menu_type}/ido/{ido}\"\nquerystring = {\"module_udid\": \"\", \"user_id\": \"\", \"ido\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "get": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array"
                    },
                    "errors": {
                        "type": "array"
                    },
                    "results": {
                        "type": "integer"
                    },
                    "response": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "Force Data Synchronization",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/force_data_sync",
            "description": " ",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "user_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "module_udid",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/force_data_sync\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/force_data_sync\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "get": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array"
                    },
                    "errors": {
                        "type": "array"
                    },
                    "results": {
                        "type": "integer"
                    },
                    "response": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "registerModule",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/module/registration",
            "description": "``` \nField                       Type        require\n module_name                 String      true\n registration_code           Integer     true\n notification_email          String      false\n additional_information      String      false\n accept_post_policy          Bool        false       \"I agree to the processing of additional data (country, postcode)\"\n country                     String      false\n zip_code                    String      false\n\n POST data example:\n {\n     \"module_name\": \"test\",\n     \"registration_code\": 52312,\n     \"notification_email\": \"foo@bar.com\",\n     \"additional_information\": \"Fitter name / Fitter phone etc.\",\n     \"accept_post_policy\": true,\n     \"country\": \"England\",\n     \"zip_code\": \"LE14\"\n }\n\n Response example:\n { code: 1, status: 'success',  message: \"registration successful\" }\n\n Possible responses:\n code        status      message\n 1           'success'   'registration successful'\n -1          'fail'      'invalid register code'\n -2          'fail'      'register code error'``\n",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "user_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/module/registration\"\nquerystring = {\"user_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/module/registration\"\nquerystring = {\"user_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "modeId": {
                        "type": "integer",
                        "description": "id of the mode object (nak\u0142adka) connected to the zone"
                    },
                    "schedule": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "id of the global schedule connected to specified module"
                            },
                            "index": {
                                "type": "number",
                                "description": "index of the global schedule (0 to 4)"
                            },
                            "p0Days": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "array of days turned on/off for program 1(1 - on, 0 - off). Values must be opposites of p1Days."
                            },
                            "p0Intervals": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "group of intervals for program 1. Maximum 3 intervals (can be empty) - each interval requires 3 properties: start, stop and temp \n - start/stop define the starting/stopping times for the interval \n - start/stop represent time in minutes. Min 0, Max 1440 \n - temp defines the temperature for the interval (x10). Min 50 max 350. eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius"
                            },
                            "p0SetbackTemp": {
                                "type": "integer",
                                "description": "temperature for anytime not covered by p0Intervals. Min 50 max 350."
                            },
                            "p1Days": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "array of days turned on/off for program 2(1 - on, 0 - off). Values must be opposites of"
                            },
                            "p1Intervals": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                },
                                "description": "group of intervals for program 2. Maximum 3 intervals (can be empty)\n                                  - each interval requires 3 properties: start, stop and temp\n                                  - start/stop define the starting/stopping times for the interval\n                                  - start/stop represent time in minutes. Min 0, Max 1440\n                                  - temp defines the temperature for the interval (x10). Min 50 max 350.\n                                  eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius\n"
                            },
                            "p1SetbackTemp": {
                                "type": "integer",
                                "description": "temperature for any time not covered by p1Intervals. Min 50 max 350"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "zoneChange",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/zones",
            "description": "Change zone parameters (L-7, L-8, WiFi 8S, ST-8S WiFi) \\n\nSet constant temperature:\n\n1. **Set constant temperature**:  \\\nPOST data example:\n   {\n    \"mode\": {\n        \"id\": 210,\n        \"parentId\": 101,\n        \"mode\": \"constantTemp\",\n        \"constTempTime\": 0,\n        \"setTemperature\": 220,\n        \"scheduleIndex\": 0\n    }\n}\n\n2. **Set constant temperature with time limitation**: \\\nPOST data example:{\n    \"mode\": {\n        \"id\": 210,\n        \"parentId\": 101,\n        \"mode\": \"timeLimit\",\n        \"constTempTime\": 60,\n        \"setTemperature\": 220,\n        \"scheduleIndex\": 0\n    }\n}\n3. **Turn on zone**: \\\nPOST data example:\n{\n    \"zone\": {\n        \"id\": 101,\n        \"zoneState\": \"zoneOn\"\n    }\n}\n4. **Turn off zone**: \\\nPOST data example:\n{\n    \"zone\": {\n        \"id\": 101,\n        \"zoneState\": \"zoneOff\"\n    }\n}\n",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "user_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "module_udid",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/zones\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/zones\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "constTempTime": {
                        "type": "integer"
                    },
                    "setTemperature": {
                        "type": "integer"
                    },
                    "scheduleIndex": {
                        "type": "integer"
                    }
                }
            }
        },
        {
            "name": "/authentication",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/authentication",
            "description": "### Response data example: \n ``{authenticated: true, user_id: 240471648, token: .eyJ1c2VybmFtZSI6InRlc3QiLCJ1c2VyX2lkIjoyNDA0NzE2NDgsImlhdCI6MTUyNjk5ODQxOX0.opQW1yTczP7vuiIkI1Skuy8yJ8eGhYrlYUKmll9P88M}\n ``\n",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/authentication\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/authentication\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "zoneSchedulesChange",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/zones/{zone_id}/local_schedule",
            "description": "### POST data example: \n```\n{ \n  modeId = 100 \n  schedule = { \n          id: 150, \n          index: -1, \n          p0Days: [\"1\", \"1\", \"1\", \"1\", \"1\", \"0\", \"0\"], \n          p0Intervals: [{start:0, stop: 480, temp: 180}, {start: 480, stop: 960, temp: 240}],\n          p0SetbackTemp: 200,\n          p1Days: [\"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\"],\n          p1Intervals: ddd,\n          p1SetbackTemp: 210\n      }\n }\n\nmodeId(integer):                                   id of the mode object (nak\u0142adka)  connected to the zone \nschedule(object)    id(integer):                   id of the global schedule connected to specified module \n                    index(integer):                index of the global schedule (0 to 4)\n                    p0Days(array of strings):      array of days turned on/off for program 1(1 - on, 0 - off). Values must be opposites of p1Days.\n                    p0Intervals(array of objects): group of intervals for program 1. Maximum 3 intervals (can be empty)\n                                                    - each interval requires 3 properties: start, stop and temp\n                                                    - start/stop define the starting/stopping times for the interval\n                                                    - start/stop represent time in minutes. Min 0, Max 1440\n                                                    - temp defines the temperature for the interval (x10). Min 50 max 350.\n                                                    eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius\n                    p0SetbackTemp(integer):         temperature for anytime not covered by p0Intervals. Min 50 max 350.\n                    p1Days(array of strings):       array of days turned on/off for program 2(1 - on, 0 - off). Values must be opposites of p0Days.\n                    p1Intervals(array of objects):  group of intervals for program 2. Maximum 3 intervals (can be empty)\n                                                    - each interval requires 3 properties: start, stop and temp\n                                                    - start/stop define the starting/stopping times for the interval\n                                                    - start/stop represent time in minutes. Min 0, Max 1440\n                                                    - temp defines the temperature for the interval (x10). Min 50 max 350.\n                                                    eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius\n                    p1SetbackTemp(integer):         temperature for any time not covered by p1Intervals. Min 50 max 350.\nError response\n\nEach error response returns data in the following format:\n{\"error\": \"code_for_received_error\", \"error_description\": \"Some text describing the error\"}\n\n\n     invalid_json\n          General error regarding incorrectly sent data.\nSchedule property errors:\n\n      missing_schedule_property\n          The request is missing the required 'schedule' property.\n\n      invalid_schedule_property\n          The request is missing required properties on the schedule property. 'schedule' must have the following\n          properties: id, index, p0Days, p0Intervals, p0SetbackTemp, p1Days, p1Intervals, p1SetbackTemp.\n\n      Interval errors:\n\n          invalid_number_of_interval_elements\n              Invalid amount of elements in 'p0Intervals' or 'p1Intervals'. The maximum allowed amount is 3.\n\n          missing_interval_property\n              Element(s) of 'p0Intervals' or 'p1Intervals' are missing interval properties. Each interval must have the\n              following properties: start, stop, temp.\n\n          invalid_interval_start_out_of_range\n          invalid_interval_stop_out_of_range\n              Element(s) of 'p0Intervals' or 'p1Intervals' have an invalid 'start' or 'stop' property. 'start' and 'stop'\n              must be between 0 and 1440.\n\n          invalid_interval_start_time_not_increment_of_15\n          invalid_interval_stop_time_not_increment_of_15\n              Element(s) of 'p0Intervals' or 'p1Intervals' have an invalid 'start' or 'stop' property. 'start' and 'stop'\n              must be an increment of 15.\n\n      invalid_interval_stop_greater_than_or_equal_to_start\n          Element(s) of 'p0Intervals' or 'p1Intervals' start property must be less than (and not equal) to the stop\n          property.\n\n      invalid_interval_temp\n          Element(s) of 'p0Intervals' or 'p1Intervals' have and invalid temp property. Temp must be between 50\n          and 350 inclusive.\n\n      invalid_interval_overlap\n          Element(s) of 'p0Intervals' or 'p1Intervals' start/stop times overlap each other. An element's 'start' must be\n          greater than or equal to the previous element's 'stop'.\n\n\n  Day errors \n        invalid_p0days_length\n        invalid_p1days_length\n            The request has an invalid 'p0Days' or 'p1Days' property. Its length must always be 7 (the amount of days\n            in a week).\n\n        invalid_p0day_element\n        invalid_p1day_element\n            The request has an invalid 'p0Days' or 'p1Days' property. Each element must be either \"0\" or \"1\".\n\n        invalid_pday_equal\n            An element at 'n' in 'p0Days' has the same value as 'p1Days' at index 'n'. Elements at the same index must\n            not have the same value.\n\n    invalid_p0setback_temp\n    invalid_p1setback_temp\n            The request has an invalid 'p0SetbackTemp' or 'p1SetbackTemp' property. It's value must be between 50\n            and 350 inclusive.\n\n    invalid_local_schedule_index\n        Invalid 'index' property on 'schedule' property. The index must be between -40 and -1 inclusive.\n\n    invalid_local_schedule_property\n        The request is missing the required 'modeId' property.\n\n    invalid_local_schedule_zone_not_in_module\n        The 'zoneId' parameter has an id that does not belong to the specified module.\n\n    invalid_local_schedule_doesnt_belong_to_zone\n        The request's schedule has an id that does not belong to the zone.\n\n    invalid_local_schedule_index_mismatch\n        The request's schedule has an index which doesn't match it's id.\n\n    invalid_local_schedule_mode_not_in_zone\n        The request's modeId does not belong to it's zone.          \n\n   Type errors\n\n           invalid_schedule_type\n                Wrong type for schedule property. Schedule must be an object.\n\n            invalid_pinterval_type\n                Wrong type for p0Interval or p1Interval property. p0Interval and p1Interval must be arrays of objects.\n\n            invalid_interval_type\n                Wrong type for interval property. Interval must be a object.\n\n            invalid_interval_start_type\n                Wrong type for interval start property. Start must be an integer.\n\n            invalid_interval_stop_type\n                Wrong type for interval stop property. Stop must be an integer.\n\n            invalid_interval_temp_type\n                Wrong type for interval temp property. Temp must be an integer.\n\n            invalid_p0days_type\n                Wrong type for p0Days. p0Days must be an array of strings.\n\n            invalid_p1days_type\n                Wrong type for p1Days. p1Days must be an array of strings.\n\n            invalid_p0day_element_type\n                Wrong type for p0Day element. p0Day elements must be strings.\n\n            invalid_p1day_element_type\n                Wrong type for p1Day element. p1Day elements must be strings.\n\n            invalid_p0setback_temp_type\n                Wrong type for p0SetbackType. p0SetbackType must be an integer.\n\n            invalid_p1setback_temp_type\n                Wrong type for p1SetbackType. p1SetbackType must be an integer.\n\n            invalid_local_schedule_index_type\n                Wrong type for index. Index must be an integer.\n\n            invalid_local_schedule_mode_id_type\n                Wrong type for modeId. modeId must be an integer.\n",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "user_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "module_udid",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "zone_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/zones/{zone_id}/local_schedule\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\", \"zone_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/zones/{zone_id}/local_schedule\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\", \"zone_id\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "modeId": {
                        "type": "integer",
                        "description": "id of the mode object (nak\u0142adka) connected to the zone"
                    },
                    "schedule": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "id of the global schedule connected to specified module"
                            },
                            "index": {
                                "type": "number",
                                "description": "index of the global schedule (0 to 4)"
                            },
                            "p0Days": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "array of days turned on/off for program 1(1 - on, 0 - off). Values must be opposites of p1Days."
                            },
                            "p0Intervals": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "group of intervals for program 1. Maximum 3 intervals (can be empty) - each interval requires 3 properties: start, stop and temp \n - start/stop define the starting/stopping times for the interval \n - start/stop represent time in minutes. Min 0, Max 1440 \n - temp defines the temperature for the interval (x10). Min 50 max 350. eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius"
                            },
                            "p0SetbackTemp": {
                                "type": "integer",
                                "description": "temperature for anytime not covered by p0Intervals. Min 50 max 350."
                            },
                            "p1Days": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "array of days turned on/off for program 2(1 - on, 0 - off). Values must be opposites of"
                            },
                            "p1Intervals": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                },
                                "description": "group of intervals for program 2. Maximum 3 intervals (can be empty)\n                                  - each interval requires 3 properties: start, stop and temp\n                                  - start/stop define the starting/stopping times for the interval\n                                  - start/stop represent time in minutes. Min 0, Max 1440\n                                  - temp defines the temperature for the interval (x10). Min 50 max 350.\n                                  eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius\n"
                            },
                            "p1SetbackTemp": {
                                "type": "integer",
                                "description": "temperature for any time not covered by p1Intervals. Min 50 max 350"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "zoneGlobalSchedulesChange",
            "url": "https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/global_schedule",
            "description": "**setInZones(array of objects)**:                      array of zoneIds to be set with their corresponding modeIds. This cannot be empty. Zone(s)\n                                           must belong to the module specified by {module_udid} \\\n**scheduleName(string)**:                              new name for the global schedule. Only required if changing the name. Max length 40. \n### schedule(object) ###   \n    id(integer):                   id of the global schedule connected to specified module \n    index(integer):                index of the global schedule (0 to 4) \\\n    p0Days(array of strings):      array of days turned on/off for program 1(1 - on, 0 - off). Values must be opposites of p1Days. ervals(array of objects): group of intervals for program 1. Maximum 3 intervals (can be empty) \n                                    - each interval requires 3 properties: start, stop and temp \n                                    - start/stop define the starting/stopping times for the interval \n                                    - start/stop represent time in minutes. Min 0, Max 1440 \n                                    - temp defines the temperature for the interval (x10). Min 50 max 350. \n                                    eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius \\\n    p0SetbackTemp(integer):         temperature for anytime not covered by p0Intervals. Min 50 max 350.\n    p1Days(array of strings):       array of days turned on/off for program 2(1 - on, 0 - off). Values must be opposites of p0Days.\n    p1Intervals(array of objects):  group of intervals for program 2. Maximum 3 intervals (can be empty)\n                                    - each interval requires 3 properties: start, stop and temp\n                                    - start/stop define the starting/stopping times for the interval\n                                    - start/stop represent time in minutes. Min 0, Max 1440\n                                    - temp defines the temperature for the interval (x10). Min 50 max 350.\n                                    eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius\n    p1SetbackTemp(integer):         temperature for any time not covered by p1Intervals. Min 50 max 350.\n\n## Error response ##\nEach error response returns data in the following format: \\\n{\"error\": \"code_for_received_error\", \"error_description\": \"Some text describing the error\"}\n\n**Schedule property errors**:\n\n    missing_schedule_property\n        The request is missing the required 'schedule' property.\n\n    invalid_schedule_property\n        The request is missing required properties on the schedule property. 'schedule' must have the following\n        properties: id, index, p0Days, p0Intervals, p0SetbackTemp, p1Days, p1Intervals, p1SetbackTemp.\n\n**Interval errors**:\n\n    invalid_number_of_interval_elements\n        Invalid amount of elements in 'p0Intervals' or 'p1Intervals'. The maximum allowed amount is 4.\n\n    missing_interval_property\n        Element(s) of 'p0Intervals' or 'p1Intervals' are missing interval properties. Each interval must have the\n        following properties: start, stop, temp.\n\n    invalid_interval_start_out_of_range\n    invalid_interval_stop_out_of_range\n        Element(s) of 'p0Intervals' or 'p1Intervals' have an invalid 'start' or 'stop' property. 'start' and 'stop'\n        must be between 0 and 1440.\n\n    invalid_interval_start_time_not_increment_of_15\n    invalid_interval_stop_time_not_increment_of_15\n        Element(s) of 'p0Intervals' or 'p1Intervals' have an invalid 'start' or 'stop' property. 'start' and 'stop'\n        must be an increment of 15.\n\n    invalid_interval_stop_greater_than_or_equal_to_start\n        Element(s) of 'p0Intervals' or 'p1Intervals' start property must be less than (and not equal) to the stop\n        property.\n\n    invalid_interval_temp\n        Element(s) of 'p0Intervals' or 'p1Intervals' have and invalid temp property. Temp must be between 50\n        and 350 inclusive.\n\n    invalid_interval_overlap\n        Element(s) of 'p0Intervals' or 'p1Intervals' start/stop times overlap each other. An element's 'start' must be\n        greater than or equal to the previous element's 'stop'.\n\n**Day errors**:\n\n    invalid_p0days_length\n    invalid_p1days_length\n        The request has an invalid 'p0Days' or 'p1Days' property. Its length must always be 7 (the amount of days\n        in a week).\n\n    invalid_p0day_element\n    invalid_p1day_element\n        The request has an invalid 'p0Days' or 'p1Days' property. Each element must be either \"0\" or \"1\".\n\n    invalid_pday_equal\n        An element at 'n' in 'p0Days' has the same value as 'p1Days' at index 'n'. Elements at the same index must\n        not have the same value.\n\n    invalid_p0setback_temp\n    invalid_p1setback_temp\n            The request has an invalid 'p0SetbackTemp' or 'p1SetbackTemp' property. It's value must be between 50\n            and 350 inclusive.        \n\n    invalid_global_schedule_index\n          Invalid 'index' property on 'schedule' property. The index must be between 0 and 4 inclusive.\n\n     invalid_global_schedule_property\n          The request is missing required properties. In addition to 'schedule', it must have 'setInZones' and\n          'scheduleName' properties.\n\n    invalid_global_schedule_not_in_module\n        The 'schedule' property has an id that does not belong to the specified module.\n\n    invalid_global_schedule_invalid_set_in_zones_length\n        The request's 'setInZones' property has an invalid length. 'setInZones' must not be empty.\n\n    invalid_global_schedule_invalid_set_in_zones_properties\n        The request's 'setInZones' property has invalid element(s). Each element must have the required properties\n        'zoneId' and 'modeId'.\n\n    invalid_global_schedule_invalid_set_in_zones_not_in_module\n        The request's 'setInZones' property has invalid element(s). One or more of the elements have a zoneId that does\n        not belong to the specified module.\n\n    invalid_global_schedule_index_mismatch\n        The request's schedule has an index which doesn't match it's id.\n\n    invalid_global_schedule_invalid_schedule_name_length\n        The request's scheduleName has an invalid length. It's length must not be more than 40.\n\n    invalid_global_schedule_invalid_set_in_zones_mode_not_in_zone\n        The request's 'setInZones' property has a modeId which doesn't belong to the zone.\n\n### Type errors:\n    invalid_schedule_type\n        Wrong type for schedule property. Schedule must be an object.\n\n    invalid_pinterval_type\n        Wrong type for p0Interval or p1Interval property. p0Interval and p1Interval must be arrays of objects.\n\n    invalid_interval_type\n        Wrong type for interval property. Interval must be a object.\n\n    invalid_interval_start_type\n        Wrong type for interval start property. Start must be an integer.\n\n    invalid_interval_stop_type\n        Wrong type for interval stop property. Stop must be an integer.\n\n    invalid_interval_temp_type\n        Wrong type for interval temp property. Temp must be an integer.\n\n    invalid_p0days_type\n        Wrong type for p0Days. p0Days must be an array of strings.\n\n    invalid_p1days_type\n        Wrong type for p1Days. p1Days must be an array of strings.\n\n    invalid_p0day_element_type\n        Wrong type for p0Day element. p0Day elements must be strings.\n\n    invalid_p1day_element_type\n        Wrong type for p1Day element. p1Day elements must be strings.\n\n    invalid_p0setback_temp_type\n        Wrong type for p0SetbackType. p0SetbackType must be an integer.\n\n    invalid_p1setback_temp_type\n        Wrong type for p1SetbackType. p1SetbackType must be an integer.\n\n    invalid_global_schedule_index_type\n        Wrong type for index. Index must be an integer.\n\n    invalid_global_schedule_invalid_schedule_name_type\n        Wrong type for scheduleName. scheduleName must be a string.\n\n    invalid_global_schedule_invalid_set_in_zones_type\n        Wrong type for setInZones. setInZones must be an array of objects.\n\n    invalid_global_schedule_invalid_set_in_zones_element_type\n        Wrong type for setInZones element. setInZones elements must be objects.\n\n    invalid_global_schedule_invalid_set_in_zones_zone_type\n        Wrong type for setInZones element zoneId. setInZones elements zoneIds must be integers.\n\n    invalid_global_schedule_invalid_set_in_zones_mode_type\n        Wrong type for setInZones element modeId. setInZones elements modeIds must be integers.\n",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "user_id",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "module_udid",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/global_schedule\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://test-sawgger-2-0.p.rapidapi.com/users/{user_id}/modules/{module_udid}/global_schedule\"\nquerystring = {\"user_id\": \"\", \"module_udid\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"test-sawgger-2-0.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "modeId": {
                        "type": "integer",
                        "description": "id of the mode object (nak\u0142adka) connected to the zone"
                    },
                    "schedule": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "id of the global schedule connected to specified module"
                            },
                            "index": {
                                "type": "number",
                                "description": "index of the global schedule (0 to 4)"
                            },
                            "p0Days": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "array of days turned on/off for program 1(1 - on, 0 - off). Values must be opposites of p1Days."
                            },
                            "p0Intervals": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "group of intervals for program 1. Maximum 3 intervals (can be empty) - each interval requires 3 properties: start, stop and temp \n - start/stop define the starting/stopping times for the interval \n - start/stop represent time in minutes. Min 0, Max 1440 \n - temp defines the temperature for the interval (x10). Min 50 max 350. eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius"
                            },
                            "p0SetbackTemp": {
                                "type": "integer",
                                "description": "temperature for anytime not covered by p0Intervals. Min 50 max 350."
                            },
                            "p1Days": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "array of days turned on/off for program 2(1 - on, 0 - off). Values must be opposites of"
                            },
                            "p1Intervals": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                },
                                "description": "group of intervals for program 2. Maximum 3 intervals (can be empty)\n                                  - each interval requires 3 properties: start, stop and temp\n                                  - start/stop define the starting/stopping times for the interval\n                                  - start/stop represent time in minutes. Min 0, Max 1440\n                                  - temp defines the temperature for the interval (x10). Min 50 max 350.\n                                  eg. {start: 480, stop: 960, temp 200} from 8:00 - 16:00 temperature will be 20 degrees celsius\n"
                            },
                            "p1SetbackTemp": {
                                "type": "integer",
                                "description": "temperature for any time not covered by p1Intervals. Min 50 max 350"
                            }
                        }
                    }
                }
            }
        }
    ]
}