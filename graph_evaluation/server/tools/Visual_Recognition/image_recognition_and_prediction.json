{
    "product_id": "api_01d7f147-dedf-4267-9f3b-1e7e68860c67",
    "tool_description": "Detect objects on images or predict what is on image.",
    "home_url": "https://rapidapi.com/solomin60/api/image-recognition-and-prediction/",
    "name": "Image recognition and prediction",
    "title": "Image recognition and prediction",
    "pricing": "FREEMIUM",
    "tool_name": "Image recognition and prediction",
    "score": null,
    "host": "image-recognition-and-prediction.p.rapidapi.com",
    "api_list": [
        {
            "name": "image_prediction_base64image_prediction_post",
            "url": "https://image-recognition-and-prediction.p.rapidapi.com/base64image_prediction",
            "description": "This endpoint takes an image and return 10 predictions what is on image.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://image-recognition-and-prediction.p.rapidapi.com/base64image_prediction\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"image-recognition-and-prediction.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://image-recognition-and-prediction.p.rapidapi.com/base64image_prediction\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"image-recognition-and-prediction.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        },
        {
            "name": "image_recognition_base64image_recognition_post",
            "url": "https://image-recognition-and-prediction.p.rapidapi.com/base64image_recognition",
            "description": "This endpoint receive image as base64 string and can return you JSON with detected objects and base64 image with draw boxes.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "minimum_percentage_probability",
                    "type": "NUMBER",
                    "description": "This query parameter set minimum limit of probability (in percentage) which each object should pass to be added to detections and to recognised image, default value 30. ",
                    "default": "30"
                },
                {
                    "name": "response",
                    "type": "STRING",
                    "description": "Possible options: file_only (return image as bytes), detections_only (return list of detected objects with coordinates and probability percentage), json (return detections_only and recognised image as string base64).",
                    "default": "json"
                },
                {
                    "name": "object",
                    "type": "STRING",
                    "description": "This parameter can define specific object to be detected, full list of available options: 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster',  'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair dryer', 'toothbrush'\nAlso you can repeat object param to define list of objects.  ",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://image-recognition-and-prediction.p.rapidapi.com/base64image_recognition\"\nquerystring = {\"minimum_percentage_probability\": \"30\", \"response\": \"json\", \"object\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"image-recognition-and-prediction.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://image-recognition-and-prediction.p.rapidapi.com/base64image_recognition\"\nquerystring = {\"minimum_percentage_probability\": \"30\", \"response\": \"json\", \"object\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"image-recognition-and-prediction.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 200,
            "schema": {}
        }
    ]
}