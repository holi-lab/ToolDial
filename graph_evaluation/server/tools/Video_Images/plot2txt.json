{
    "product_id": "api_6f34050e-6a0d-467c-b6a7-f96a8a645307",
    "tool_description": "Process images and binary documents using machine learning methods, for analytics, search and other applications.",
    "home_url": "https://rapidapi.com/whiskeyjulietb/api/plot2txt1/",
    "name": "plot2txt",
    "title": "plot2txt",
    "pricing": "FREEMIUM",
    "tool_name": "plot2txt",
    "score": null,
    "host": "plot2txt1.p.rapidapi.com",
    "api_list": [
        {
            "name": "Keywords",
            "url": "https://plot2txt1.p.rapidapi.com/keywords",
            "description": "Extract words with more than five characters and frequency of two or more occurrences from page image; base64 encoded JSON response, base64 input PNG.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/keywords\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/keywords\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Get lines",
            "url": "https://plot2txt1.p.rapidapi.com/get-lines",
            "description": "Identify and mark lines in an image, also return coordinates of endpoints. Response is gzip'd and base64 encoded, base64 input PNG.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/get-lines\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/get-lines\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Degrid",
            "url": "https://plot2txt1.p.rapidapi.com/degrid",
            "description": "Filter orthogonal lines from images; base64 encoded gzip'd response, base64 input image.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/degrid\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/degrid\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Get circles",
            "url": "https://plot2txt1.p.rapidapi.com/get-circles",
            "description": "Identify circles in an image, also return coordinates of centers and radii. Response is gzip'd and base64 encoded, base64 input PNG.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/get-circles\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/get-circles\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Text lines",
            "url": "https://plot2txt1.p.rapidapi.com/text-lines",
            "description": "OCR with page position and bounding box information for each text line; filters extraneous objects, lines denoted by dashes. Input is base64 encoded PNG, output is base64 encoded JSON.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/text-lines\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/text-lines\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Group colors",
            "url": "https://plot2txt1.p.rapidapi.com/group-colors",
            "description": "Cluster R/G/B pixels and extract sub-images grouped around dominant R/G/B values.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/group-colors\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/group-colors\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Kernel",
            "url": "https://plot2txt1.p.rapidapi.com/kernel",
            "description": "Convolve a base64 encoded input PNG image with a 3x3 kernel matrix, in order to detect edges, sharpen and a variety of other tasks. Default matrix provides edge detection. Response includes processed output image in gzip'd file, base64 encoded eg., you could pipe output from curl into : sed 's/\"//g' | base64 -d | tar -xzv",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "h",
                    "type": "STRING",
                    "description": "a(2,1) of kernel",
                    "default": "-1"
                },
                {
                    "name": "i",
                    "type": "STRING",
                    "description": "a(2,2) of kernel",
                    "default": "0"
                },
                {
                    "name": "g",
                    "type": "STRING",
                    "description": "a(2,0) of kernel",
                    "default": "0"
                },
                {
                    "name": "a",
                    "type": "STRING",
                    "description": "a(0,0) of kernel",
                    "default": "0"
                },
                {
                    "name": "e",
                    "type": "STRING",
                    "description": "a(1,1) of kernel",
                    "default": "5"
                },
                {
                    "name": "c",
                    "type": "STRING",
                    "description": "a(0,2) of kernel",
                    "default": "0"
                },
                {
                    "name": "d",
                    "type": "STRING",
                    "description": "a(1,0) of kernel",
                    "default": "-1"
                },
                {
                    "name": "b",
                    "type": "STRING",
                    "description": "a(0,1) of kernel",
                    "default": "-1"
                },
                {
                    "name": "f",
                    "type": "STRING",
                    "description": "a(1,2) of kernel",
                    "default": "-1"
                }
            ],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/kernel\"\nquerystring = {\"h\": \"-1\", \"i\": \"0\", \"g\": \"0\", \"a\": \"0\", \"e\": \"5\", \"c\": \"0\", \"d\": \"-1\", \"b\": \"-1\", \"f\": \"-1\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/kernel\"\nquerystring = {\"h\": \"-1\", \"i\": \"0\", \"g\": \"0\", \"a\": \"0\", \"e\": \"5\", \"c\": \"0\", \"d\": \"-1\", \"b\": \"-1\", \"f\": \"-1\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Bounding box",
            "url": "https://plot2txt1.p.rapidapi.com/bbox",
            "description": "Extract pixel regions from an image according to bounding box area limits; response is base64 encoded gzip'd collection of PNG images that conform to limits.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "lower_area",
                    "type": "STRING",
                    "description": "Lower pixel area of desired bounding boxes, pixel coordinates",
                    "default": "100"
                },
                {
                    "name": "boundary",
                    "type": "STRING",
                    "description": "Boundary thickness around bounding boxes, pixel coordinates",
                    "default": "80"
                },
                {
                    "name": "upper_area",
                    "type": "STRING",
                    "description": "Upper area of desired bounding boxes, pixel coordinates",
                    "default": "10000"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/bbox\"\nquerystring = {\"lower_area\": \"100\", \"boundary\": \"80\", \"upper_area\": \"10000\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/bbox\"\nquerystring = {\"lower_area\": \"100\", \"boundary\": \"80\", \"upper_area\": \"10000\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Wav2txt",
            "url": "https://plot2txt1.p.rapidapi.com/wav2txt",
            "description": "Convert speech from audio file to text. Input is base64 encoded WAV files, output is base64 encoded text eg., you could pipe output from curl through : sed 's/\"//g' | base64 -d. Recall that inputs for all methods are restricted to < 2Mb in size, best to divide up large files. Processing time is roughly a second per second of audio, so split and parallelize requests anyway for maximum performance.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stime",
                    "type": "STRING",
                    "description": "Give a start time in UNIX seconds for this WAV file",
                    "default": ""
                },
                {
                    "name": "fname",
                    "type": "STRING",
                    "description": "Give a filename for this WAV file",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/wav2txt\"\nquerystring = {\"stime\": \"\", \"fname\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/wav2txt\"\nquerystring = {\"stime\": \"\", \"fname\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Blob summary",
            "url": "https://plot2txt1.p.rapidapi.com/blob-summary",
            "description": "Summarize and extract pixel regions from an image. Response is gzip'd and base64 encoded, base64 input PNG. Example input you could wget and test with : https://textextract1.s3.amazonaws.com/map_wells.base64, example output : https://textextract1.s3.amazonaws.com/map_wells_blobs.tgz",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/blob-summary\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/blob-summary\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Simple scatter plot",
            "url": "https://plot2txt1.p.rapidapi.com/simple-scatter-plot",
            "description": "A method that uses linear axis scaling information (if available) and simple Gaussian mixture modeling to invert data from plot images. Input is a base64 encoded PNG file, output is a base64 encoded gzip'd file eg., you could pipe output from curl through : sed 's/\"//g' | base64 -d | tar -xvz. Here's an example input page for you to wget and test with: https://textextract1.s3.amazonaws.com/test_plot_page.base64 and corresponding output : https://textextract1.s3.amazonaws.com/test_plot_page_out.tgz",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/simple-scatter-plot\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/simple-scatter-plot\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": " Pixel sieve",
            "url": "https://plot2txt1.p.rapidapi.com/pixel-sieve",
            "description": "Filter an image based on pixel blob size; output image is sum of pixel blobs that conform to limits. Example output/input you could wget and test with : https://textextract1.s3.amazonaws.com/map_wells_sieve.tgz, https://textextract1.s3.amazonaws.com/map_wells.base64",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "hi_pixels",
                    "type": "STRING",
                    "description": "Upper bound on pixels in desired blobs",
                    "default": "10000"
                }
            ],
            "optional_parameters": [
                {
                    "name": "lo_pixels",
                    "type": "STRING",
                    "description": "Lower bound on pixels in desired blobs",
                    "default": "100"
                }
            ],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/pixel-sieve\"\nquerystring = {\"hi_pixels\": \"10000\", \"lo_pixels\": \"100\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/pixel-sieve\"\nquerystring = {\"hi_pixels\": \"10000\", \"lo_pixels\": \"100\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Thinner",
            "url": "https://plot2txt1.p.rapidapi.com/thinner",
            "description": "Thin lines to single pixel width and sort pixel coordinates in an image, returning x/y values for each; gzip'd and base64 encoded JSON response.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/thinner\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/thinner\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers)\nprint(response.json())\n",
            "test_endpoint": ""
        },
        {
            "name": "Binarize",
            "url": "https://plot2txt1.p.rapidapi.com/binarize",
            "description": "Convert color image to black and white. By default threshold R/G/B values are set, available as query parameters; base64 encoded input, base64 encoded g'zip output. ",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "green",
                    "type": "STRING",
                    "description": "",
                    "default": "110"
                },
                {
                    "name": "red",
                    "type": "STRING",
                    "description": "",
                    "default": "110"
                },
                {
                    "name": "blue",
                    "type": "STRING",
                    "description": "",
                    "default": "110"
                }
            ],
            "code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/binarize\"\nquerystring = {\"green\": \"110\", \"red\": \"110\", \"blue\": \"110\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://plot2txt1.p.rapidapi.com/binarize\"\nquerystring = {\"green\": \"110\", \"red\": \"110\", \"blue\": \"110\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"plot2txt1.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        }
    ]
}