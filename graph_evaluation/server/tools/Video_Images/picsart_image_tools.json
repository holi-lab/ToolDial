{
    "product_id": "api_62af8da2-3739-4013-88fa-e12b2051a015",
    "tool_description": "Our most popular APIs - Remove Background and Ultra Upscale are available on RapidAPI's Marketplace. Picsart offers a full suite of APIs at Picsart.io.\n",
    "home_url": "https://rapidapi.com/picsart-for-developers-picsart-for-developers-default/api/picsart-image-tools/",
    "name": "Picsart Image Tools",
    "title": "Picsart Image Tools",
    "pricing": "FREEMIUM",
    "tool_name": "Picsart Image Tools",
    "score": {
        "avgServiceLevel": 100,
        "avgLatency": 9652,
        "avgSuccessRate": 69,
        "popularityScore": 9.3,
        "__typename": "Score"
    },
    "host": "picsart-image-tools.p.rapidapi.com",
    "api_list": [
        {
            "name": "/removebg",
            "url": "https://picsart-image-tools.p.rapidapi.com/removebg",
            "description": "**Service Description:**\n\nThe *removebg* service removes the background of an image. Utilizing high-end AI technology, our background remover detects the foreground object and automatically separates it from the background. Our algorithm is capable of handling the most diverse use cases, like small jewelry details, human hair, furry segments or any other complex edge types. Whether it's a product for sale, graphical materials for your best campaign or just personal images for fun editing, you will get clear edges with awesome detail preservation.\n\n**Limitations:**\n\n  The recommended composition of an Image, in order to be optimally processed using the \"removebg\" service, is:\n  * less busy background\n  * high contrast (background/foreground)\n  * background/foreground is distinguishable by naked eye \n  \n\n  The foreground should be visually clear, high contrast with relatively sharp edges. The foreground should also be comparably big in the photo. Supported source image formats are JPG, PNG, TIFF and WEBP. \n\n**Examples:**\n\n  Examples of where the remove background service can be utilized include the following:\n  * Animals\n  * Products\n  * Apparel\n  * Person\n  * Cars\n  * Furniture\n\n**Options:**\n  * You have two options for removing the background, either \"cutout\" or \"mask\"\n  * You can control background color\n  * You can control background blur\n  * You can control background height and width\n  * You have two scaling options, either \"fit\" or \"fill\"\n\n**Source Image:**\n\n   If you plan to remove the background several times using different parameters from the list below, we recommend you first upload the source image using the *Upload* method and then use the reference image ID. Otherwise, you can source the image by providing a file or a URL to an online image.\n\n**Authorization:**\n\n   Requires an API key to be provided in the **X-Picsart-API-Key** request header.\n\n**cURL:**\n\n   Use this file [RemoveBackground.sh](https://picsart.io/files/api-samples-curl-RemoveBackground.sh) for cURL samples.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "bg_image",
                    "type": "BINARY",
                    "description": "Background source image file (binary). If this parameter is present, the other background image source parameters bg_image_url must be empty.\n",
                    "default": ""
                },
                {
                    "name": "image_url",
                    "type": "STRING",
                    "description": "Source image URL.\nNote: If this parameter is present, the other image source parameters (image and image_id) must be empty.",
                    "default": ""
                },
                {
                    "name": "bg_image_url",
                    "type": "STRING",
                    "description": "Background source image URL. If this parameter is present, the other background image source parameter bg_image must be empty. \n",
                    "default": ""
                },
                {
                    "name": "bg_blur",
                    "type": "NUMBER",
                    "description": "Enter an integer value from 0 to +100.",
                    "default": "0"
                },
                {
                    "name": "image",
                    "type": "BINARY",
                    "description": "Source image file (binary). \nNote: If this parameter is present, the other image source parameters (image_url and image_id) must be empty.",
                    "default": ""
                },
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Optionally select one of the image formats (PNG is chosen if left blank). Options are as follows:\n  * JPG\n  * PNG\n  * WEBP\n",
                    "default": "PNG"
                },
                {
                    "name": "bg_color",
                    "type": "STRING",
                    "description": "Can be a color name (e.g., blue) or a hexcolor code (e.g., #82d5fa, #fff). For semi-transparency, 4-/8-digit hexcodes are also supported (e.g., #18d4ff87). \nIf this parameter is present, the other background parameters (bg_image and bg_image_url) must be empty.\n",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://picsart-image-tools.p.rapidapi.com/removebg\"\nquerystring = {\"bg_image\": \"\", \"image_url\": \"\", \"bg_image_url\": \"\", \"bg_blur\": \"0\", \"image\": \"\", \"format\": \"PNG\", \"bg_color\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"picsart-image-tools.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://picsart-image-tools.p.rapidapi.com/removebg\"\nquerystring = {\"bg_image\": \"\", \"image_url\": \"\", \"bg_image_url\": \"\", \"bg_blur\": \"0\", \"image\": \"\", \"format\": \"PNG\", \"bg_color\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"picsart-image-tools.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "/upscale/ultra",
            "url": "https://picsart-image-tools.p.rapidapi.com/upscale/ultra",
            "description": "**Service Description:** *Upscale Ultra* is a new upscaling technique which does upscaling with noise suppression. It works well on images with faces, small resolution images, stickers and objects with geometric shapes and clear edges. Upscale ultra increases the quality and resolution of low quality photos by leveraging predictive and generative AI technology in order to \"complete\" missing pixels for a best in class smoothing and enhancement effect. It works especially good on small resolution images with faces.\n\n**Limitations:**\n  Images can be upscaled up to 16 times. Supported source image formats are JPG, PNG, TIFF and WEBP. \n\n**Minimums/Maximums:**\n  * Up to 4Mpx (2048x2048) input images\n  * Up to 256Mpx output images\n\n**Examples:**\n  Examples of where the upscale ultra service can be utilized include the following:\n   * Low resolution images\n   * Images that need smoothing\n\n**Options:**\n  This service allows users to choose from *synchronous*, *asynchronous* and *auto-mode* (sync is default) type of processing. The asynchronous service is preferred when processing large final size image files or when using high upscaling factors. When done asynchronously, rather than receiving a URL to the finished image, you will receive a transaction_id to use with the GET method to retrieve the transformed image. Options are detailed below:\n  * **Sync**: issues a synchronous request, response is given when the result is ready. In case of processes which take too long (>55 seconds), the request returns an error after timeout. Based on the estimated (calculated by the algorithm) final size of an image, there is also an auto-switching mechanism which automatically switches the processing mode to the async mode, if the estimated final size of the respective image is larger than 4Mpx.\n  * **Async**: forces an asynchronous request, and the response, which is instantaneous, contains a \"transaction_id\" which is used to poll for the result. For async processing, the request runs in async mode either until it returns a result or stops after 24 hours.\n  * **Auto**: the processing mode decision is made automatically by the service, depending upon image size (estimated final size of an image should exceed 4Mpx to choose async automatically).\n\n  **Source Image:**\n    If you plan to upscale ultra an image several times, we recommend you first upload the source image using the *Upload* method and then use the reference image ID. Otherwise, you can source the image by providing a file or a URL to an online image.\n\n  **Authorization:**\n    Requires an API key to be provided in the **X-Picsart-API-Key** request header.\n\n  **cURL:**\n    Use this file [Upscale-Ultra.sh](https://picsart.io/files/api-samples-curl-Upscale-Ultra.sh) for cURL samples.",
            "method": "POST",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "image_url",
                    "type": "STRING",
                    "description": "Source image URL. If this parameter is present, the other image source parameter, image, must be empty.",
                    "default": ""
                },
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Optionally select one of the image formats (JPG is default). Options are as follows:\n  * JPG\n  * PNG\n  * WEBP\n",
                    "default": "JPG"
                },
                {
                    "name": "upscale_factor",
                    "type": "NUMBER",
                    "description": "Upscale an image with a given upscale factor. The upscale factor increases the image\u2019s resolution without increasing its size. Upscale factor can be between 2 - 16. The default value is 2.\n",
                    "default": "2"
                },
                {
                    "name": "image",
                    "type": "BINARY",
                    "description": "Source image file (binary). If this parameter is present, the other image source parameter image_url must be empty.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://picsart-image-tools.p.rapidapi.com/upscale/ultra\"\nquerystring = {\"image_url\": \"\", \"format\": \"JPG\", \"upscale_factor\": \"2\", \"image\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"picsart-image-tools.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://picsart-image-tools.p.rapidapi.com/upscale/ultra\"\nquerystring = {\"image_url\": \"\", \"format\": \"JPG\", \"upscale_factor\": \"2\", \"image\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"picsart-image-tools.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        }
    ]
}