{
    "tool_name": "ASCII Art",
    "tool_description": "Create ASCII art from your images. Create ASCII tables from your CSV data. Create ASCII figlets (text art using text fonts) for any strings using any of the 200+ figlet styles. Make our cow (or other animals) say things you want in ascii (cowsay).\r\n\r\nAll the results are returned as base64 encoded json strings to preserve the perfect formatting until it reaches your program.",
    "title": "ASCII Art",
    "pricing": "FREEMIUM",
    "score": null,
    "home_url": "https://rapidapi.com/orthosie/api/ascii-art/",
    "host": "ascii.p.rapidapi.com",
    "api_list": [
        {
            "name": "cowsay",
            "url": "https://ascii.p.rapidapi.com/cowsay",
            "description": "Make an ASCII cow say things",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "Text to put in cow's mouth",
                    "default": "ASCII.gallery"
                }
            ],
            "optional_parameters": [
                {
                    "name": "style",
                    "type": "STRING",
                    "description": "Cow style you want to use.",
                    "default": "skull"
                }
            ],
            "code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/cowsay\"\nquerystring = {\"text\": text, \"style\": style}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "list_cowsay_styles",
            "url": "https://ascii.p.rapidapi.com/cowsay/list_styles",
            "description": "List available cow styles",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/cowsay/list_styles\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "matheq",
            "url": "https://ascii.p.rapidapi.com/matheq",
            "description": "Generate ASCII Math Equations.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "Text to generate Math equation.",
                    "default": "h = -((f'(x)/f''(x))*(1 - sqrt(1 - (2*f(x)*f''(x))/f'(x)^2)))"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/matheq\"\nquerystring = {\"text\": text}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n}\n\nresponse = requests.post(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
            "statuscode": 111,
            "body": "",
            "headers": "",
            "schema": ""
        },
        {
            "name": "image2ascii",
            "url": "https://ascii.p.rapidapi.com/image2ascii",
            "description": "Convert an image to ascii art",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "image",
                    "type": "BINARY",
                    "description": "Image file to convert to ascii art",
                    "default": "test.png"
                }
            ],
            "optional_parameters": [
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Format of the ascii art generate \"color\" / \"mono\".",
                    "default": "color"
                }
            ],
            "code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/image2ascii\"\nquerystring = {\"image\": \"test.png\", \"format\": \"color\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/image2ascii\"\nquerystring = {\"image\": \"test.png\", \"format\": \"color\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "ascii_table",
            "url": "https://ascii.p.rapidapi.com/table",
            "description": "Create an ASCII Table from a given csv table.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "csv",
                    "type": "STRING",
                    "description": "csv data to create a table from.",
                    "default": "1,2,3"
                }
            ],
            "optional_parameters": [
                {
                    "name": "firstheader",
                    "type": "BOOLEAN",
                    "description": "Flag indicating whether the first row of CSV has column names or not. Default false.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/table\"\nquerystring = {\"csv\": \"1,2,3\", \"firstheader\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/table\"\nquerystring = {\"csv\": \"1,2,3\", \"firstheader\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": "",
            "statuscode": 1,
            "schema": ""
        },
        {
            "name": "matheq",
            "url": "https://ascii.p.rapidapi.com/matheq",
            "description": "Generate ASCII Math Equations.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "Text to generate Math equation.",
                    "default": "h = -((f'(x)/f''(x))*(1 - sqrt(1 - (2*f(x)*f''(x))/f'(x)^2)))"
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/matheq\"\nquerystring = {\"text\": \"h = -((f'(x)/f''(x))*(1 - sqrt(1 - (2*f(x)*f''(x))/f'(x)^2)))\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "convert_code": "import requests\n\nurl = \"https://ascii.p.rapidapi.com/matheq\"\nquerystring = {\"text\": \"h = -((f'(x)/f''(x))*(1 - sqrt(1 - (2*f(x)*f''(x))/f'(x)^2)))\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ascii.p.rapidapi.com\"\n        }\n\nresponse = requests.post(url, headers=headers, params=querystring)\nprint(response.json())\n",
            "test_endpoint": ""
        }
    ]
}